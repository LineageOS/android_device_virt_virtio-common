From 2e1358312d6cf09960a09b367b095d6cb39b1ea1 Mon Sep 17 00:00:00 2001
From: Android Build Server 2 <build@AndroidBuild-2>
Date: Tue, 16 Jul 2024 14:24:00 +0000
Subject: [PATCH] 20240716 main external/mesa3d

Change-Id: I56cb57c16565ff77e9a496283725bb7fdd614754
---
 Android.bp                           | 7587 ++++++++++++++++++++++
 generate_android_build.py            | 8839 ++++++++++++++++++++++++++
 meson.build                          |    2 +-
 python-build/build-android-turnip.sh |    9 +-
 python-build/meson2python.py         |    2 -
 5 files changed, 16431 insertions(+), 8 deletions(-)
 create mode 100644 Android.bp
 create mode 100644 generate_android_build.py

diff --git a/Android.bp b/Android.bp
new file mode 100644
index 00000000000..08bad158a0c
--- /dev/null
+++ b/Android.bp
@@ -0,0 +1,7587 @@
+cc_library_static {
+  name: "gtest",
+  srcs: [
+    "src/gtest/src/gtest_main.cc",
+    "src/gtest/src/gtest-all.cc",
+  ],
+  generated_headers: [
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/gtest",
+    "src/gtest/include",
+  ],
+  static_libs: [
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+  ],
+  header_libs: [
+  ],
+}
+cc_library_static {
+  name: "mesa_util_c11",
+  srcs: [
+    "src/c11/impl/time.c",
+  ],
+  generated_headers: [
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/c11/impl",
+    "src/c11/impl/../..",
+  ],
+  static_libs: [
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+  ],
+  header_libs: [
+  ],
+}
+cc_library_static {
+  name: "_mesa_u_gralloc",
+  srcs: [
+    "src/util/u_gralloc/u_gralloc_internal.c",
+    "src/util/u_gralloc/u_gralloc_qcom.c",
+    "src/util/u_gralloc/u_gralloc_cros_api.c",
+    "src/util/u_gralloc/u_gralloc_imapper4_api.cpp",
+    "src/util/u_gralloc/u_gralloc_libdrm.c",
+    "src/util/u_gralloc/u_gralloc_fallback.c",
+    "src/util/u_gralloc/u_gralloc.c",
+  ],
+  generated_headers: [
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-DUSE_IMAPPER4_METADATA_API",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-DUSE_IMAPPER4_METADATA_API",
+  ],
+  local_include_dirs: [
+    "src/util/u_gralloc",
+    "include/.",
+    "include/.",
+    "src/util/..",
+  ],
+  static_libs: [
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+cc_library_static {
+  name: "blake3",
+  srcs: [
+    "src/util/blake3/blake3_portable.c",
+    "src/util/blake3/blake3.c",
+    "src/util/blake3/blake3_neon.c",
+    "src/util/blake3/blake3_dispatch.c",
+  ],
+  generated_headers: [
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/util/blake3",
+  ],
+  static_libs: [
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+python_binary_host {
+  name: "driconf_static.h_driconf_static.py",
+  main: "src/util/driconf_static.py",
+  srcs: [
+    "src/util/driconf_static.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "driconf_static.h",
+  srcs: [
+    "src/util/driconf_static.py",
+    "src/util/00-mesa-defaults.conf",
+  ],
+  out: [
+    "src/util/driconf_static.h",
+  ],
+  tools: [
+    "driconf_static.h_driconf_static.py",
+  ],
+  export_include_dirs: [
+    "src/util",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/util/driconf_static.py)` python3 $(location driconf_static.h_driconf_static.py) $(location src/util/00-mesa-defaults.conf) $(location src/util/driconf_static.h)"
+}
+python_binary_host {
+  name: "format_srgb_format_srgb.py",
+  main: "src/util/format_srgb.py",
+  srcs: [
+    "src/util/format_srgb.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "format_srgb",
+  srcs: [
+    "src/util/format_srgb.py",
+  ],
+  out: [
+    "src/util/format_srgb.c",
+  ],
+  tools: [
+    "format_srgb_format_srgb.py",
+  ],
+  export_include_dirs: [
+    "src/util",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/util/format_srgb.py)` python3 $(location format_srgb_format_srgb.py) > $(location src/util/format_srgb.c)"
+}
+cc_library_static {
+  name: "mesa_util_sse41",
+  srcs: [
+    "src/util/streaming-load-memcpy.c",
+  ],
+  generated_headers: [
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/util",
+    "include/.",
+    "src/util/..",
+  ],
+  static_libs: [
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+python_binary_host {
+  name: "u_format_pack.h_u_format_table.py",
+  main: "src/util/format/u_format_table.py",
+  srcs: [
+    "src/util/format/u_format_table.py",
+    "src/util/format/u_format_pack.py",
+    "src/util/format/u_format_parse.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "u_format_pack.h",
+  srcs: [
+    "src/util/format/u_format_table.py",
+    "src/util/format/u_format.csv",
+    "src/util/format/u_format_pack.py",
+    "src/util/format/u_format_parse.py",
+  ],
+  out: [
+    "src/util/format/u_format_pack.h",
+  ],
+  tools: [
+    "u_format_pack.h_u_format_table.py",
+  ],
+  export_include_dirs: [
+    "src/util/format",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/util/format/u_format_table.py)` python3 $(location u_format_pack.h_u_format_table.py) $(location src/util/format/u_format.csv) --header > $(location src/util/format/u_format_pack.h)"
+}
+python_binary_host {
+  name: "u_format_table.c_u_format_table.py",
+  main: "src/util/format/u_format_table.py",
+  srcs: [
+    "src/util/format/u_format_table.py",
+    "src/util/format/u_format_pack.py",
+    "src/util/format/u_format_parse.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "u_format_table.c",
+  srcs: [
+    "src/util/format/u_format_table.py",
+    "src/util/format/u_format.csv",
+    "src/util/format/u_format_pack.py",
+    "src/util/format/u_format_parse.py",
+  ],
+  out: [
+    "src/util/format/u_format_table.c",
+  ],
+  tools: [
+    "u_format_table.c_u_format_table.py",
+  ],
+  export_include_dirs: [
+    "src/util/format",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/util/format/u_format_table.py)` python3 $(location u_format_table.c_u_format_table.py) $(location src/util/format/u_format.csv) > $(location src/util/format/u_format_table.c)"
+}
+cc_library_static {
+  name: "mesa_util",
+  srcs: [
+    "src/util/format/u_format_latc.c",
+    "src/util/crc32.c",
+    "src/util/u_call_once.c",
+    "src/util/u_worklist.c",
+    "src/util/mesa_cache_db.c",
+    "src/util/slab.c",
+    "src/util/vma.c",
+    "src/util/u_process.c",
+    "src/util/strtod.c",
+    "src/util/format/u_format_tests.c",
+    "src/util/u_debug_stack_android.cpp",
+    "src/util/fast_idiv_by_const.c",
+    "src/util/fossilize_db.c",
+    "src/util/simple_mtx.c",
+    "src/util/thread_sched.c",
+    "src/util/vl_zscan_data.c",
+    "src/util/rgtc.c",
+    "src/util/dag.c",
+    "src/util/u_cpu_detect.c",
+    "src/util/texcompress_astc_luts_wrap.cpp",
+    "src/util/format/u_format_bptc.c",
+    "src/util/disk_cache.c",
+    "src/util/anon_file.c",
+    "src/util/cnd_monotonic.c",
+    "src/util/format/u_format_rgtc.c",
+    "src/util/format/u_format_zs.c",
+    "src/util/half_float.c",
+    "src/util/format/u_format_yuv.c",
+    "src/util/os_socket.c",
+    "src/util/memstream.c",
+    "src/util/mesa-blake3.c",
+    "src/util/format/u_format_etc.c",
+    "src/util/bitscan.c",
+    "src/util/u_debug_memory.c",
+    "src/util/double.c",
+    "src/util/register_allocate.c",
+    "src/util/format/u_format_fxt1.c",
+    "src/util/rand_xor.c",
+    "src/util/u_dl.c",
+    "src/util/format/u_format_other.c",
+    "src/util/u_atomic.c",
+    "src/util/mesa_cache_db_multipart.c",
+    "src/util/u_dynarray.c",
+    "src/util/u_qsort.cpp",
+    "src/util/u_hash_table.c",
+    "src/util/compress.c",
+    "src/util/disk_cache_os.c",
+    "src/util/os_memory_fd.c",
+    "src/util/ralloc.c",
+    "src/util/u_thread.c",
+    "src/util/softfloat.c",
+    "src/util/u_mm.c",
+    "src/util/texcompress_astc_luts.cpp",
+    "src/util/rb_tree.c",
+    "src/util/format/u_format_unpack_neon.c",
+    "src/util/build_id.c",
+    "src/util/format/u_format.c",
+    "src/util/mesa-sha1.c",
+    "src/util/sparse_array.c",
+    "src/util/os_file.c",
+    "src/util/set.c",
+    "src/util/os_time.c",
+    "src/util/u_printf.c",
+    "src/util/format/u_format_s3tc.c",
+    "src/util/string_buffer.c",
+    "src/util/u_queue.c",
+    "src/util/log.c",
+    "src/util/sha1/sha1.c",
+    "src/util/perf/u_trace.c",
+    "src/util/os_misc.c",
+    "src/util/u_vector.c",
+    "src/util/u_debug.c",
+    "src/util/rwlock.c",
+    "src/util/u_math.c",
+    "src/util/u_idalloc.c",
+    "src/util/hash_table.c",
+    "src/util/futex.c",
+    "src/util/blob.c",
+  ],
+  generated_headers: [
+    "u_format_pack.h",
+  ],
+  generated_sources: [
+    "format_srgb",
+    "u_format_table.c",
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/util",
+    "include/.",
+    "src/util/..",
+    "src/util/format",
+    "src/c11/impl/../..",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "blake3",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+    "mesa_util_sse41",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+cc_library_static {
+  name: "xmlconfig",
+  srcs: [
+    "src/util/xmlconfig.c",
+  ],
+  generated_headers: [
+    "driconf_static.h",
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+    "-DWITH_XMLCONFIG=0",
+    "-DSYSCONFDIR=\"prefix/sysconfdir\"",
+    "-DDATADIR=\"prefix/datadir\"",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/util",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+cc_library_static {
+  name: "parson",
+  srcs: [
+    "src/util/parson.c",
+  ],
+  generated_headers: [
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/util",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+python_binary_host {
+  name: "git_sha1.h_git_sha1_gen.py",
+  main: "bin/git_sha1_gen.py",
+  srcs: [
+    "bin/git_sha1_gen.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "git_sha1.h",
+  srcs: [
+    "bin/git_sha1_gen.py",
+  ],
+  out: [
+    "src/git_sha1.h",
+  ],
+  tools: [
+    "git_sha1.h_git_sha1_gen.py",
+  ],
+  export_include_dirs: [
+    "src",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location bin/git_sha1_gen.py)` python3 $(location git_sha1.h_git_sha1_gen.py) --output $(location src/git_sha1.h)"
+}
+python_binary_host {
+  name: "builtin_types.h_builtin_types_h.py",
+  main: "src/compiler/builtin_types_h.py",
+  srcs: [
+    "src/compiler/builtin_types_h.py",
+    "src/compiler/builtin_types.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "builtin_types.h",
+  srcs: [
+    "src/compiler/builtin_types_h.py",
+    "src/compiler/builtin_types.py",
+  ],
+  out: [
+    "src/compiler/builtin_types.h",
+  ],
+  tools: [
+    "builtin_types.h_builtin_types_h.py",
+  ],
+  export_include_dirs: [
+    "src/compiler",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/builtin_types_h.py)` python3 $(location builtin_types.h_builtin_types_h.py) $(location src/compiler/builtin_types.h)"
+}
+python_binary_host {
+  name: "builtin_types.c_builtin_types_c.py",
+  main: "src/compiler/builtin_types_c.py",
+  srcs: [
+    "src/compiler/builtin_types_c.py",
+    "src/compiler/builtin_types.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "builtin_types.c",
+  srcs: [
+    "src/compiler/builtin_types_c.py",
+    "src/compiler/builtin_types.py",
+  ],
+  out: [
+    "src/compiler/builtin_types.c",
+  ],
+  tools: [
+    "builtin_types.c_builtin_types_c.py",
+  ],
+  export_include_dirs: [
+    "src/compiler",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/builtin_types_c.py)` python3 $(location builtin_types.c_builtin_types_c.py) $(location src/compiler/builtin_types.c)"
+}
+python_binary_host {
+  name: "ir_expression_operation.h_ir_expression_operation.py",
+  main: "src/compiler/glsl/ir_expression_operation.py",
+  srcs: [
+    "src/compiler/glsl/ir_expression_operation.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "ir_expression_operation.h",
+  srcs: [
+    "src/compiler/glsl/ir_expression_operation.py",
+  ],
+  out: [
+    "src/compiler/ir_expression_operation.h",
+  ],
+  tools: [
+    "ir_expression_operation.h_ir_expression_operation.py",
+  ],
+  export_include_dirs: [
+    "src/compiler",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/glsl/ir_expression_operation.py)` python3 $(location ir_expression_operation.h_ir_expression_operation.py) enum > $(location src/compiler/ir_expression_operation.h)"
+}
+cc_library_static {
+  name: "compiler",
+  srcs: [
+    "src/compiler/shader_enums.c",
+    "src/compiler/glsl_types.c",
+  ],
+  generated_headers: [
+    "ir_expression_operation.h",
+    "builtin_types.h",
+  ],
+  generated_sources: [
+    "builtin_types.c",
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+    "-Wno-override-init",
+    "-Wno-initializer-overrides",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+  ],
+  local_include_dirs: [
+    "src/compiler",
+    "src/compiler/.",
+    "include/.",
+    "src/.",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+python_binary_host {
+  name: "nir_builder_opcodes.h_nir_builder_opcodes_h.py",
+  main: "src/compiler/nir/nir_builder_opcodes_h.py",
+  srcs: [
+    "src/compiler/nir/nir_builder_opcodes_h.py",
+    "src/compiler/nir/nir_opcodes.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "nir_builder_opcodes.h",
+  srcs: [
+    "src/compiler/nir/nir_builder_opcodes_h.py",
+    "src/compiler/nir/nir_opcodes.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  out: [
+    "src/compiler/nir/nir_builder_opcodes.h",
+  ],
+  tools: [
+    "nir_builder_opcodes.h_nir_builder_opcodes_h.py",
+  ],
+  export_include_dirs: [
+    "src/compiler/nir",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/nir/nir_builder_opcodes_h.py)` python3 $(location nir_builder_opcodes.h_nir_builder_opcodes_h.py) > $(location src/compiler/nir/nir_builder_opcodes.h)"
+}
+python_binary_host {
+  name: "nir_constant_expressions.c_nir_constant_expressions.py",
+  main: "src/compiler/nir/nir_constant_expressions.py",
+  srcs: [
+    "src/compiler/nir/nir_constant_expressions.py",
+    "src/compiler/nir/nir_opcodes.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "nir_constant_expressions.c",
+  srcs: [
+    "src/compiler/nir/nir_constant_expressions.py",
+    "src/compiler/nir/nir_opcodes.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  out: [
+    "src/compiler/nir/nir_constant_expressions.c",
+  ],
+  tools: [
+    "nir_constant_expressions.c_nir_constant_expressions.py",
+  ],
+  export_include_dirs: [
+    "src/compiler/nir",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/nir/nir_constant_expressions.py)` python3 $(location nir_constant_expressions.c_nir_constant_expressions.py) > $(location src/compiler/nir/nir_constant_expressions.c)"
+}
+python_binary_host {
+  name: "nir_opcodes.h_nir_opcodes_h.py",
+  main: "src/compiler/nir/nir_opcodes_h.py",
+  srcs: [
+    "src/compiler/nir/nir_opcodes_h.py",
+    "src/compiler/nir/nir_opcodes.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "nir_opcodes.h",
+  srcs: [
+    "src/compiler/nir/nir_opcodes_h.py",
+    "src/compiler/nir/nir_opcodes.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  out: [
+    "src/compiler/nir/nir_opcodes.h",
+  ],
+  tools: [
+    "nir_opcodes.h_nir_opcodes_h.py",
+  ],
+  export_include_dirs: [
+    "src/compiler/nir",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/nir/nir_opcodes_h.py)` python3 $(location nir_opcodes.h_nir_opcodes_h.py) > $(location src/compiler/nir/nir_opcodes.h)"
+}
+python_binary_host {
+  name: "nir_opcodes.c_nir_opcodes_c.py",
+  main: "src/compiler/nir/nir_opcodes_c.py",
+  srcs: [
+    "src/compiler/nir/nir_opcodes_c.py",
+    "src/compiler/nir/nir_opcodes.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "nir_opcodes.c",
+  srcs: [
+    "src/compiler/nir/nir_opcodes_c.py",
+    "src/compiler/nir/nir_opcodes.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  out: [
+    "src/compiler/nir/nir_opcodes.c",
+  ],
+  tools: [
+    "nir_opcodes.c_nir_opcodes_c.py",
+  ],
+  export_include_dirs: [
+    "src/compiler/nir",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/nir/nir_opcodes_c.py)` python3 $(location nir_opcodes.c_nir_opcodes_c.py) > $(location src/compiler/nir/nir_opcodes.c)"
+}
+python_binary_host {
+  name: "nir_opt_algebraic.c_nir_opt_algebraic.py",
+  main: "src/compiler/nir/nir_opt_algebraic.py",
+  srcs: [
+    "src/compiler/nir/nir_opt_algebraic.py",
+    "src/compiler/nir/nir_opcodes.py",
+    "src/compiler/nir/nir_algebraic.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "nir_opt_algebraic.c",
+  srcs: [
+    "src/compiler/nir/nir_opt_algebraic.py",
+    "src/compiler/nir/nir_opcodes.py",
+    "src/compiler/nir/nir_algebraic.py",
+  ],
+  out: [
+    "src/compiler/nir/nir_opt_algebraic.c",
+  ],
+  tools: [
+    "nir_opt_algebraic.c_nir_opt_algebraic.py",
+  ],
+  export_include_dirs: [
+    "src/compiler/nir",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/nir/nir_opt_algebraic.py)` python3 $(location nir_opt_algebraic.c_nir_opt_algebraic.py) --out $(location src/compiler/nir/nir_opt_algebraic.c)"
+}
+python_binary_host {
+  name: "nir_intrinsics.h_nir_intrinsics_h.py",
+  main: "src/compiler/nir/nir_intrinsics_h.py",
+  srcs: [
+    "src/compiler/nir/nir_intrinsics_h.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "nir_intrinsics.h",
+  srcs: [
+    "src/compiler/nir/nir_intrinsics_h.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  out: [
+    "src/compiler/nir/nir_intrinsics.h",
+  ],
+  tools: [
+    "nir_intrinsics.h_nir_intrinsics_h.py",
+  ],
+  export_include_dirs: [
+    "src/compiler/nir",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/nir/nir_intrinsics_h.py)` python3 $(location nir_intrinsics.h_nir_intrinsics_h.py) --outdir $(genDir)/src/compiler/nir"
+}
+python_binary_host {
+  name: "nir_intrinsics_indices.h_nir_intrinsics_indices_h.py",
+  main: "src/compiler/nir/nir_intrinsics_indices_h.py",
+  srcs: [
+    "src/compiler/nir/nir_intrinsics_indices_h.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "nir_intrinsics_indices.h",
+  srcs: [
+    "src/compiler/nir/nir_intrinsics_indices_h.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  out: [
+    "src/compiler/nir/nir_intrinsics_indices.h",
+  ],
+  tools: [
+    "nir_intrinsics_indices.h_nir_intrinsics_indices_h.py",
+  ],
+  export_include_dirs: [
+    "src/compiler/nir",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/nir/nir_intrinsics_indices_h.py)` python3 $(location nir_intrinsics_indices.h_nir_intrinsics_indices_h.py) --outdir $(genDir)/src/compiler/nir"
+}
+python_binary_host {
+  name: "nir_intrinsic.c_nir_intrinsics_c.py",
+  main: "src/compiler/nir/nir_intrinsics_c.py",
+  srcs: [
+    "src/compiler/nir/nir_intrinsics_c.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "nir_intrinsic.c",
+  srcs: [
+    "src/compiler/nir/nir_intrinsics_c.py",
+    "src/compiler/nir/nir_intrinsics.py",
+  ],
+  out: [
+    "src/compiler/nir/nir_intrinsics.c",
+  ],
+  tools: [
+    "nir_intrinsic.c_nir_intrinsics_c.py",
+  ],
+  export_include_dirs: [
+    "src/compiler/nir",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/nir/nir_intrinsics_c.py)` python3 $(location nir_intrinsic.c_nir_intrinsics_c.py) --outdir $(genDir)/src/compiler/nir"
+}
+cc_library_static {
+  name: "nir",
+  srcs: [
+    "src/compiler/nir/nir_lower_idiv.c",
+    "src/compiler/nir/nir_lower_drawpixels.c",
+    "src/compiler/nir/nir_lower_tex_shadow.c",
+    "src/compiler/nir/nir_lower_packing.c",
+    "src/compiler/nir/nir_lower_sysvals_to_varyings.c",
+    "src/compiler/nir/nir_normalize_cubemap_coords.c",
+    "src/compiler/nir/nir_lower_reg_intrinsics_to_ssa.c",
+    "src/compiler/nir/nir_lower_int_to_float.c",
+    "src/compiler/nir/nir_opt_preamble.c",
+    "src/compiler/nir/nir_control_flow.c",
+    "src/compiler/nir/nir_lower_ssbo.c",
+    "src/compiler/nir/nir_legacy.c",
+    "src/compiler/nir/nir_lower_system_values.c",
+    "src/compiler/nir/nir_opt_comparison_pre.c",
+    "src/compiler/nir/nir_lower_io.c",
+    "src/compiler/nir/nir_opt_fragdepth.c",
+    "src/compiler/nir/nir_lower_vars_to_ssa.c",
+    "src/compiler/nir/nir_lower_non_uniform_access.c",
+    "src/compiler/nir/nir_move_vec_src_uses_to_dest.c",
+    "src/compiler/nir/nir_lower_double_ops.c",
+    "src/compiler/nir/nir_lower_ubo_vec4.c",
+    "src/compiler/nir/nir_liveness.c",
+    "src/compiler/nir/nir_lower_clip_cull_distance_arrays.c",
+    "src/compiler/nir/nir_lower_texcoord_replace_late.c",
+    "src/compiler/nir/nir_opt_idiv_const.c",
+    "src/compiler/nir/nir_lower_int64.c",
+    "src/compiler/nir/nir_lower_amul.c",
+    "src/compiler/nir/nir_lower_point_smooth.c",
+    "src/compiler/nir/nir_opt_constant_folding.c",
+    "src/compiler/nir/nir_opt_cse.c",
+    "src/compiler/nir/nir_lower_interpolation.c",
+    "src/compiler/nir/nir_lower_mem_access_bit_sizes.c",
+    "src/compiler/nir/nir_opt_access.c",
+    "src/compiler/nir/nir_lower_patch_vertices.c",
+    "src/compiler/nir/nir_lower_fb_read.c",
+    "src/compiler/nir/nir_inline_uniforms.c",
+    "src/compiler/nir/nir_lower_alu_width.c",
+    "src/compiler/nir/nir_split_per_member_structs.c",
+    "src/compiler/nir/nir_opt_shrink_vectors.c",
+    "src/compiler/nir/nir_opt_uniform_atomics.c",
+    "src/compiler/nir/nir_lower_var_copies.c",
+    "src/compiler/nir/nir_opt_reassociate_bfi.c",
+    "src/compiler/nir/nir_lower_alu.c",
+    "src/compiler/nir/nir_opt_varyings.c",
+    "src/compiler/nir/nir_opt_phi_precision.c",
+    "src/compiler/nir/nir_opt_offsets.c",
+    "src/compiler/nir/nir_repair_ssa.c",
+    "src/compiler/nir/nir_lower_wpos_center.c",
+    "src/compiler/nir/nir_opt_load_store_vectorize.c",
+    "src/compiler/nir/nir_lower_single_sampled.c",
+    "src/compiler/nir/nir_lower_clamp_color_outputs.c",
+    "src/compiler/nir/nir_lower_clip_disable.c",
+    "src/compiler/nir/nir_opt_combine_stores.c",
+    "src/compiler/nir/nir_schedule.c",
+    "src/compiler/nir/nir_lower_multiview.c",
+    "src/compiler/nir/nir_lower_subgroups.c",
+    "src/compiler/nir/nir_lower_mediump.c",
+    "src/compiler/nir/nir_propagate_invariant.c",
+    "src/compiler/nir/nir_lower_tess_coord_z.c",
+    "src/compiler/nir/nir_loop_analyze.c",
+    "src/compiler/nir/nir_lower_is_helper_invocation.c",
+    "src/compiler/nir/nir_lower_wrmasks.c",
+    "src/compiler/nir/nir_search.c",
+    "src/compiler/nir/nir_opt_undef.c",
+    "src/compiler/nir/nir_sweep.c",
+    "src/compiler/nir/nir_lower_flatshade.c",
+    "src/compiler/nir/nir_trivialize_registers.c",
+    "src/compiler/nir/nir_lower_indirect_derefs.c",
+    "src/compiler/nir/nir_opt_reuse_constants.c",
+    "src/compiler/nir/nir_builder.c",
+    "src/compiler/nir/nir_lower_goto_ifs.c",
+    "src/compiler/nir/nir_lower_samplers.c",
+    "src/compiler/nir/nir_group_loads.c",
+    "src/compiler/nir/nir_lower_fragcoord_wtrans.c",
+    "src/compiler/nir/nir_phi_builder.c",
+    "src/compiler/nir/nir_validate.c",
+    "src/compiler/nir/nir_lower_gs_intrinsics.c",
+    "src/compiler/nir/nir_lower_scratch.c",
+    "src/compiler/nir/nir_opt_find_array_copies.c",
+    "src/compiler/nir/nir_opt_mqsad.c",
+    "src/compiler/nir/nir_serialize.c",
+    "src/compiler/nir/nir_lower_undef_to_zero.c",
+    "src/compiler/nir/nir_opt_loop.c",
+    "src/compiler/nir/nir_lower_printf.c",
+    "src/compiler/nir/nir_gather_info.c",
+    "src/compiler/nir/nir_gs_count_vertices.c",
+    "src/compiler/nir/nir_opt_dead_write_vars.c",
+    "src/compiler/nir/nir_lower_pntc_ytransform.c",
+    "src/compiler/nir/nir_lower_memcpy.c",
+    "src/compiler/nir/nir_linking_helpers.c",
+    "src/compiler/nir/nir_deref.c",
+    "src/compiler/nir/nir_lower_texcoord_replace.c",
+    "src/compiler/nir/nir_opt_vectorize_io.c",
+    "src/compiler/nir/nir_passthrough_gs.c",
+    "src/compiler/nir/nir_opt_ray_queries.c",
+    "src/compiler/nir/nir_builtin_builder.c",
+    "src/compiler/nir/nir_lower_bitmap.c",
+    "src/compiler/nir/nir_mod_analysis.c",
+    "src/compiler/nir/nir_opt_loop_unroll.c",
+    "src/compiler/nir/nir_to_lcssa.c",
+    "src/compiler/nir/nir_lower_io_to_scalar.c",
+    "src/compiler/nir/nir_lower_vec3_to_vec4.c",
+    "src/compiler/nir/nir_opt_gcm.c",
+    "src/compiler/nir/nir_lower_const_arrays_to_uniforms.c",
+    "src/compiler/nir/nir_print.c",
+    "src/compiler/nir/nir_range_analysis.c",
+    "src/compiler/nir/nir_lower_cl_images.c",
+    "src/compiler/nir/nir_lower_passthrough_edgeflags.c",
+    "src/compiler/nir/nir_opt_intrinsics.c",
+    "src/compiler/nir/nir_opt_rematerialize_compares.c",
+    "src/compiler/nir/nir_lower_variable_initializers.c",
+    "src/compiler/nir/nir_lower_io_arrays_to_elements.c",
+    "src/compiler/nir/nir_lower_image.c",
+    "src/compiler/nir/nir_lower_task_shader.c",
+    "src/compiler/nir/nir_from_ssa.c",
+    "src/compiler/nir/nir_lower_phis_to_scalar.c",
+    "src/compiler/nir/nir_opt_remove_phis.c",
+    "src/compiler/nir/nir_opt_if.c",
+    "src/compiler/nir/nir_lower_bit_size.c",
+    "src/compiler/nir/nir_opt_uniform_subgroup.c",
+    "src/compiler/nir/nir_functions.c",
+    "src/compiler/nir/nir_opt_copy_prop_vars.c",
+    "src/compiler/nir/nir_lower_uniforms_to_ubo.c",
+    "src/compiler/nir/nir_opt_copy_propagate.c",
+    "src/compiler/nir/nir_passthrough_tcs.c",
+    "src/compiler/nir/nir_opt_shrink_stores.c",
+    "src/compiler/nir/nir_opt_dce.c",
+    "src/compiler/nir/nir_worklist.c",
+    "src/compiler/nir/nir_opt_move.c",
+    "src/compiler/nir/nir_lower_convert_alu_types.c",
+    "src/compiler/nir/nir_lower_memory_model.c",
+    "src/compiler/nir/nir_lower_tex.c",
+    "src/compiler/nir/nir_metadata.c",
+    "src/compiler/nir/nir_opt_conditional_discard.c",
+    "src/compiler/nir/nir_lower_frexp.c",
+    "src/compiler/nir/nir_lower_terminate_to_demote.c",
+    "src/compiler/nir/nir_lower_point_size.c",
+    "src/compiler/nir/nir_opt_peephole_select.c",
+    "src/compiler/nir/nir_opt_non_uniform_access.c",
+    "src/compiler/nir/nir_lower_load_const_to_scalar.c",
+    "src/compiler/nir/nir_opt_move_discards_to_top.c",
+    "src/compiler/nir/nir_lower_discard_if.c",
+    "src/compiler/nir/nir_lower_two_sided_color.c",
+    "src/compiler/nir/nir_opt_dead_cf.c",
+    "src/compiler/nir/nir_lower_fp16_conv.c",
+    "src/compiler/nir/nir_lower_fragcolor.c",
+    "src/compiler/nir/nir_opt_barriers.c",
+    "src/compiler/nir/nir_lower_blend.c",
+    "src/compiler/nir/nir_opt_memcpy.c",
+    "src/compiler/nir/nir_instr_set.c",
+    "src/compiler/nir/nir_lower_alpha_test.c",
+    "src/compiler/nir/nir_use_dominance.c",
+    "src/compiler/nir/nir_lower_point_size_mov.c",
+    "src/compiler/nir/nir_gather_types.c",
+    "src/compiler/nir/nir_lower_array_deref_of_vec.c",
+    "src/compiler/nir/nir_lower_bool_to_int32.c",
+    "src/compiler/nir/nir_lower_bool_to_bitsize.c",
+    "src/compiler/nir/nir_remove_tex_shadow.c",
+    "src/compiler/nir/nir_lower_io_to_vector.c",
+    "src/compiler/nir/nir_opt_large_constants.c",
+    "src/compiler/nir/nir_split_vars.c",
+    "src/compiler/nir/nir_opt_sink.c",
+    "src/compiler/nir/nir_remove_dead_variables.c",
+    "src/compiler/nir/nir_split_var_copies.c",
+    "src/compiler/nir/nir_lower_image_atomics_to_global.c",
+    "src/compiler/nir/nir_gather_xfb_info.c",
+    "src/compiler/nir/nir_lower_returns.c",
+    "src/compiler/nir/nir_lower_shader_calls.c",
+    "src/compiler/nir/nir_lower_viewport_transform.c",
+    "src/compiler/nir/nir_scale_fdiv.c",
+    "src/compiler/nir/nir_lower_helper_writes.c",
+    "src/compiler/nir/nir_lower_atomics_to_ssbo.c",
+    "src/compiler/nir/nir_lower_clip.c",
+    "src/compiler/nir/nir_lower_frag_coord_to_pixel_coord.c",
+    "src/compiler/nir/nir_lower_flrp.c",
+    "src/compiler/nir/nir_lower_global_vars_to_local.c",
+    "src/compiler/nir/nir_split_64bit_vec3_and_vec4.c",
+    "src/compiler/nir/nir_lower_bool_to_float.c",
+    "src/compiler/nir/nir_lower_vec_to_regs.c",
+    "src/compiler/nir/nir_lower_input_attachments.c",
+    "src/compiler/nir/nir_lower_clip_halfz.c",
+    "src/compiler/nir/nir.c",
+    "src/compiler/nir/nir_format_convert.c",
+    "src/compiler/nir/nir_lower_locals_to_regs.c",
+    "src/compiler/nir/nir_clone.c",
+    "src/compiler/nir/nir_lower_continue_constructs.c",
+    "src/compiler/nir/nir_lower_robust_access.c",
+    "src/compiler/nir/nir_dominance.c",
+    "src/compiler/nir/nir_lower_readonly_images_to_tex.c",
+    "src/compiler/nir/nir_lower_io_to_temporaries.c",
+    "src/compiler/nir/nir_lower_wpos_ytransform.c",
+    "src/compiler/nir/nir_opt_vectorize.c",
+    "src/compiler/nir/nir_divergence_analysis.c",
+    "src/compiler/nir/nir_lower_poly_line_smooth.c",
+  ],
+  generated_headers: [
+    "nir_opcodes.h",
+    "nir_intrinsics_indices.h",
+    "builtin_types.h",
+    "nir_builder_opcodes.h",
+    "nir_intrinsics.h",
+    "ir_expression_operation.h",
+  ],
+  generated_sources: [
+    "nir_intrinsic.c",
+    "nir_constant_expressions.c",
+    "nir_opt_algebraic.c",
+    "nir_opcodes.c",
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+    "-Wno-override-init",
+    "-Wno-initializer-overrides",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/compiler/nir",
+    "include/.",
+    "src/.",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+    "src/compiler/.",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "compiler",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+python_binary_host {
+  name: "vtn_gather_types.c_vtn_gather_types_c.py",
+  main: "src/compiler/spirv/vtn_gather_types_c.py",
+  srcs: [
+    "src/compiler/spirv/vtn_gather_types_c.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vtn_gather_types.c",
+  srcs: [
+    "src/compiler/spirv/vtn_gather_types_c.py",
+    "src/compiler/spirv/spirv.core.grammar.json",
+  ],
+  out: [
+    "src/compiler/spirv/vtn_gather_types.c",
+  ],
+  tools: [
+    "vtn_gather_types.c_vtn_gather_types_c.py",
+  ],
+  export_include_dirs: [
+    "src/compiler/spirv",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/spirv/vtn_gather_types_c.py)` python3 $(location vtn_gather_types.c_vtn_gather_types_c.py) $(location src/compiler/spirv/spirv.core.grammar.json) $(location src/compiler/spirv/vtn_gather_types.c)"
+}
+python_binary_host {
+  name: "spirv_info_spirv_info_gen.py",
+  main: "src/compiler/spirv/spirv_info_gen.py",
+  srcs: [
+    "src/compiler/spirv/spirv_info_gen.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "spirv_info.h",
+  srcs: [
+    "src/compiler/spirv/spirv_info_gen.py",
+    "src/compiler/spirv/spirv.core.grammar.json",
+  ],
+  out: [
+    "src/compiler/spirv/spirv_info.h",
+    "src/compiler/spirv/spirv_info.c.dummy.h",
+  ],
+  tools: [
+    "spirv_info_spirv_info_gen.py",
+  ],
+  export_include_dirs: [
+    "src/compiler/spirv",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/spirv/spirv_info_gen.py)` python3 $(location spirv_info_spirv_info_gen.py) --json $(location src/compiler/spirv/spirv.core.grammar.json) --out-h $(location src/compiler/spirv/spirv_info.h) --out-c $(location src/compiler/spirv/spirv_info.c.dummy.h); echo '//nothing to see here' > $(location src/compiler/spirv/spirv_info.c.dummy.h)"
+}
+genrule {
+  name: "spirv_info.c",
+  srcs: [
+    "src/compiler/spirv/spirv_info_gen.py",
+    "src/compiler/spirv/spirv.core.grammar.json",
+  ],
+  out: [
+    "src/compiler/spirv/spirv_info.h.dummy.c",
+    "src/compiler/spirv/spirv_info.c",
+  ],
+  tools: [
+    "spirv_info_spirv_info_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/spirv/spirv_info_gen.py)` python3 $(location spirv_info_spirv_info_gen.py) --json $(location src/compiler/spirv/spirv.core.grammar.json) --out-h $(genDir)/src/compiler/spirv/spirv_info.h --out-c $(location src/compiler/spirv/spirv_info.c); echo '//nothing to see here' > $(location src/compiler/spirv/spirv_info.h.dummy.c)"
+}
+python_binary_host {
+  name: "vtn_generator_ids.h_vtn_generator_ids_h.py",
+  main: "src/compiler/spirv/vtn_generator_ids_h.py",
+  srcs: [
+    "src/compiler/spirv/vtn_generator_ids_h.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vtn_generator_ids.h",
+  srcs: [
+    "src/compiler/spirv/vtn_generator_ids_h.py",
+    "src/compiler/spirv/spir-v.xml",
+  ],
+  out: [
+    "src/compiler/spirv/vtn_generator_ids.h",
+  ],
+  tools: [
+    "vtn_generator_ids.h_vtn_generator_ids_h.py",
+  ],
+  export_include_dirs: [
+    "src/compiler/spirv",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/compiler/spirv/vtn_generator_ids_h.py)` python3 $(location vtn_generator_ids.h_vtn_generator_ids_h.py) $(location src/compiler/spirv/spir-v.xml) $(location src/compiler/spirv/vtn_generator_ids.h)"
+}
+cc_library_static {
+  name: "vtn",
+  srcs: [
+    "src/compiler/spirv/vtn_alu.c",
+    "src/compiler/spirv/vtn_cfg.c",
+    "src/compiler/spirv/vtn_structured_cfg.c",
+    "src/compiler/spirv/gl_spirv.c",
+    "src/compiler/spirv/vtn_cmat.c",
+    "src/compiler/spirv/vtn_amd.c",
+    "src/compiler/spirv/vtn_variables.c",
+    "src/compiler/spirv/vtn_glsl450.c",
+    "src/compiler/spirv/spirv_to_nir.c",
+    "src/compiler/spirv/vtn_opencl.c",
+    "src/compiler/spirv/vtn_subgroup.c",
+  ],
+  generated_headers: [
+    "nir_opcodes.h",
+    "spirv_info.h",
+    "nir_intrinsics_indices.h",
+    "builtin_types.h",
+    "nir_builder_opcodes.h",
+    "nir_intrinsics.h",
+    "ir_expression_operation.h",
+    "vtn_generator_ids.h",
+  ],
+  generated_sources: [
+    "vtn_gather_types.c",
+    "spirv_info.c",
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+    "-Wno-override-init",
+    "-Wno-initializer-overrides",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/compiler/spirv",
+    "include/.",
+    "src/.",
+    "src/mapi",
+    "src/mesa",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+    "src/compiler/.",
+    "src/compiler/nir/.",
+    "src/compiler/.",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "compiler",
+    "nir",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+cc_library_static {
+  name: "isaspec",
+  srcs: [
+    "src/compiler/isaspec/isaspec.c",
+  ],
+  generated_headers: [
+    "nir_opcodes.h",
+    "nir_intrinsics_indices.h",
+    "builtin_types.h",
+    "nir_builder_opcodes.h",
+    "nir_intrinsics.h",
+    "ir_expression_operation.h",
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/compiler/isaspec",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+    "src/compiler/.",
+    "src/compiler/nir/.",
+    "src/compiler/.",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "compiler",
+    "nir",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+python_binary_host {
+  name: "vulkan_api.def_gen_vs_module_defs.py",
+  main: "bin/gen_vs_module_defs.py",
+  srcs: [
+    "bin/gen_vs_module_defs.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vulkan_api.def",
+  srcs: [
+    "src/vulkan/vulkan_api.def.in",
+    "bin/gen_vs_module_defs.py",
+  ],
+  out: [
+    "src/vulkan/vulkan_api.def",
+  ],
+  tools: [
+    "vulkan_api.def_gen_vs_module_defs.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location bin/gen_vs_module_defs.py)` python3 $(location vulkan_api.def_gen_vs_module_defs.py) --in_file $(location src/vulkan/vulkan_api.def.in) --out_file $(location src/vulkan/vulkan_api.def) --compiler_abi gcc --compiler_id clang --cpu_family aarch64"
+}
+python_binary_host {
+  name: "vk_dispatch_table_vk_dispatch_table_gen.py",
+  main: "src/vulkan/util/vk_dispatch_table_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_dispatch_table_gen.py",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_dispatch_table.h",
+  srcs: [
+    "src/vulkan/util/vk_dispatch_table_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/util/vk_dispatch_table.c.dummy.h",
+    "src/vulkan/util/vk_dispatch_table.h",
+  ],
+  tools: [
+    "vk_dispatch_table_vk_dispatch_table_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/util",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_dispatch_table_gen.py)` python3 $(location vk_dispatch_table_vk_dispatch_table_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/util/vk_dispatch_table.c.dummy.h) --out-h $(location src/vulkan/util/vk_dispatch_table.h) --beta False; echo '//nothing to see here' > $(location src/vulkan/util/vk_dispatch_table.c.dummy.h)"
+}
+genrule {
+  name: "vk_dispatch_table.c",
+  srcs: [
+    "src/vulkan/util/vk_dispatch_table_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/util/vk_dispatch_table.c",
+    "src/vulkan/util/vk_dispatch_table.h.dummy.c",
+  ],
+  tools: [
+    "vk_dispatch_table_vk_dispatch_table_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_dispatch_table_gen.py)` python3 $(location vk_dispatch_table_vk_dispatch_table_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/util/vk_dispatch_table.c) --out-h $(genDir)/src/vulkan/util/vk_dispatch_table.h --beta False; echo '//nothing to see here' > $(location src/vulkan/util/vk_dispatch_table.h.dummy.c)"
+}
+python_binary_host {
+  name: "vk_enum_to_str_gen_enum_to_str.py",
+  main: "src/vulkan/util/gen_enum_to_str.py",
+  srcs: [
+    "src/vulkan/util/gen_enum_to_str.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_enum_to_str.h",
+  srcs: [
+    "src/vulkan/util/gen_enum_to_str.py",
+    "src/vulkan/registry/vk.xml",
+  ],
+  out: [
+    "src/vulkan/util/vk_enum_to_str.c.dummy.h",
+    "src/vulkan/util/vk_enum_to_str.h",
+    "src/vulkan/util/vk_enum_defines.h",
+  ],
+  tools: [
+    "vk_enum_to_str_gen_enum_to_str.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/util",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/gen_enum_to_str.py)` python3 $(location vk_enum_to_str_gen_enum_to_str.py) --xml $(location src/vulkan/registry/vk.xml) --outdir $(genDir)/src/vulkan/util --beta False; echo '//nothing to see here' > $(location src/vulkan/util/vk_enum_to_str.c.dummy.h)"
+}
+genrule {
+  name: "vk_enum_to_str.c",
+  srcs: [
+    "src/vulkan/util/gen_enum_to_str.py",
+    "src/vulkan/registry/vk.xml",
+  ],
+  out: [
+    "src/vulkan/util/vk_enum_to_str.c",
+    "src/vulkan/util/vk_enum_to_str.h.dummy.c",
+    "src/vulkan/util/vk_enum_defines.h.dummy.c",
+  ],
+  tools: [
+    "vk_enum_to_str_gen_enum_to_str.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/gen_enum_to_str.py)` python3 $(location vk_enum_to_str_gen_enum_to_str.py) --xml $(location src/vulkan/registry/vk.xml) --outdir $(genDir)/src/vulkan/util --beta False; echo '//nothing to see here' > $(location src/vulkan/util/vk_enum_to_str.h.dummy.c); echo '//nothing to see here' > $(location src/vulkan/util/vk_enum_defines.h.dummy.c)"
+}
+python_binary_host {
+  name: "vk_struct_type_cast_vk_struct_type_cast_gen.py",
+  main: "src/vulkan/util/vk_struct_type_cast_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_struct_type_cast_gen.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_struct_type_cast",
+  srcs: [
+    "src/vulkan/util/vk_struct_type_cast_gen.py",
+    "src/vulkan/registry/vk.xml",
+  ],
+  out: [
+    "src/vulkan/util/vk_struct_type_cast.h",
+  ],
+  tools: [
+    "vk_struct_type_cast_vk_struct_type_cast_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/util",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_struct_type_cast_gen.py)` python3 $(location vk_struct_type_cast_vk_struct_type_cast_gen.py) --xml $(location src/vulkan/registry/vk.xml) --outdir $(genDir)/src/vulkan/util --beta False"
+}
+python_binary_host {
+  name: "vk_extensions_vk_extensions_gen.py",
+  main: "src/vulkan/util/vk_extensions_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_extensions_gen.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_extensions.h",
+  srcs: [
+    "src/vulkan/util/vk_extensions_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/util/vk_extensions.c.dummy.h",
+    "src/vulkan/util/vk_extensions.h",
+  ],
+  tools: [
+    "vk_extensions_vk_extensions_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/util",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_extensions_gen.py)` python3 $(location vk_extensions_vk_extensions_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/util/vk_extensions.c.dummy.h) --out-h $(location src/vulkan/util/vk_extensions.h); echo '//nothing to see here' > $(location src/vulkan/util/vk_extensions.c.dummy.h)"
+}
+genrule {
+  name: "vk_extensions.c",
+  srcs: [
+    "src/vulkan/util/vk_extensions_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/util/vk_extensions.c",
+    "src/vulkan/util/vk_extensions.h.dummy.c",
+  ],
+  tools: [
+    "vk_extensions_vk_extensions_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_extensions_gen.py)` python3 $(location vk_extensions_vk_extensions_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/util/vk_extensions.c) --out-h $(genDir)/src/vulkan/util/vk_extensions.h; echo '//nothing to see here' > $(location src/vulkan/util/vk_extensions.h.dummy.c)"
+}
+cc_library_static {
+  name: "vulkan_util",
+  srcs: [
+    "src/vulkan/util/vk_util.c",
+    "src/vulkan/util/vk_alloc.c",
+    "src/vulkan/util/vk_format.c",
+  ],
+  generated_headers: [
+    "nir_opcodes.h",
+    "vk_dispatch_table.h",
+    "nir_intrinsics_indices.h",
+    "vk_extensions.h",
+    "builtin_types.h",
+    "nir_builder_opcodes.h",
+    "nir_intrinsics.h",
+    "vk_enum_to_str.h",
+    "vk_struct_type_cast",
+    "ir_expression_operation.h",
+  ],
+  generated_sources: [
+    "vk_dispatch_table.c",
+    "vk_enum_to_str.c",
+    "vk_extensions.c",
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/vulkan/util",
+    "include/.",
+    "src/.",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+    "src/compiler/.",
+    "src/compiler/nir/.",
+    "src/compiler/.",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "compiler",
+    "nir",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+python_binary_host {
+  name: "vk_common_entrypoints_vk_entrypoints_gen.py",
+  main: "src/vulkan/util/vk_entrypoints_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_common_entrypoints.h",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_common_entrypoints.h",
+    "src/vulkan/runtime/vk_common_entrypoints.c.dummy.h",
+  ],
+  tools: [
+    "vk_common_entrypoints_vk_entrypoints_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/runtime",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_entrypoints_gen.py)` python3 $(location vk_common_entrypoints_vk_entrypoints_gen.py) --xml $(location src/vulkan/registry/vk.xml) --proto --weak --out-h $(location src/vulkan/runtime/vk_common_entrypoints.h) --out-c $(location src/vulkan/runtime/vk_common_entrypoints.c.dummy.h) --prefix vk_common --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_common_entrypoints.c.dummy.h)"
+}
+genrule {
+  name: "vk_common_entrypoints.c",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_common_entrypoints.h.dummy.c",
+    "src/vulkan/runtime/vk_common_entrypoints.c",
+  ],
+  tools: [
+    "vk_common_entrypoints_vk_entrypoints_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_entrypoints_gen.py)` python3 $(location vk_common_entrypoints_vk_entrypoints_gen.py) --xml $(location src/vulkan/registry/vk.xml) --proto --weak --out-h $(genDir)/src/vulkan/runtime/vk_common_entrypoints.h --out-c $(location src/vulkan/runtime/vk_common_entrypoints.c) --prefix vk_common --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_common_entrypoints.h.dummy.c)"
+}
+python_binary_host {
+  name: "vk_cmd_queue_vk_cmd_queue_gen.py",
+  main: "src/vulkan/util/vk_cmd_queue_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_cmd_queue_gen.py",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_cmd_queue.h",
+  srcs: [
+    "src/vulkan/util/vk_cmd_queue_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_cmd_queue.c.dummy.h",
+    "src/vulkan/runtime/vk_cmd_queue.h",
+  ],
+  tools: [
+    "vk_cmd_queue_vk_cmd_queue_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/runtime",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_cmd_queue_gen.py)` python3 $(location vk_cmd_queue_vk_cmd_queue_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_cmd_queue.c.dummy.h) --out-h $(location src/vulkan/runtime/vk_cmd_queue.h) --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_cmd_queue.c.dummy.h)"
+}
+genrule {
+  name: "vk_cmd_queue.c",
+  srcs: [
+    "src/vulkan/util/vk_cmd_queue_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_cmd_queue.c",
+    "src/vulkan/runtime/vk_cmd_queue.h.dummy.c",
+  ],
+  tools: [
+    "vk_cmd_queue_vk_cmd_queue_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_cmd_queue_gen.py)` python3 $(location vk_cmd_queue_vk_cmd_queue_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_cmd_queue.c) --out-h $(genDir)/src/vulkan/runtime/vk_cmd_queue.h --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_cmd_queue.h.dummy.c)"
+}
+python_binary_host {
+  name: "vk_cmd_enqueue_entrypoints_vk_entrypoints_gen.py",
+  main: "src/vulkan/util/vk_entrypoints_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_cmd_enqueue_entrypoints.h",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_cmd_enqueue_entrypoints.h",
+    "src/vulkan/runtime/vk_cmd_enqueue_entrypoints.c.dummy.h",
+  ],
+  tools: [
+    "vk_cmd_enqueue_entrypoints_vk_entrypoints_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/runtime",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_entrypoints_gen.py)` python3 $(location vk_cmd_enqueue_entrypoints_vk_entrypoints_gen.py) --xml $(location src/vulkan/registry/vk.xml) --proto --weak --out-h $(location src/vulkan/runtime/vk_cmd_enqueue_entrypoints.h) --out-c $(location src/vulkan/runtime/vk_cmd_enqueue_entrypoints.c.dummy.h) --prefix vk_cmd_enqueue --prefix vk_cmd_enqueue_unless_primary --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_cmd_enqueue_entrypoints.c.dummy.h)"
+}
+genrule {
+  name: "vk_cmd_enqueue_entrypoints.c",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_cmd_enqueue_entrypoints.h.dummy.c",
+    "src/vulkan/runtime/vk_cmd_enqueue_entrypoints.c",
+  ],
+  tools: [
+    "vk_cmd_enqueue_entrypoints_vk_entrypoints_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_entrypoints_gen.py)` python3 $(location vk_cmd_enqueue_entrypoints_vk_entrypoints_gen.py) --xml $(location src/vulkan/registry/vk.xml) --proto --weak --out-h $(genDir)/src/vulkan/runtime/vk_cmd_enqueue_entrypoints.h --out-c $(location src/vulkan/runtime/vk_cmd_enqueue_entrypoints.c) --prefix vk_cmd_enqueue --prefix vk_cmd_enqueue_unless_primary --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_cmd_enqueue_entrypoints.h.dummy.c)"
+}
+python_binary_host {
+  name: "vk_dispatch_trampolines_vk_dispatch_trampolines_gen.py",
+  main: "src/vulkan/util/vk_dispatch_trampolines_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_dispatch_trampolines_gen.py",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_dispatch_trampolines.h",
+  srcs: [
+    "src/vulkan/util/vk_dispatch_trampolines_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_dispatch_trampolines.c.dummy.h",
+    "src/vulkan/runtime/vk_dispatch_trampolines.h",
+  ],
+  tools: [
+    "vk_dispatch_trampolines_vk_dispatch_trampolines_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/runtime",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_dispatch_trampolines_gen.py)` python3 $(location vk_dispatch_trampolines_vk_dispatch_trampolines_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_dispatch_trampolines.c.dummy.h) --out-h $(location src/vulkan/runtime/vk_dispatch_trampolines.h) --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_dispatch_trampolines.c.dummy.h)"
+}
+genrule {
+  name: "vk_dispatch_trampolines.c",
+  srcs: [
+    "src/vulkan/util/vk_dispatch_trampolines_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_dispatch_trampolines.c",
+    "src/vulkan/runtime/vk_dispatch_trampolines.h.dummy.c",
+  ],
+  tools: [
+    "vk_dispatch_trampolines_vk_dispatch_trampolines_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_dispatch_trampolines_gen.py)` python3 $(location vk_dispatch_trampolines_vk_dispatch_trampolines_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_dispatch_trampolines.c) --out-h $(genDir)/src/vulkan/runtime/vk_dispatch_trampolines.h --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_dispatch_trampolines.h.dummy.c)"
+}
+python_binary_host {
+  name: "vk_physical_device_features_vk_physical_device_features_gen.py",
+  main: "src/vulkan/util/vk_physical_device_features_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_physical_device_features_gen.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_physical_device_features.h",
+  srcs: [
+    "src/vulkan/util/vk_physical_device_features_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_physical_device_features.c.dummy.h",
+    "src/vulkan/runtime/vk_physical_device_features.h",
+  ],
+  tools: [
+    "vk_physical_device_features_vk_physical_device_features_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/runtime",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_physical_device_features_gen.py)` python3 $(location vk_physical_device_features_vk_physical_device_features_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_physical_device_features.c.dummy.h) --out-h $(location src/vulkan/runtime/vk_physical_device_features.h) --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_physical_device_features.c.dummy.h)"
+}
+genrule {
+  name: "vk_physical_device_features.c",
+  srcs: [
+    "src/vulkan/util/vk_physical_device_features_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_physical_device_features.c",
+    "src/vulkan/runtime/vk_physical_device_features.h.dummy.c",
+  ],
+  tools: [
+    "vk_physical_device_features_vk_physical_device_features_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_physical_device_features_gen.py)` python3 $(location vk_physical_device_features_vk_physical_device_features_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_physical_device_features.c) --out-h $(genDir)/src/vulkan/runtime/vk_physical_device_features.h --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_physical_device_features.h.dummy.c)"
+}
+python_binary_host {
+  name: "vk_physical_device_properties_vk_physical_device_properties_gen.py",
+  main: "src/vulkan/util/vk_physical_device_properties_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_physical_device_properties_gen.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_physical_device_properties.h",
+  srcs: [
+    "src/vulkan/util/vk_physical_device_properties_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_physical_device_properties.c.dummy.h",
+    "src/vulkan/runtime/vk_physical_device_properties.h",
+  ],
+  tools: [
+    "vk_physical_device_properties_vk_physical_device_properties_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/runtime",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_physical_device_properties_gen.py)` python3 $(location vk_physical_device_properties_vk_physical_device_properties_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_physical_device_properties.c.dummy.h) --out-h $(location src/vulkan/runtime/vk_physical_device_properties.h) --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_physical_device_properties.c.dummy.h)"
+}
+genrule {
+  name: "vk_physical_device_properties.c",
+  srcs: [
+    "src/vulkan/util/vk_physical_device_properties_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_physical_device_properties.c",
+    "src/vulkan/runtime/vk_physical_device_properties.h.dummy.c",
+  ],
+  tools: [
+    "vk_physical_device_properties_vk_physical_device_properties_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_physical_device_properties_gen.py)` python3 $(location vk_physical_device_properties_vk_physical_device_properties_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_physical_device_properties.c) --out-h $(genDir)/src/vulkan/runtime/vk_physical_device_properties.h --beta False; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_physical_device_properties.h.dummy.c)"
+}
+python_binary_host {
+  name: "vk_physical_device_spirv_caps_vk_physical_device_spirv_caps_gen.py",
+  main: "src/vulkan/util/vk_physical_device_spirv_caps_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_physical_device_spirv_caps_gen.py",
+    "src/vulkan/util/vk_extensions.py",
+    "src/vulkan/util/vk_physical_device_features_gen.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_physical_device_spirv_caps",
+  srcs: [
+    "src/vulkan/util/vk_physical_device_spirv_caps_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_extensions.py",
+    "src/vulkan/util/vk_physical_device_features_gen.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_physical_device_spirv_caps.c",
+  ],
+  tools: [
+    "vk_physical_device_spirv_caps_vk_physical_device_spirv_caps_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/runtime",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_physical_device_spirv_caps_gen.py)` python3 $(location vk_physical_device_spirv_caps_vk_physical_device_spirv_caps_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_physical_device_spirv_caps.c) --beta False"
+}
+python_binary_host {
+  name: "vk_synchronization_helpers_vk_synchronization_helpers_gen.py",
+  main: "src/vulkan/util/vk_synchronization_helpers_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_synchronization_helpers_gen.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_synchronization_helpers",
+  srcs: [
+    "src/vulkan/util/vk_synchronization_helpers_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_synchronization_helpers.c",
+  ],
+  tools: [
+    "vk_synchronization_helpers_vk_synchronization_helpers_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/runtime",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_synchronization_helpers_gen.py)` python3 $(location vk_synchronization_helpers_vk_synchronization_helpers_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_synchronization_helpers.c) --beta False"
+}
+python_binary_host {
+  name: "vk_format_info_vk_format_info_gen.py",
+  main: "src/vulkan/runtime/vk_format_info_gen.py",
+  srcs: [
+    "src/vulkan/runtime/vk_format_info_gen.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vk_format_info.h",
+  srcs: [
+    "src/vulkan/runtime/vk_format_info_gen.py",
+    "src/vulkan/registry/vk.xml",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_format_info.c.dummy.h",
+    "src/vulkan/runtime/vk_format_info.h",
+  ],
+  tools: [
+    "vk_format_info_vk_format_info_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/runtime",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/runtime/vk_format_info_gen.py)` python3 $(location vk_format_info_vk_format_info_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_format_info.c.dummy.h) --out-h $(location src/vulkan/runtime/vk_format_info.h); echo '//nothing to see here' > $(location src/vulkan/runtime/vk_format_info.c.dummy.h)"
+}
+genrule {
+  name: "vk_format_info.c",
+  srcs: [
+    "src/vulkan/runtime/vk_format_info_gen.py",
+    "src/vulkan/registry/vk.xml",
+  ],
+  out: [
+    "src/vulkan/runtime/vk_format_info.c",
+    "src/vulkan/runtime/vk_format_info.h.dummy.c",
+  ],
+  tools: [
+    "vk_format_info_vk_format_info_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/runtime/vk_format_info_gen.py)` python3 $(location vk_format_info_vk_format_info_gen.py) --xml $(location src/vulkan/registry/vk.xml) --out-c $(location src/vulkan/runtime/vk_format_info.c) --out-h $(genDir)/src/vulkan/runtime/vk_format_info.h; echo '//nothing to see here' > $(location src/vulkan/runtime/vk_format_info.h.dummy.c)"
+}
+cc_library_static {
+  name: "vulkan_lite_runtime",
+  srcs: [
+    "src/vulkan/runtime/rmv/vk_rmv_exporter.c",
+    "src/vulkan/runtime/vk_blend.c",
+    "src/vulkan/runtime/vk_fence.c",
+    "src/vulkan/runtime/vk_cmd_enqueue.c",
+    "src/vulkan/runtime/vk_physical_device.c",
+    "src/vulkan/runtime/vk_sync.c",
+    "src/vulkan/runtime/vk_acceleration_structure.c",
+    "src/vulkan/runtime/vk_debug_utils.c",
+    "src/vulkan/runtime/vk_query_pool.c",
+    "src/vulkan/runtime/vk_deferred_operation.c",
+    "src/vulkan/runtime/vk_cmd_copy.c",
+    "src/vulkan/runtime/vk_command_buffer.c",
+    "src/vulkan/runtime/vk_image.c",
+    "src/vulkan/runtime/vk_framebuffer.c",
+    "src/vulkan/runtime/vk_semaphore.c",
+    "src/vulkan/runtime/vk_video.c",
+    "src/vulkan/runtime/vk_descriptors.c",
+    "src/vulkan/runtime/vk_sync_binary.c",
+    "src/vulkan/runtime/vk_sync_timeline.c",
+    "src/vulkan/runtime/vk_descriptor_update_template.c",
+    "src/vulkan/runtime/vk_graphics_state.c",
+    "src/vulkan/runtime/vk_sync_dummy.c",
+    "src/vulkan/runtime/vk_pipeline_layout.c",
+    "src/vulkan/runtime/vk_standard_sample_locations.c",
+    "src/vulkan/runtime/vk_object.c",
+    "src/vulkan/runtime/vk_buffer_view.c",
+    "src/vulkan/runtime/vk_synchronization.c",
+    "src/vulkan/runtime/vk_descriptor_set_layout.c",
+    "src/vulkan/runtime/vk_render_pass.c",
+    "src/vulkan/runtime/vk_android.c",
+    "src/vulkan/runtime/vk_sampler.c",
+    "src/vulkan/runtime/vk_ycbcr_conversion.c",
+    "src/vulkan/runtime/vk_buffer.c",
+    "src/vulkan/runtime/vk_command_pool.c",
+    "src/vulkan/runtime/rmv/vk_rmv_common.c",
+    "src/vulkan/runtime/vk_debug_report.c",
+    "src/vulkan/runtime/vk_device_memory.c",
+    "src/vulkan/runtime/vk_device.c",
+    "src/vulkan/runtime/vk_log.c",
+    "src/vulkan/runtime/vk_queue.c",
+  ],
+  generated_headers: [
+    "nir_opcodes.h",
+    "vk_dispatch_table.h",
+    "vk_format_info.h",
+    "nir_intrinsics_indices.h",
+    "vk_cmd_queue.h",
+    "vk_cmd_enqueue_entrypoints.h",
+    "vk_struct_type_cast",
+    "vk_extensions.h",
+    "vk_dispatch_trampolines.h",
+    "builtin_types.h",
+    "nir_builder_opcodes.h",
+    "nir_intrinsics.h",
+    "vk_enum_to_str.h",
+    "vk_physical_device_features.h",
+    "vk_physical_device_properties.h",
+    "ir_expression_operation.h",
+    "vk_common_entrypoints.h",
+  ],
+  generated_sources: [
+    "vk_common_entrypoints.c",
+    "vk_dispatch_trampolines.c",
+    "vk_physical_device_features.c",
+    "vk_cmd_queue.c",
+    "vk_synchronization_helpers",
+    "vk_physical_device_spirv_caps",
+    "vk_format_info.c",
+    "vk_cmd_enqueue_entrypoints.c",
+    "vk_physical_device_properties.c",
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/vulkan/runtime",
+    "include/.",
+    "src/.",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+    "src/compiler/.",
+    "src/compiler/nir/.",
+    "src/compiler/.",
+    "src/vulkan/util/.",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "_mesa_u_gralloc",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "compiler",
+    "nir",
+    "vulkan_util",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+cc_library_static {
+  name: "vulkan_lite_instance",
+  srcs: [
+    "src/vulkan/runtime/vk_instance.c",
+  ],
+  generated_headers: [
+    "nir_opcodes.h",
+    "vk_dispatch_table.h",
+    "nir_intrinsics_indices.h",
+    "vk_format_info.h",
+    "vk_cmd_enqueue_entrypoints.h",
+    "vk_cmd_queue.h",
+    "vk_extensions.h",
+    "vk_dispatch_trampolines.h",
+    "vk_physical_device_features.h",
+    "builtin_types.h",
+    "nir_builder_opcodes.h",
+    "nir_intrinsics.h",
+    "vk_enum_to_str.h",
+    "vk_struct_type_cast",
+    "vk_physical_device_properties.h",
+    "ir_expression_operation.h",
+    "vk_common_entrypoints.h",
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-DVK_LITE_RUNTIME_INSTANCE=1",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/vulkan/runtime",
+    "include/.",
+    "src/.",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+    "src/compiler/.",
+    "src/compiler/nir/.",
+    "src/compiler/.",
+    "src/vulkan/util/.",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "_mesa_u_gralloc",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "compiler",
+    "nir",
+    "vulkan_util",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+cc_library_static {
+  name: "vulkan_runtime",
+  srcs: [
+    "src/vulkan/runtime/vk_meta.c",
+    "src/vulkan/runtime/vk_shader.c",
+    "src/vulkan/runtime/vk_pipeline_cache.c",
+    "src/vulkan/runtime/vk_texcompress_etc2.c",
+    "src/vulkan/runtime/vk_meta_blit_resolve.c",
+    "src/vulkan/runtime/vk_meta_clear.c",
+    "src/vulkan/runtime/vk_meta_draw_rects.c",
+    "src/vulkan/runtime/vk_pipeline.c",
+    "src/vulkan/runtime/vk_shader_module.c",
+    "src/vulkan/runtime/vk_nir.c",
+    "src/vulkan/runtime/vk_nir_convert_ycbcr.c",
+  ],
+  generated_headers: [
+    "nir_opcodes.h",
+    "vk_dispatch_table.h",
+    "nir_intrinsics_indices.h",
+    "vk_format_info.h",
+    "vk_cmd_enqueue_entrypoints.h",
+    "vk_cmd_queue.h",
+    "vk_extensions.h",
+    "vk_dispatch_trampolines.h",
+    "vk_physical_device_features.h",
+    "builtin_types.h",
+    "nir_builder_opcodes.h",
+    "nir_intrinsics.h",
+    "vk_enum_to_str.h",
+    "vk_struct_type_cast",
+    "vk_physical_device_properties.h",
+    "ir_expression_operation.h",
+    "vk_common_entrypoints.h",
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/vulkan/runtime",
+    "include/.",
+    "src/.",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+    "src/compiler/.",
+    "src/compiler/nir/.",
+    "src/compiler/.",
+    "src/vulkan/util/.",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "_mesa_u_gralloc",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "compiler",
+    "nir",
+    "vtn",
+    "vulkan_util",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+cc_library_static {
+  name: "vulkan_instance",
+  srcs: [
+    "src/vulkan/runtime/vk_instance.c",
+  ],
+  generated_headers: [
+    "nir_opcodes.h",
+    "vk_dispatch_table.h",
+    "nir_intrinsics_indices.h",
+    "vk_format_info.h",
+    "vk_cmd_enqueue_entrypoints.h",
+    "vk_cmd_queue.h",
+    "vk_extensions.h",
+    "vk_dispatch_trampolines.h",
+    "vk_physical_device_features.h",
+    "builtin_types.h",
+    "nir_builder_opcodes.h",
+    "nir_intrinsics.h",
+    "vk_enum_to_str.h",
+    "vk_struct_type_cast",
+    "vk_physical_device_properties.h",
+    "ir_expression_operation.h",
+    "vk_common_entrypoints.h",
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-DVK_LITE_RUNTIME_INSTANCE=0",
+    "-Werror=pointer-arith",
+    "-Werror=vla",
+    "-Werror=gnu-empty-initializer",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/vulkan/runtime",
+    "include/.",
+    "src/.",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+    "src/compiler/.",
+    "src/compiler/nir/.",
+    "src/compiler/.",
+    "src/vulkan/util/.",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "_mesa_u_gralloc",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "compiler",
+    "nir",
+    "vtn",
+    "vulkan_util",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+python_binary_host {
+  name: "wsi_entrypoints_vk_entrypoints_gen.py",
+  main: "src/vulkan/util/vk_entrypoints_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "wsi_entrypoints.h",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/wsi/wsi_common_entrypoints.h",
+    "src/vulkan/wsi/wsi_common_entrypoints.c.dummy.h",
+  ],
+  tools: [
+    "wsi_entrypoints_vk_entrypoints_gen.py",
+  ],
+  export_include_dirs: [
+    "src/vulkan/wsi",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_entrypoints_gen.py)` python3 $(location wsi_entrypoints_vk_entrypoints_gen.py) --xml $(location src/vulkan/registry/vk.xml) --proto --weak --out-h $(location src/vulkan/wsi/wsi_common_entrypoints.h) --out-c $(location src/vulkan/wsi/wsi_common_entrypoints.c.dummy.h) --prefix wsi --beta False; echo '//nothing to see here' > $(location src/vulkan/wsi/wsi_common_entrypoints.c.dummy.h)"
+}
+genrule {
+  name: "wsi_entrypoints.c",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+    "src/vulkan/registry/vk.xml",
+    "src/vulkan/util/vk_entrypoints.py",
+    "src/vulkan/util/vk_extensions.py",
+  ],
+  out: [
+    "src/vulkan/wsi/wsi_common_entrypoints.h.dummy.c",
+    "src/vulkan/wsi/wsi_common_entrypoints.c",
+  ],
+  tools: [
+    "wsi_entrypoints_vk_entrypoints_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_entrypoints_gen.py)` python3 $(location wsi_entrypoints_vk_entrypoints_gen.py) --xml $(location src/vulkan/registry/vk.xml) --proto --weak --out-h $(genDir)/src/vulkan/wsi/wsi_common_entrypoints.h --out-c $(location src/vulkan/wsi/wsi_common_entrypoints.c) --prefix wsi --beta False; echo '//nothing to see here' > $(location src/vulkan/wsi/wsi_common_entrypoints.h.dummy.c)"
+}
+cc_library_static {
+  name: "vulkan_wsi",
+  srcs: [
+    "src/vulkan/wsi/wsi_common_headless.c",
+    "src/vulkan/wsi/wsi_common.c",
+  ],
+  generated_headers: [
+    "vk_cmd_enqueue_entrypoints.h",
+    "vk_cmd_queue.h",
+    "vk_extensions.h",
+    "nir_builder_opcodes.h",
+    "vk_physical_device_features.h",
+    "vk_common_entrypoints.h",
+    "wsi_entrypoints.h",
+    "nir_opcodes.h",
+    "spirv_info.h",
+    "vk_format_info.h",
+    "builtin_types.h",
+    "nir_intrinsics.h",
+    "vk_physical_device_properties.h",
+    "vk_dispatch_table.h",
+    "nir_intrinsics_indices.h",
+    "vk_dispatch_trampolines.h",
+    "vk_enum_to_str.h",
+    "vk_struct_type_cast",
+    "ir_expression_operation.h",
+  ],
+  generated_sources: [
+    "wsi_entrypoints.c",
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/vulkan/wsi",
+    "include/.",
+    "src/.",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+    "src/compiler/.",
+    "src/compiler/nir/.",
+    "src/compiler/.",
+    "src/vulkan/util/.",
+    "src/vulkan/runtime/.",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "_mesa_u_gralloc",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "xmlconfig",
+    "compiler",
+    "nir",
+    "vtn",
+    "vulkan_util",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+python_binary_host {
+  name: "vn_entrypoints_vk_entrypoints_gen.py",
+  main: "src/vulkan/util/vk_entrypoints_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "vn_entrypoints.h",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+    "src/vulkan/registry/vk.xml",
+  ],
+  out: [
+    "src/virtio/vulkan/vn_entrypoints.h",
+    "src/virtio/vulkan/vn_entrypoints.c.dummy.h",
+  ],
+  tools: [
+    "vn_entrypoints_vk_entrypoints_gen.py",
+  ],
+  export_include_dirs: [
+    "src/virtio/vulkan",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_entrypoints_gen.py)` python3 $(location vn_entrypoints_vk_entrypoints_gen.py) --xml $(location src/vulkan/registry/vk.xml) --proto --weak --out-h $(location src/virtio/vulkan/vn_entrypoints.h) --out-c $(location src/virtio/vulkan/vn_entrypoints.c.dummy.h) --prefix vn --beta False; echo '//nothing to see here' > $(location src/virtio/vulkan/vn_entrypoints.c.dummy.h)"
+}
+genrule {
+  name: "vn_entrypoints.c",
+  srcs: [
+    "src/vulkan/util/vk_entrypoints_gen.py",
+    "src/vulkan/registry/vk.xml",
+  ],
+  out: [
+    "src/virtio/vulkan/vn_entrypoints.h.dummy.c",
+    "src/virtio/vulkan/vn_entrypoints.c",
+  ],
+  tools: [
+    "vn_entrypoints_vk_entrypoints_gen.py",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_entrypoints_gen.py)` python3 $(location vn_entrypoints_vk_entrypoints_gen.py) --xml $(location src/vulkan/registry/vk.xml) --proto --weak --out-h $(genDir)/src/virtio/vulkan/vn_entrypoints.h --out-c $(location src/virtio/vulkan/vn_entrypoints.c) --prefix vn --beta False; echo '//nothing to see here' > $(location src/virtio/vulkan/vn_entrypoints.h.dummy.c)"
+}
+python_binary_host {
+  name: "virtio_icd_vk_icd_gen.py",
+  main: "src/vulkan/util/vk_icd_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_icd_gen.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "virtio_icd",
+  srcs: [
+    "src/vulkan/util/vk_icd_gen.py",
+    "src/vulkan/registry/vk.xml",
+  ],
+  out: [
+    "src/virtio/vulkan/virtio_icd.aarch64.json",
+  ],
+  tools: [
+    "virtio_icd_vk_icd_gen.py",
+  ],
+  export_include_dirs: [
+    "src/virtio/vulkan",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_icd_gen.py)` python3 $(location virtio_icd_vk_icd_gen.py) --api-version 1.3 --xml $(location src/vulkan/registry/vk.xml) --lib-path prefix/libdir/libvulkan_virtio.so --out $(location src/virtio/vulkan/virtio_icd.aarch64.json)"
+}
+python_binary_host {
+  name: "virtio_devenv_icd_vk_icd_gen.py",
+  main: "src/vulkan/util/vk_icd_gen.py",
+  srcs: [
+    "src/vulkan/util/vk_icd_gen.py",
+  ],
+  libs: ["mako"],
+  version: {
+    py3: {
+      embedded_launcher: false,
+    },
+  },
+}
+genrule {
+  name: "virtio_devenv_icd",
+  srcs: [
+    "src/vulkan/util/vk_icd_gen.py",
+    "src/vulkan/registry/vk.xml",
+  ],
+  out: [
+    "src/virtio/vulkan/virtio_devenv_icd.aarch64.json",
+  ],
+  tools: [
+    "virtio_devenv_icd_vk_icd_gen.py",
+  ],
+  export_include_dirs: [
+    "src/virtio/vulkan",
+    "src",
+  ],
+  cmd: " PYTHONPATH=`dirname $(location src/vulkan/util/vk_icd_gen.py)` python3 $(location virtio_devenv_icd_vk_icd_gen.py) --api-version 1.3 --xml $(location src/vulkan/registry/vk.xml) --lib-path $(genDir)/src/virtio/vulkan --out $(location src/virtio/vulkan/virtio_devenv_icd.aarch64.json)"
+}
+cc_library_shared {
+  name: "vulkan_virtio",
+  srcs: [
+    "src/virtio/vulkan/vn_command_buffer.c",
+    "src/virtio/vulkan/vn_ring.c",
+    "src/virtio/vulkan/vn_instance.c",
+    "src/virtio/vulkan/vn_device.c",
+    "src/virtio/vulkan/vn_renderer_virtgpu.c",
+    "src/virtio/vulkan/vn_feedback.c",
+    "src/virtio/vulkan/vn_query_pool.c",
+    "src/virtio/vulkan/vn_physical_device.c",
+    "src/virtio/vulkan/vn_pipeline.c",
+    "src/virtio/vulkan/vn_buffer.c",
+    "src/virtio/vulkan/vn_descriptor_set.c",
+    "src/virtio/vulkan/vn_renderer_internal.c",
+    "src/virtio/vulkan/vn_cs.c",
+    "src/virtio/vulkan/vn_image.c",
+    "src/virtio/vulkan/vn_renderer_vtest.c",
+    "src/virtio/vulkan/vn_android.c",
+    "src/virtio/vulkan/vn_queue.c",
+    "src/virtio/vulkan/vn_device_memory.c",
+    "src/virtio/vulkan/vn_icd.c",
+    "src/virtio/vulkan/vn_common.c",
+    "src/virtio/vulkan/vn_render_pass.c",
+    "src/virtio/vulkan/vn_renderer_util.c",
+  ],
+  generated_headers: [
+    "vk_cmd_enqueue_entrypoints.h",
+    "vk_cmd_queue.h",
+    "vk_extensions.h",
+    "git_sha1.h",
+    "nir_builder_opcodes.h",
+    "vk_physical_device_features.h",
+    "vn_entrypoints.h",
+    "vk_common_entrypoints.h",
+    "wsi_entrypoints.h",
+    "nir_opcodes.h",
+    "spirv_info.h",
+    "vk_format_info.h",
+    "builtin_types.h",
+    "nir_intrinsics.h",
+    "vk_physical_device_properties.h",
+    "vk_dispatch_table.h",
+    "nir_intrinsics_indices.h",
+    "vk_dispatch_trampolines.h",
+    "vk_enum_to_str.h",
+    "vk_struct_type_cast",
+    "ir_expression_operation.h",
+  ],
+  generated_sources: [
+    "vn_entrypoints.c",
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Wno-override-init",
+    "-Wno-initializer-overrides",
+    "-Werror=switch",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/virtio/vulkan",
+    "include/.",
+    "src/.",
+    "src/virtio/.",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+    "src/compiler/.",
+    "src/compiler/nir/.",
+    "src/compiler/.",
+    "src/vulkan/util/.",
+    "src/vulkan/runtime/.",
+    "src/vulkan/wsi/.",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "_mesa_u_gralloc",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "xmlconfig",
+    "compiler",
+    "nir",
+    "vtn",
+    "vulkan_util",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+  ],
+  whole_static_libs: [
+    "vulkan_lite_runtime",
+    "vulkan_lite_instance",
+    "vulkan_wsi",
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
+cc_library_static {
+  name: "libvdrm",
+  srcs: [
+    "src/virtio/vdrm/vdrm_virtgpu.c",
+    "src/virtio/vdrm/vdrm.c",
+  ],
+  generated_headers: [
+    "vk_cmd_enqueue_entrypoints.h",
+    "vk_cmd_queue.h",
+    "vk_extensions.h",
+    "nir_builder_opcodes.h",
+    "vk_physical_device_features.h",
+    "wsi_entrypoints.h",
+    "vk_common_entrypoints.h",
+    "nir_opcodes.h",
+    "spirv_info.h",
+    "vk_format_info.h",
+    "builtin_types.h",
+    "nir_intrinsics.h",
+    "vk_physical_device_properties.h",
+    "vk_dispatch_table.h",
+    "nir_intrinsics_indices.h",
+    "vk_dispatch_trampolines.h",
+    "vk_enum_to_str.h",
+    "vk_struct_type_cast",
+    "ir_expression_operation.h",
+  ],
+  generated_sources: [
+  ],
+  c_std: "c11",
+  cpp_std: "c++17",
+  conlyflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=implicit-function-declaration",
+    "-Werror=missing-prototypes",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Werror=incompatible-pointer-types",
+    "-Werror=int-conversion",
+    "-Wimplicit-fallthrough",
+    "-Wmisleading-indentation",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-fno-common",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Wno-unused-function",
+    "-Werror=format",
+    "-Wformat-security",
+    "-Werror=thread-safety",
+    "-ffunction-sections",
+    "-fdata-sections",
+    "-Wno-override-init",
+    "-Wno-initializer-overrides",
+  ],
+  cppflags: [
+    "-Wno-error",
+    "-D__STDC_CONSTANT_MACROS",
+    "-D__STDC_FORMAT_MACROS",
+    "-D__STDC_LIMIT_MACROS",
+    "-DPACKAGE_VERSION=\"unknown\"",
+    "-DPACKAGE_BUGREPORT=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues\"",
+    "-DHAVE_OPENGL=1",
+    "-DHAVE_OPENGL_ES_1=1",
+    "-DHAVE_OPENGL_ES_2=1",
+    "-DVIDEO_CODEC_VC1DEC=0",
+    "-DVIDEO_CODEC_H264DEC=0",
+    "-DVIDEO_CODEC_H264ENC=0",
+    "-DVIDEO_CODEC_H265DEC=0",
+    "-DVIDEO_CODEC_H265ENC=0",
+    "-DVIDEO_CODEC_AV1DEC=1",
+    "-DVIDEO_CODEC_AV1ENC=1",
+    "-DVIDEO_CODEC_VP9DEC=1",
+    "-DHAVE_ANDROID_PLATFORM",
+    "-DUSE_LIBGLVND=0",
+    "-DHAVE_ST_VDPAU",
+    "-DENABLE_ST_OMX_BELLAGIO=0",
+    "-DENABLE_ST_OMX_TIZONIA=0",
+    "-DGLAPI_EXPORT_PROTO_ENTRY_POINTS=0",
+    "-DANDROID_API_LEVEL=33",
+    "-DANDROID_STRICT",
+    "-DVK_USE_PLATFORM_ANDROID_KHR=1",
+    "-DMESA_DEBUG=0",
+    "-DENABLE_SHADER_CACHE",
+    "-DHAVE___BUILTIN_BSWAP32",
+    "-DHAVE___BUILTIN_BSWAP64",
+    "-DHAVE___BUILTIN_CLZ",
+    "-DHAVE___BUILTIN_CLZLL",
+    "-DHAVE___BUILTIN_CTZ",
+    "-DHAVE___BUILTIN_EXPECT",
+    "-DHAVE___BUILTIN_FFS",
+    "-DHAVE___BUILTIN_FFSLL",
+    "-DHAVE___BUILTIN_POPCOUNT",
+    "-DHAVE___BUILTIN_POPCOUNTLL",
+    "-DHAVE___BUILTIN_UNREACHABLE",
+    "-DHAVE___BUILTIN_TYPES_COMPATIBLE_P",
+    "-DHAVE_FUNC_ATTRIBUTE_CONST",
+    "-DHAVE_FUNC_ATTRIBUTE_FLATTEN",
+    "-DHAVE_FUNC_ATTRIBUTE_MALLOC",
+    "-DHAVE_FUNC_ATTRIBUTE_PURE",
+    "-DHAVE_FUNC_ATTRIBUTE_UNUSED",
+    "-DHAVE_FUNC_ATTRIBUTE_WARN_UNUSED_RESULT",
+    "-DHAVE_FUNC_ATTRIBUTE_WEAK",
+    "-DHAVE_FUNC_ATTRIBUTE_FORMAT",
+    "-DHAVE_FUNC_ATTRIBUTE_PACKED",
+    "-DHAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL",
+    "-DHAVE_FUNC_ATTRIBUTE_ALIAS",
+    "-DHAVE_FUNC_ATTRIBUTE_NORETURN",
+    "-DHAVE_FUNC_ATTRIBUTE_VISIBILITY",
+    "-DHAVE_REALLOCARRAY",
+    "-DHAVE_FMEMOPEN",
+    "-D_GNU_SOURCE",
+    "-DHAVE___BUILTIN_IA32_CLFLUSHOPT",
+    "-DUSE_GCC_ATOMIC_BUILTINS",
+    "-DUSE_AARCH64_ASM",
+    "-DMAJOR_IN_SYSMACROS",
+    "-DHAS_SCHED_H",
+    "-DHAS_SCHED_GETAFFINITY",
+    "-DHAVE_SYS_SYSCTL_H",
+    "-DHAVE_LINUX_FUTEX_H",
+    "-DHAVE_ENDIAN_H",
+    "-DHAVE_DLFCN_H",
+    "-DHAVE_SYS_SHM_H",
+    "-DHAVE_CET_H",
+    "-DHAVE_SYS_INOTIFY_H",
+    "-DHAVE_LINUX_UDMABUF_H",
+    "-DHAVE_STRTOF",
+    "-DHAVE_MKOSTEMP",
+    "-DHAVE_MEMFD_CREATE",
+    "-DHAVE_RANDOM_R",
+    "-DHAVE_FLOCK",
+    "-DHAVE_STRTOK_R",
+    "-DHAVE_GETRANDOM",
+    "-DHAVE_POSIX_FALLOCATE",
+    "-DHAVE_STRUCT_TIMESPEC",
+    "-DHAVE_THRD_CREATE",
+    "-DHAVE_ISSIGNALING",
+    "-DHAVE_POSIX_MEMALIGN",
+    "-DHAVE_DIRENT_D_TYPE",
+    "-DHAVE_STRTOD_L",
+    "-DHAVE_DLADDR",
+    "-DHAVE_DL_ITERATE_PHDR",
+    "-DHAVE_ZLIB",
+    "-DHAVE_COMPRESSION",
+    "-DHAVE_PTHREAD",
+    "-DLLVM_AVAILABLE=0",
+    "-DDRAW_LLVM_AVAILABLE=0",
+    "-DAMD_LLVM_AVAILABLE=0",
+    "-DTHREAD_SANITIZER=0",
+    "-DHAVE_DRI2",
+    "-DHAVE_DRI3",
+    "-DHAVE_LIBSENSORS=1",
+    "-fno-emulated-tls",
+    "-Werror=return-type",
+    "-Werror=empty-body",
+    "-Wmisleading-indentation",
+    "-Wno-non-virtual-dtor",
+    "-Wno-missing-field-initializers",
+    "-fno-math-errno",
+    "-fno-trapping-math",
+    "-Qunused-arguments",
+    "-Wno-unknown-pragmas",
+    "-Wno-microsoft-enum-value",
+    "-Werror=format",
+    "-Wformat-security",
+    "-ffunction-sections",
+    "-fdata-sections",
+  ],
+  local_include_dirs: [
+    "src/virtio/vdrm",
+    "include/.",
+    "src/.",
+    "src/virtio/virtio-gpu",
+    "src/c11/impl/../..",
+    "include/.",
+    "src/util/..",
+    "src/compiler/.",
+    "src/compiler/nir/.",
+    "src/compiler/.",
+    "src/vulkan/util/.",
+    "src/vulkan/runtime/.",
+    "src/vulkan/wsi/.",
+  ],
+  static_libs: [
+    "mesa_util_c11",
+    "_mesa_u_gralloc",
+    "blake3",
+    "mesa_util_sse41",
+    "mesa_util",
+    "xmlconfig",
+    "compiler",
+    "nir",
+    "vtn",
+    "vulkan_util",
+    "libsync",
+    "libgralloctypes",
+    "android.hardware.graphics.mapper@4.0",
+    "libz",
+    "mesa_util_sse41",
+    "mesa_util",
+  ],
+  whole_static_libs: [
+    "vulkan_lite_runtime",
+    "vulkan_lite_instance",
+    "vulkan_wsi",
+  ],
+  shared_libs: [
+    "libcutils",
+    "libhardware",
+    "liblog",
+    "libnativewindow",
+    "libhidlbase",
+    "libutils",
+  ],
+  header_libs: [
+    "hwvulkan_headers",
+  ],
+}
diff --git a/generate_android_build.py b/generate_android_build.py
new file mode 100644
index 00000000000..366f2872795
--- /dev/null
+++ b/generate_android_build.py
@@ -0,0 +1,8839 @@
+import sys
+###
+########################################################################################################################
+###
+### Pull in the definitions meson is expecting
+###
+from meson_common import *
+from meson_android import *
+###
+########################################################################################################################
+
+### Open the build definition file
+open_output_file()
+########################################################################################################################
+### Begin conversion from: meson_options.txt
+########################################################################################################################
+option('split-debug',type='feature',value='disabled',description='split debug information (-gsplit-dwarf compile flag) and debug information in the gdb index format (--gdb-index)',)
+option('platforms',type='array',value=['auto'],choices=['auto','x11','wayland','haiku','android','windows',],description='window systems to support. If this is set to `auto`, all '+'platforms applicable will be enabled.')
+
+option('egl-native-platform',type='combo',value='auto',choices=['auto','x11','wayland','haiku','android','windows','surfaceless','drm',],description='the window system EGL assumes for EGL_DEFAULT_DISPLAY',)
+
+option('android-stub',type='boolean',value=False,description='Build against android-stub',)
+
+option('android-strict',type='boolean',value=True,description='Enable strict Android compliance. Disabling may cause CTS '+'failures or other problems, but allows drivers to expose '+'capabilities that are normally hidden. Default: true')
+
+option('android-libbacktrace',type='feature',description='Use Android\'s libbacktrace',)
+
+option('dri3',type='feature',deprecated={'true':'enabled','false':'disabled'},description='enable support for dri3')
+
+option('dri-drivers-path',type='string',value='',description='Location to install dri drivers. Default: $libdir/dri.')
+
+option('dri-search-path',type='string',value='',description='Locations to search for dri drivers, passed as colon '+'separated list. Default: dri-drivers-path.')
+
+option('expat',type='feature',value='auto',description='Controls the use of expat. '+'Cannot be disabled if xmlconfig is enabled.')
+
+option('gallium-drivers',type='array',value=['auto'],choices=['auto','kmsro','radeonsi','r300','r600','nouveau','freedreno','swrast','v3d','vc4','etnaviv','tegra','i915','svga','virgl','panfrost','iris','lima','zink','d3d12','asahi','crocus','all',],description='List of gallium drivers to build. If this is set to auto '+'all drivers applicable to the target OS/architecture '+'will be built')
+
+option('gallium-extra-hud',type='boolean',value=False,description='Enable HUD block/NIC I/O HUD status support',)
+
+option('gallium-vdpau',type='feature',deprecated={'true':'enabled','false':'disabled'},description='enable gallium vdpau frontend.',)
+
+option('vdpau-libs-path',type='string',value='',description='path to put vdpau libraries. defaults to $libdir/vdpau.')
+
+option('gallium-omx',type='combo',value='auto',choices=['auto','disabled','bellagio','tizonia'],description='enable gallium omx frontend.',)
+
+option('omx-libs-path',type='string',value='',description='path to put omx libraries. defaults to omx-bellagio '+'pkg-config pluginsdir.')
+
+option('gallium-va',type='feature',deprecated={'true':'enabled','false':'disabled'},description='enable gallium va frontend.',)
+
+option('va-libs-path',type='string',value='',description='path to put va libraries. defaults to $libdir/dri.')
+
+option('gallium-xa',type='feature',deprecated={'true':'enabled','false':'disabled'},description='enable gallium xa frontend.',)
+
+option('gallium-nine',type='boolean',value=False,description='build gallium "nine" Direct3D 9.x frontend.',)
+
+option('gallium-d3d10umd',type='boolean',value=False,description='build gallium D3D10 WDDM UMD frontend.',)
+
+option('gallium-opencl',type='combo',choices=['icd','standalone','disabled'],value='disabled',description='build gallium "clover" OpenCL frontend.',)
+
+option('gallium-rusticl',type='boolean',value=False,description='build gallium "rusticl" OpenCL frontend.',)
+
+option('gallium-wgl-dll-name',type='string',value='libgallium_wgl',description='name of gallium wgl target DLL built for Windows. '+'defaults to libgallium_wgl.dll to match DRI',)
+
+option('gallium-d3d10-dll-name',type='string',value='libgallium_d3d10',description='name of gallium d3d10 target DLL built for Windows. '+'defaults to libgallium_d3d10.dll to match DRI',)
+
+option('opencl-spirv',type='boolean',value=False,description='build gallium "clover" OpenCL frontend with SPIR-V '+'binary support.',)
+
+option('static-libclc',type='array',value=[],choices=['spirv','spirv64','all'],description='Link libclc SPIR-V statically.',)
+
+option('d3d-drivers-path',type='string',value='',description='Location of D3D drivers. Default: $libdir/d3d',)
+
+option('vulkan-drivers',type='array',value=['auto'],choices=['auto','amd','broadcom','freedreno','intel','intel_hasvk','panfrost','swrast','virtio','imagination-experimental','microsoft-experimental','nouveau','all'],description='List of vulkan drivers to build. If this is set to auto '+'all drivers applicable to the target OS/architecture '+'will be built')# support msm and virtio.  This is a temporary situation with virtio support
+# for turnip and kgsl support for gallium planned/in-progress.
+option('freedreno-kmds',type='array',value=['msm'],choices=['msm','kgsl','virtio','wsl'],description='List of kernel-mode drivers to enable for freedreno '+'gallium and vulkan driver',)
+
+option('imagination-srv',type='boolean',value=False,description='Enable Services backend for Imagination Technologies '+'vulkan driver',)
+
+option('shader-cache',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Build with on-disk shader cache support.',)
+
+option('shader-cache-default',type='boolean',value=True,description='If set to false, the feature is only activated when '+'environment variable MESA_SHADER_CACHE_DISABLE is set '+'to false',)
+
+option('shader-cache-max-size',type='string',value='',description='Default value for MESA_SHADER_CACHE_MAX_SIZE enviroment '+'variable. If set, determines the maximum size of the '+'on-disk cache of compiled shader programs, can be overriden '+'by enviroment variable if needed. Should be set to a number '+'optionally followed by ``K``, ``M``, or ``G`` to specify '+'a size in kilobytes, megabytes, or gigabytes. By default, '+'gigabytes will be assumed. And if unset, a maximum size of '+'1GB will be used.')
+
+option('vulkan-icd-dir',type='string',value='',description='Location relative to prefix to put vulkan icds on install. '+'Default: $datadir/vulkan/icd.d')
+
+option('moltenvk-dir',type='string',value='',description='Location of the MoltenVk SDK. Default: ')
+
+option('vulkan-layers',type='array',value=[],choices=['device-select','intel-nullhw','overlay'],description='List of vulkan layers to build')
+
+option('shared-glapi',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Whether to build a shared or static glapi. Defaults to '+'disabled on Windows, enabled elsewhere')
+
+option('gles1',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Build support for OpenGL ES 1.x')
+
+option('gles2',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Build support for OpenGL ES 2.x and 3.x')
+
+option('opengl',type='boolean',value=True,description='Build support for desktop OpenGL')
+
+option('gbm',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Build support for gbm platform')
+
+option('gbm-backends-path',type='string',value='',description='Locations to search for gbm backends, passed as colon '+'separated list. Default: $libdir/gbm.')
+
+option('glx',type='combo',value='auto',choices=['auto','disabled','dri','xlib'],description='Build support for GLX platform')
+
+option('egl',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Build support for EGL platform')
+
+option('glvnd',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Enable GLVND support.')
+
+option('microsoft-clc',type='feature',value='auto',deprecated={'true':'enabled','false':'disabled'},description='Build support for the Microsoft CLC to DXIL compiler')
+
+option('spirv-to-dxil',type='boolean',value=False,description='Build support for the SPIR-V to DXIL library')
+
+option('glvnd-vendor-name',type='string',value='mesa',description='Vendor name string to use for glvnd libraries')
+
+option('glx-read-only-text',type='boolean',value=False,description='Disable writable .text section on x86 (decreases performance)')
+
+option('llvm',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Build with LLVM support.')
+
+option('shared-llvm',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Whether to link LLVM shared or statically.')
+
+option('draw-use-llvm',type='boolean',value=True,description='Whether to use LLVM for the Gallium draw module, if LLVM '+'is included.')
+
+option('amd-use-llvm',type='boolean',value=True,description='Whether to use LLVM for the AMD drivers, if LLVM '+'is included.')
+
+option('valgrind',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Build with valgrind support')
+
+option('libunwind',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Use libunwind for stack-traces')
+
+option('lmsensors',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Enable HUD lmsensors support.')
+
+option('build-tests',type='boolean',value=False,description='Build unit tests. Currently this will build *all* unit '+'tests except the ACO tests, which may build more than expected.')
+
+option('enable-glcpp-tests',type='boolean',value=True,description='Build glcpp unit tests. These are flaky on CI.')
+
+option('build-aco-tests',type='boolean',value=False,description='Build ACO tests. These require RADV and glslang but not '+'an AMD GPU.')
+
+option('install-intel-gpu-tests',type='boolean',value=False,description='Build and install Intel unit tests which require the GPU. '+'This option is for developers and the Intel CI system only.')
+
+option('html-docs',type='feature',value='disabled',description='Build HTML documentation.')
+
+option('html-docs-path',type='string',value='',description='Location to install HTML documentation. Default: $datadir/doc/mesa.')
+
+option('selinux',type='boolean',value=False,description='Build an SELinux-aware Mesa.  This currently disables '+'execmem support at runtime unless SELinux is configured '+'with allow_execmem.')
+
+option('execmem',type='boolean',deprecated=True,description='Does nothing, left here for a while to avoid build breakages.',)
+
+option('osmesa',type='boolean',value=False,description='Build OSmesa.')
+
+option('tools',type='array',value=[],choices=['drm-shim','etnaviv','freedreno','glsl','intel','intel-ui','nir','nouveau','lima','panfrost','asahi','imagination','all','dlclose-skip'],description='List of tools to build. (Note: `intel-ui` selects `intel`)',)
+
+option('power8',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Enable power8 optimizations.',)
+
+option('xlib-lease',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Enable VK_EXT_acquire_xlib_display.')
+
+option('glx-direct',type='boolean',value=True,description='Enable direct rendering in GLX and EGL for DRI',)
+
+option('egl-lib-suffix',type='string',value='',description='Suffix to append to EGL library name.  Default: none.')
+
+option('gles-lib-suffix',type='string',value='',description='Suffix to append to GLES library names.  Default: none.')
+
+option('platform-sdk-version',type='integer',min=25,max=10000,value=25,description='Android Platform SDK version. Default: Nougat version.')
+
+option('allow-kcmp',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Allow using KCMP_FILE to compare file descriptions. '+'auto = allowed everywhere except on Android')
+
+option('zstd',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Use ZSTD instead of ZLIB in some cases.')
+
+option('zlib',type='feature',deprecated={'true':'enabled','false':'disabled'},value='enabled',description='Use ZLIB to build driver. Default: enabled')
+
+option('sse2',type='boolean',value=True,description='use msse2 flag for x86. Uses sse/sse2 instead of x87. Default: true',)
+
+option('perfetto',type='boolean',value=False,description='Enable performance analysis with Perfetto. Default: false')
+
+option('datasources',type='array',value=['auto'],choices=['auto','panfrost','intel','freedreno'],description='List of Perfetto datasources to build. If this is set to '+'`auto`, datasources that can not be build are skipped. '+'Default: [`auto`]')
+
+option('teflon',type='boolean',value=False,description='Enable TensorFlow Lite delegate. Default: false')
+
+option('gpuvis',type='boolean',value=False,description='Enable tracing markers for gpuvis. Default: false')
+
+option('custom-shader-replacement',type='string',value='',description='Enable a custom shader replacement mechanism. Note that '+'enabling this option requires adding/generating a '+'shader_replacement.h file that can be included (see '+'shaderapi.c).')
+
+option('vmware-mks-stats',type='boolean',value=False,description='Build gallium VMware/svga driver with mksGuestStats '+'instrumentation.')
+
+option('vulkan-beta',type='boolean',value=False,description='Build vulkan drivers with BETA extensions enabled.')
+
+option('intel-clc',type='combo',deprecated={'true':'enabled'},value='auto',choices=['enabled','system','auto'],description='Build the intel-clc compiler or use a system version.')
+
+option('install-intel-clc',type='boolean',value=False,description='Install the intel-clc compiler (if needed for cross builds).')
+
+option('intel-rt',type='feature',deprecated={'true':'enabled','false':'disabled'},description='Build Ray Tracing on supported hardware.')
+
+option('video-codecs',type='array',value=['all_free'],choices=['all','all_free','vc1dec','h264dec','h264enc','h265dec','h265enc','av1dec','av1enc','vp9dec'],description='List of codecs to build support for. '+'Distros might want to consult their legal department before '+'enabling these. This is used for all video APIs (vaapi, '+'vdpau, vulkan). Non-patent encumbered codecs will be '+'enabled by default with the all_free default value.')
+
+option('gallium-d3d12-video',type='feature',value='auto',deprecated={'true':'enabled','false':'disabled'},description='build gallium d3d12 with video support.',)
+
+option('gallium-d3d12-graphics',type='feature',value='auto',description='build gallium d3d12 with graphics pipeline support.',)
+
+option('radv-build-id',type='string',value='',description='Override build id for shader cache keys (hex string). '+'Can be extracted with readelf -x .note.gnu.build-id')
+
+option('min-windows-version',type='integer',min=7,max=11,value=8,description='Minimum Windows version to support. Defaults to Windows 8.')
+
+option('xmlconfig',type='feature',value='auto',deprecated={'true':'enabled','false':'disabled'},description='Build custom xmlconfig (driconf) support. If disabled, '+'the default driconf file is hardcoded into Mesa. '+'Requires expat.')
+
+########################################################################################################################
+### End conversion from: meson_options.txt
+########################################################################################################################
+###
+### Process command line arguments for setting options
+if __name__ == "__main__":
+  for arg in sys.argv[1:]:
+    match = re.match(r"-D([a-zA-Z0-9-]+)=([a-zA-Z0-9-]*)", arg)
+    if not match:
+      exit("Invalid arg: %s should be -Doption=value" % arg)
+    set_option(match.group(1), match.group(2))
+###
+### These definitions must be inside the module
+def get_variable(name: str):
+  return globals()[name]
+
+### Load config
+load_config_file()
+
+########################################################################################################################
+### Begin conversion from: meson.build
+########################################################################################################################
+project('mesa',['c','cpp'],version=files('VERSION'),license='MIT',meson_version='>= 1.1.0',default_options=['buildtype=debugoptimized','b_ndebug=if-release','c_std=c11','cpp_std=c++17','rust_std=2021','build.rust_std=2021',],)
+
+cc=meson.get_compiler('c')
+cpp=meson.get_compiler('cpp')
+
+sizeof_pointer=str(cc.sizeof('void*'))
+
+null_dep=dependency('',required=False)
+
+if get_option('layout')!='mirror':
+  error('`mirror` is the only build directory layout supported')
+
+
+with_mesa_debug=get_option('buildtype')=='debug'# This means the final value of b_ndebug==true
+with_mesa_ndebug=get_option('b_ndebug')=='true' or (get_option('buildtype')=='release' and get_option('b_ndebug')=='if-release')# default arguments for both C and C++.
+pre_args=['-D__STDC_CONSTANT_MACROS','-D__STDC_FORMAT_MACROS','-D__STDC_LIMIT_MACROS','-DPACKAGE_VERSION="{}"'.format(meson.project_version()),'-DPACKAGE_BUGREPORT="https://gitlab.freedesktop.org/mesa/mesa/-/issues"',]# Arguments for c or cpp compiler, can be compiler options
+c_cpp_args=[]
+
+c_args=[]
+cpp_args=[]
+
+with_moltenvk_dir=get_option('moltenvk-dir')
+with_vulkan_icd_dir=get_option('vulkan-icd-dir')
+with_tests=get_option('build-tests')
+with_glcpp_tests=get_option('enable-glcpp-tests')
+with_aco_tests=get_option('build-aco-tests')
+with_glx_read_only_text=get_option('glx-read-only-text')
+with_glx_direct=get_option('glx-direct')
+with_osmesa=get_option('osmesa')
+with_vulkan_overlay_layer=get_option('vulkan-layers').count('overlay') > 0
+with_vulkan_device_select_layer=get_option('vulkan-layers').count('device-select') > 0
+with_tools=get_option('tools')
+if with_tools.count('all') > 0:
+  with_tools=['drm-shim','dlclose-skip','etnaviv','freedreno','glsl','intel','intel-ui','lima','nir','nouveau','asahi','imagination',]
+
+
+with_any_vulkan_layers=len(get_option('vulkan-layers'))!=0
+with_intel_tools=with_tools.count('intel') > 0 or with_tools.count('intel-ui') > 0
+with_imgui=with_intel_tools or with_vulkan_overlay_layer
+
+dri_drivers_path=get_option('dri-drivers-path')
+if dri_drivers_path=='':
+  dri_drivers_path=join_paths(get_option('prefix'),get_option('libdir'),'dri')
+
+dri_search_path=get_option('dri-search-path')
+if dri_search_path=='':
+  dri_search_path=dri_drivers_path
+
+
+gbm_backends_path=get_option('gbm-backends-path')
+if gbm_backends_path=='':
+  gbm_backends_path=join_paths(get_option('prefix'),get_option('libdir'),'gbm')
+# Default shared glapi disabled for windows, enabled elsewhere.
+with_shared_glapi=get_option('shared-glapi').disable_auto_if(host_machine.system()=='windows').allowed()
+
+with_opengl=get_option('opengl')
+
+with_gles1=get_option('gles1').require(with_shared_glapi,error_message='OpengGL ES 1.x requires shared-glapi').allowed()
+
+with_gles2=get_option('gles2').require(with_shared_glapi,error_message='OpengGL ES 2.x requires shared-glapi').allowed()
+
+pre_args += ['-DHAVE_OPENGL={}'.format(int(with_opengl))] if isinstance(pre_args, list) else '-DHAVE_OPENGL={}'.format(int(with_opengl))
+pre_args += ['-DHAVE_OPENGL_ES_1={}'.format(int(with_gles1))] if isinstance(pre_args, list) else '-DHAVE_OPENGL_ES_1={}'.format(int(with_gles1))
+pre_args += ['-DHAVE_OPENGL_ES_2={}'.format(int(with_gles2))] if isinstance(pre_args, list) else '-DHAVE_OPENGL_ES_2={}'.format(int(with_gles2))
+
+with_any_opengl=with_opengl or with_gles1 or with_gles2# Only build shared_glapi if at least one OpenGL API is enabled
+with_shared_glapi=with_shared_glapi and with_any_opengl
+
+system_has_kms_drm=['openbsd','netbsd','freebsd','gnu/kfreebsd','dragonfly','linux','sunos','android','managarm'].count(host_machine.system()) > 0
+
+gallium_drivers=get_option('gallium-drivers')
+if gallium_drivers.count('auto') > 0:
+  if system_has_kms_drm:
+    if ['x86','x86_64'].count(host_machine.cpu_family()) > 0:
+      gallium_drivers=['r300','r600','radeonsi','nouveau','virgl','svga','swrast','iris','crocus','i915','zink']
+    elif ['arm','aarch64'].count(host_machine.cpu_family()) > 0:
+      gallium_drivers=['v3d','vc4','freedreno','etnaviv','nouveau','svga','tegra','virgl','lima','panfrost','swrast','iris','zink']
+    elif ['mips','mips64','ppc','ppc64','riscv32','riscv64'].count(host_machine.cpu_family()) > 0:
+      gallium_drivers=['r300','r600','radeonsi','nouveau','virgl','swrast','zink']
+    elif ['loongarch64'].count(host_machine.cpu_family()) > 0:
+      gallium_drivers=['r300','r600','radeonsi','nouveau','virgl','etnaviv','swrast','zink']
+    else:
+      error('Unknown architecture {}. Please pass -Dgallium-drivers to set driver options. Patches gladly accepted to fix this.'.format(host_machine.cpu_family()))
+
+  elif ['windows'].count(host_machine.system()) > 0:
+    gallium_drivers=['swrast','zink','d3d12']
+  elif ['darwin','cygwin','haiku'].count(host_machine.system()) > 0:
+    gallium_drivers=['swrast']
+  else:
+    error('Unknown OS {}. Please pass -Dgallium-drivers to set driver options. Patches gladly accepted to fix this.'.format(host_machine.system()))
+
+elif gallium_drivers.count('all') > 0:
+  gallium_drivers=['r300','r600','radeonsi','crocus','v3d','vc4','freedreno','etnaviv','nouveau','svga','tegra','virgl','lima','panfrost','swrast','iris','zink','d3d12','asahi']
+
+
+with_gallium_radeonsi=gallium_drivers.count('radeonsi') > 0
+with_gallium_r300=gallium_drivers.count('r300') > 0
+with_gallium_r600=gallium_drivers.count('r600') > 0
+with_gallium_nouveau=gallium_drivers.count('nouveau') > 0
+with_gallium_freedreno=gallium_drivers.count('freedreno') > 0
+with_gallium_softpipe=gallium_drivers.count('swrast') > 0
+with_gallium_vc4=gallium_drivers.count('vc4') > 0
+with_gallium_v3d=gallium_drivers.count('v3d') > 0
+with_gallium_panfrost=gallium_drivers.count('panfrost') > 0
+with_gallium_etnaviv=gallium_drivers.count('etnaviv') > 0
+with_gallium_tegra=gallium_drivers.count('tegra') > 0
+with_gallium_crocus=gallium_drivers.count('crocus') > 0
+with_gallium_iris=gallium_drivers.count('iris') > 0
+with_gallium_i915=gallium_drivers.count('i915') > 0
+with_gallium_svga=gallium_drivers.count('svga') > 0
+with_gallium_virgl=gallium_drivers.count('virgl') > 0
+with_gallium_lima=gallium_drivers.count('lima') > 0
+with_gallium_zink=gallium_drivers.count('zink') > 0
+with_gallium_d3d12=gallium_drivers.count('d3d12') > 0
+with_gallium_asahi=gallium_drivers.count('asahi') > 0
+for gallium_driver in gallium_drivers:
+  pre_args += ['-DHAVE_{}'.format(gallium_driver.upper())] if isinstance(pre_args, list) else '-DHAVE_{}'.format(gallium_driver.upper())
+
+
+with_gallium=len(gallium_drivers)!=0
+with_gallium_kmsro=system_has_kms_drm and [with_gallium_asahi,with_gallium_etnaviv,with_gallium_freedreno,with_gallium_lima,with_gallium_panfrost,with_gallium_v3d,with_gallium_vc4,].count(True) > 0
+
+_vulkan_drivers=get_option('vulkan-drivers')
+if _vulkan_drivers.count('auto') > 0:
+  if system_has_kms_drm:
+    if host_machine.cpu_family().startswith('x86'):
+      _vulkan_drivers=['amd','intel','intel_hasvk','nouveau','swrast']
+    elif ['arm','aarch64'].count(host_machine.cpu_family()) > 0:
+      _vulkan_drivers=['swrast','intel']
+    elif ['mips','mips64','ppc','ppc64','riscv32','riscv64'].count(host_machine.cpu_family()) > 0:
+      _vulkan_drivers=['amd','swrast']
+    elif ['loongarch64'].count(host_machine.cpu_family()) > 0:
+      _vulkan_drivers=['amd','swrast']
+    else:
+      error('Unknown architecture {}. Please pass -Dvulkan-drivers to set driver options. Patches gladly accepted to fix this.'.format(host_machine.cpu_family()))
+
+  elif ['darwin','windows','cygwin','haiku'].count(host_machine.system()) > 0:
+    _vulkan_drivers=[]
+  else:
+    error('Unknown OS {}. Please pass -Dvulkan-drivers to set driver options. Patches gladly accepted to fix this.'.format(host_machine.system()))
+
+elif _vulkan_drivers.count('all') > 0:
+  _vulkan_drivers=['amd','intel','intel_hasvk','swrast','freedreno','panfrost','virtio','broadcom','imagination-experimental','microsoft-experimental','nouveau']
+
+
+with_intel_vk=_vulkan_drivers.count('intel') > 0
+with_intel_hasvk=_vulkan_drivers.count('intel_hasvk') > 0
+with_amd_vk=_vulkan_drivers.count('amd') > 0
+with_freedreno_vk=_vulkan_drivers.count('freedreno') > 0
+with_panfrost_vk=_vulkan_drivers.count('panfrost') > 0
+with_swrast_vk=_vulkan_drivers.count('swrast') > 0
+with_virtio_vk=_vulkan_drivers.count('virtio') > 0
+with_broadcom_vk=_vulkan_drivers.count('broadcom') > 0
+with_imagination_vk=_vulkan_drivers.count('imagination-experimental') > 0
+with_imagination_srv=get_option('imagination-srv')
+with_microsoft_vk=_vulkan_drivers.count('microsoft-experimental') > 0
+with_nouveau_vk=_vulkan_drivers.count('nouveau') > 0
+with_any_vk=len(_vulkan_drivers)!=0
+
+if with_any_vk and host_machine.system()=='windows' and meson.version().version_compare('< 1.3'):
+  error('Vulkan drivers on Windows require meson 1.3 or newer')
+
+
+freedreno_kmds=get_option('freedreno-kmds')
+if len(freedreno_kmds)!=0 and freedreno_kmds!=['msm'] and with_freedreno_vk:
+  if freedreno_kmds.count('msm') > 0:
+    warning('Turnip with the DRM KMD will require libdrm to always be present at runtime which may not always be the case on platforms such as Android.')
+  elif with_gallium_kmsro:
+    warning('As a side-effect, Turnip is forced to link with libdrm when built alongside Gallium DRM drivers which platforms such as Android may not have available at runtime.')
+  elif _vulkan_drivers!=['freedreno']:
+    warning('Turnip is forced to link with libdrm when built alongside other Vulkan drivers which platforms such as Android may not have available at runtime.')
+  else:
+    system_has_kms_drm=False
+
+
+
+with_dri=False
+if with_gallium and system_has_kms_drm:
+  _glx=get_option('glx')
+  _egl=get_option('egl')
+  if _glx=='dri' or _egl.enabled() or (_glx=='disabled' and _egl.allowed()):
+    with_dri=True
+
+
+
+with_any_broadcom=[with_gallium_vc4,with_gallium_v3d,with_broadcom_vk,].count(True) > 0
+
+if get_option('intel-clc')!='system':
+  with_intel_clc=get_option('intel-clc')=='enabled' or with_intel_vk or with_gallium_iris
+else:
+  with_intel_clc=False
+
+
+with_intel_vk_rt=get_option('intel-rt').disable_auto_if(not with_intel_vk).disable_if(host_machine.cpu_family()!='x86_64',error_message='Intel Ray Tracing is only supported on x86_64').allowed()
+
+with_any_intel=[with_gallium_crocus,with_gallium_i915,with_gallium_iris,with_intel_clc,with_intel_hasvk,with_intel_tools,with_intel_vk,].count(True) > 0
+with_any_nouveau=with_gallium_nouveau or with_nouveau_vk
+
+# needed in the loader
+if with_nouveau_vk:
+  pre_args += ['-DHAVE_NVK'] if isinstance(pre_args, list) else '-DHAVE_NVK'
+
+
+if with_swrast_vk and not with_gallium_softpipe:
+  error('swrast vulkan requires gallium swrast')
+
+if with_gallium_tegra and not with_gallium_nouveau:
+  error('tegra driver requires nouveau driver')
+
+if with_aco_tests and not with_amd_vk:
+  error('ACO tests require Radv')
+
+
+with_microsoft_clc=get_option('microsoft-clc').enabled()
+with_spirv_to_dxil=get_option('spirv-to-dxil')
+
+if host_machine.system()=='darwin':
+  with_dri_platform='apple'
+  pre_args += ['-DBUILDING_MESA'] if isinstance(pre_args, list) else '-DBUILDING_MESA'
+elif ['windows','cygwin'].count(host_machine.system()) > 0:
+  with_dri_platform='windows'
+elif system_has_kms_drm:
+  with_dri_platform='drm'
+else:
+  with_dri_platform='none'
+
+
+with_vulkan_beta=get_option('vulkan-beta')
+if host_machine.system()=='darwin':
+  with_vulkan_beta=True
+
+if with_vulkan_beta:
+  pre_args += ['-DVK_ENABLE_BETA_EXTENSIONS'] if isinstance(pre_args, list) else '-DVK_ENABLE_BETA_EXTENSIONS'
+
+
+_codecs=get_option('video-codecs')
+patent_codecs=['vc1dec','h264dec','h264enc','h265dec','h265enc']
+free_codecs=['av1dec','av1enc','vp9dec']
+all_codecs=patent_codecs+free_codecs
+
+if _codecs.count('all') > 0:
+  _codecs=all_codecs
+elif _codecs.count('all_free') > 0:
+  selected_codecs=_codecs
+  _codecs=free_codecs
+  for c in patent_codecs:
+    if selected_codecs.count(c) > 0:
+      _codecs+=c
+
+
+
+for c in all_codecs:
+  pre_args += ['-DVIDEO_CODEC_{}={}'.format(c.upper(),int(_codecs.count(c) > 0))] if isinstance(pre_args, list) else '-DVIDEO_CODEC_{}={}'.format(c.upper(),int(_codecs.count(c) > 0))
+
+
+_platforms=get_option('platforms')
+if _platforms.count('auto') > 0:
+  if system_has_kms_drm:
+    _platforms=['x11','wayland']
+  elif ['darwin','cygwin'].count(host_machine.system()) > 0:
+    _platforms=['x11']
+  elif ['haiku'].count(host_machine.system()) > 0:
+    _platforms=['haiku']
+  elif host_machine.system()=='windows':
+    _platforms=['windows']
+  else:
+    error('Unknown OS {}. Please pass -Dplatforms to set platforms. Patches gladly accepted to fix this.'.format(host_machine.system()))
+
+
+
+with_platform_android=_platforms.count('android') > 0
+with_platform_x11=_platforms.count('x11') > 0
+with_platform_wayland=_platforms.count('wayland') > 0
+with_platform_haiku=_platforms.count('haiku') > 0
+with_platform_windows=_platforms.count('windows') > 0
+
+with_glx=get_option('glx')
+if with_glx=='auto':
+  if not with_opengl:
+    with_glx='disabled'
+  elif with_platform_android:
+    with_glx='disabled'
+  elif with_dri:
+    with_glx='dri'
+  elif with_platform_haiku:
+    with_glx='disabled'
+  elif host_machine.system()=='windows':
+    with_glx='disabled'
+  elif with_gallium:
+    with_glx='dri'
+  elif with_platform_x11 and with_any_opengl and not with_any_vk:
+    with_glx='xlib'
+  else:
+    with_glx='disabled'
+
+
+if with_glx=='dri':
+  if with_gallium:
+    with_dri=True
+
+
+
+if not with_opengl and with_glx!='disabled':
+  error('Building GLX without OpenGL is not supported.')
+
+
+if not(with_dri or with_gallium or with_glx!='disabled'):
+  with_gles1=False
+  with_gles2=False
+  with_opengl=False
+  with_any_opengl=False
+  with_shared_glapi=False
+
+
+with_gbm=get_option('gbm').require(system_has_kms_drm,error_message='GBM only supports DRM/KMS platforms').disable_auto_if(not with_dri).allowed()
+
+with_xlib_lease=get_option('xlib-lease').require(with_platform_x11 and (system_has_kms_drm or with_dri_platform=='apple'),error_message='xlib-lease requires X11 and KMS/DRM support').allowed()
+
+with_egl=get_option('egl').require(with_platform_windows or with_platform_haiku or with_dri or with_platform_android,error_message='EGL requires DRI, Haiku, Windows or Android').require(with_shared_glapi,error_message='EGL requires shared-glapi').require(with_glx!='xlib',error_message='EGL requires DRI, but GLX is being built with xlib support').disable_auto_if(with_platform_haiku).allowed()
+
+if with_egl:
+  _platforms += ['surfaceless'] if isinstance(_platforms, list) else 'surfaceless'
+  if with_gbm and not with_platform_android:
+    _platforms += ['drm'] if isinstance(_platforms, list) else 'drm'
+
+
+  egl_native_platform=get_option('egl-native-platform')
+  if egl_native_platform.count('auto') > 0:
+    egl_native_platform=_platforms[0]
+
+
+
+if with_egl and not _platforms.count(egl_native_platform) > 0:
+  error('-Degl-native-platform does not specify an enabled platform')
+
+
+if 'x11' in _platforms:
+  _platforms += ['xcb'] if isinstance(_platforms, list) else 'xcb'
+
+
+for platform in _platforms:
+  pre_args += ['-DHAVE_{}_PLATFORM'.format(platform.upper())] if isinstance(pre_args, list) else '-DHAVE_{}_PLATFORM'.format(platform.upper())
+
+
+if with_platform_android and get_option('platform-sdk-version')>=29:
+  c_cpp_args += ['-fno-emulated-tls'] if isinstance(c_cpp_args, list) else '-fno-emulated-tls'
+# full toolchain (including libc) support.
+have_mtls_dialect=False
+for c_arg in get_option('c_args'):
+  if c_arg.startswith('-mtls-dialect='):
+    have_mtls_dialect=True
+    break
+
+
+if not have_mtls_dialect:
+  if meson.is_cross_build() and not meson.can_run_host_binaries():
+    warning('cannot auto-detect -mtls-dialect when cross-compiling, using compiler default')
+  else:
+    gnu2_test=cc.run('int __thread x; int main() { return x; }',args=['-mtls-dialect=gnu2','-fpic'],name='-mtls-dialect=gnu2')
+    if gnu2_test.returncode()==0 and (host_machine.cpu_family()!='x86_64' or cc.links('''int __thread x; int y; int main() { __asm__(
+                "leaq x@TLSDESC(%rip), %rax\n"
+                "movq y@GOTPCREL(%rip), %rdx\n"
+                "call *x@TLSCALL(%rax)\n"); }''',name='split TLSDESC')):
+      c_cpp_args += ['-mtls-dialect=gnu2'] if isinstance(c_cpp_args, list) else '-mtls-dialect=gnu2'
+
+
+
+
+if with_glx!='disabled':
+  if not(with_platform_x11 and with_any_opengl):
+    error('Cannot build GLX support without X11 platform support and at least one OpenGL API')
+  elif with_glx=='xlib':
+    if not with_gallium:
+      error('xlib based GLX requires at least one gallium driver')
+    elif not with_gallium_softpipe:
+      error('xlib based GLX requires softpipe or llvmpipe.')
+    elif with_dri:
+      error('xlib conflicts with any dri driver')
+
+  elif with_glx=='dri':
+    if not with_shared_glapi:
+      error('dri based GLX requires shared-glapi')
+
+
+
+
+_glvnd=get_option('glvnd').require(not with_platform_windows,error_message='glvnd cannot be used on Windows').require(with_glx!='xlib',error_message='Cannot build glvnd support for GLX that is not DRI based.').require(with_glx!='disabled' or with_egl,error_message='glvnd requires DRI based GLX and/or EGL').require(get_option('egl-lib-suffix')=='',error_message='''EGL lib suffix can't be used with libglvnd''')
+dep_glvnd=dependency('libglvnd',version='>= 1.3.2',required=_glvnd)
+with_glvnd=dep_glvnd.found()
+pre_args += ['-DUSE_LIBGLVND={}'.format(int(with_glvnd))] if isinstance(pre_args, list) else '-DUSE_LIBGLVND={}'.format(int(with_glvnd))
+glvnd_vendor_name=get_option('glvnd-vendor-name')
+
+if with_vulkan_icd_dir=='':
+  with_vulkan_icd_dir=join_paths(get_option('datadir'),'vulkan/icd.d')
+# GNU/Hurd includes egl_dri2, without drm.
+with_dri2=(with_dri or with_any_vk) and (with_dri_platform=='drm' or with_dri_platform=='apple' or host_machine.system()=='gnu')
+with_dri3=get_option('dri3').disable_auto_if(not(system_has_kms_drm and with_dri2)).allowed()
+
+if with_any_vk and (with_platform_x11 and not with_dri3):
+  error('Vulkan drivers require dri3 for X11 support')
+
+if with_dri:
+  if with_glx=='disabled' and not with_egl and not with_gbm:
+    error('building dri drivers require at least one windowing system')
+
+
+
+if with_gallium_kmsro and (with_platform_x11 and not with_dri3):
+  error('kmsro requires dri3 for X11 support')
+
+
+dep_dxheaders=null_dep
+if with_gallium_d3d12 or with_microsoft_clc or with_microsoft_vk:
+  dep_dxheaders=dependency('directx-headers',required=False)
+  if not dep_dxheaders.found():
+    dep_dxheaders=dependency('DirectX-Headers',version='>= 1.613.0',fallback=['DirectX-Headers','dep_dxheaders'],required=with_gallium_d3d12 or with_microsoft_vk)
+
+
+
+_with_gallium_d3d12_video=get_option('gallium-d3d12-video')
+with_gallium_d3d12_video=False
+if with_gallium_d3d12 and not _with_gallium_d3d12_video.disabled():
+  with_gallium_d3d12_video=True
+  pre_args += ['-DHAVE_GALLIUM_D3D12_VIDEO'] if isinstance(pre_args, list) else '-DHAVE_GALLIUM_D3D12_VIDEO'
+
+
+_vdpau_drivers=[with_gallium_d3d12_video,with_gallium_nouveau,with_gallium_r600,with_gallium_radeonsi,with_gallium_virgl,]
+
+vdpau=get_option('gallium-vdpau').require(system_has_kms_drm,error_message='VDPAU state tracker can only be build on unix-like OSes.').require(with_platform_x11,error_message='VDPAU state tracker requires X11 support.').require(_vdpau_drivers.count(True) > 0,error_message='VDPAU state tracker requires at least one of the following gallium drivers: r600, radeonsi, nouveau, d3d12 (with option gallium-d3d12-video, virgl).')
+
+dep_vdpau=dependency('vdpau',version='>= 1.5',required=vdpau)
+if dep_vdpau.found():
+  dep_vdpau=dep_vdpau.partial_dependency(compile_args=True)
+  pre_args += ['-DHAVE_ST_VDPAU'] if isinstance(pre_args, list) else '-DHAVE_ST_VDPAU'
+
+with_gallium_vdpau=dep_vdpau.found()
+
+vdpau_drivers_path=get_option('vdpau-libs-path')
+if vdpau_drivers_path=='':
+  vdpau_drivers_path=join_paths(get_option('libdir'),'vdpau')
+# Meson 1.4.0
+prog_glslang=find_program('glslangValidator',native=True,required=with_vulkan_overlay_layer or with_aco_tests or with_amd_vk or with_intel_vk)
+if prog_glslang.found():
+  _glslang_check='>= 11.9.0' if build_machine.system()=='windows' else '>= 11.3.0'
+  if run_command(prog_glslang,['--version'],check=False).stdout().split(':')[2].version_compare(_glslang_check):
+    glslang_depfile=['--depfile','@DEPFILE@']
+  else:
+    glslang_depfile=[]
+
+  if run_command(prog_glslang,['--quiet','--version'],check=False).returncode()==0:
+    glslang_quiet=['--quiet']
+  else:
+    glslang_quiet=[]
+
+
+
+dep_xv=null_dep
+_omx=get_option('gallium-omx')
+if not system_has_kms_drm:
+  if ['auto','disabled'].count(_omx) > 0:
+    _omx='disabled'
+  else:
+    error('OMX state tracker can only be built on unix-like OSes.')
+
+elif not(with_gallium_r600 or with_gallium_radeonsi or with_gallium_nouveau):
+  if ['auto','disabled'].count(_omx) > 0:
+    _omx='disabled'
+  else:
+    error('OMX state tracker requires at least one of the following gallium drivers: r600, radeonsi, nouveau.')
+
+
+with_gallium_omx=_omx
+dep_omx=null_dep
+dep_omx_other=[]
+if ['auto','bellagio'].count(_omx) > 0:
+  dep_omx=dependency('libomxil-bellagio',required=_omx=='bellagio')
+  if dep_omx.found():
+    with_gallium_omx='bellagio'
+
+
+if ['auto','tizonia'].count(_omx) > 0:
+  if with_dri and with_egl:
+    dep_omx=dependency('libtizonia',version='>= 0.10.0',required=_omx=='tizonia',)
+    dep_omx_other=[dependency('libtizplatform',required=_omx=='tizonia'),dependency('tizilheaders',required=_omx=='tizonia'),]
+    if dep_omx.found() and dep_omx_other[0].found() and dep_omx_other[1].found():
+      with_gallium_omx='tizonia'
+
+  elif _omx=='tizonia':
+    error('OMX-Tizonia state tracker requires dri and egl')
+
+
+if _omx=='auto':
+  with_gallium_omx='disabled'
+else:
+  with_gallium_omx=_omx
+
+
+pre_args += ['-DENABLE_ST_OMX_BELLAGIO={}'.format(int((with_gallium_omx=='bellagio')))] if isinstance(pre_args, list) else '-DENABLE_ST_OMX_BELLAGIO={}'.format(int((with_gallium_omx=='bellagio')))
+pre_args += ['-DENABLE_ST_OMX_TIZONIA={}'.format(int((with_gallium_omx=='tizonia')))] if isinstance(pre_args, list) else '-DENABLE_ST_OMX_TIZONIA={}'.format(int((with_gallium_omx=='tizonia')))
+
+
+omx_drivers_path=get_option('omx-libs-path')
+
+if with_gallium_omx!='disabled':
+  if omx_drivers_path=='':
+    _omx_libdir=dep_omx.get_variable(pkgconfig='libdir')
+    _omx_drivers_dir=dep_omx.get_variable(pkgconfig='pluginsdir')
+    if _omx_libdir==get_option('libdir'):
+      omx_drivers_path=_omx_drivers_dir
+    else:
+      _omx_base_dir=[]# This will fail on windows. Does OMX run on windows?
+      _omx_libdir=_omx_libdir.split('/')
+      _omx_drivers_dir=_omx_drivers_dir.split('/')
+      for o in _omx_drivers_dir:
+        if not _omx_libdir.count(o) > 0:
+          _omx_base_dir+=o
+
+
+      omx_drivers_path=join_paths(get_option('libdir'),_omx_base_dir)
+
+
+
+
+_va_drivers=[with_gallium_d3d12_video,with_gallium_nouveau,with_gallium_r600,with_gallium_radeonsi,with_gallium_virgl,]
+
+_va=get_option('gallium-va').require(_va_drivers.count(True) > 0,error_message='VA state tracker requires at least one of the following gallium drivers: r600, radeonsi, nouveau, d3d12 (with option gallium-d3d12-video), virgl.')
+_dep_va_name='libva-win32' if host_machine.system()=='windows' else 'libva'
+dep_va=dependency(_dep_va_name,version='>= 1.8.0',required=_va)
+if dep_va.found():
+  dep_va_headers=dep_va.partial_dependency(compile_args=True)
+  if cc.has_header_symbol('va/va.h','VASurfaceAttribDRMFormatModifiers',dependencies=dep_va_headers):
+    pre_args += ['-DHAVE_VA_SURFACE_ATTRIB_DRM_FORMAT_MODIFIERS'] if isinstance(pre_args, list) else '-DHAVE_VA_SURFACE_ATTRIB_DRM_FORMAT_MODIFIERS'
+
+
+with_gallium_va=dep_va.found()
+
+va_drivers_path=get_option('va-libs-path')
+if va_drivers_path=='':
+  va_drivers_path=join_paths(get_option('libdir'),'dri')
+
+
+with_gallium_xa=get_option('gallium-xa').require(system_has_kms_drm,error_message='XA state tracker can only be built on unix-like OSes.').require(with_gallium_nouveau or with_gallium_freedreno or with_gallium_i915 or with_gallium_svga,error_message='XA state tracker requires at least one of the following gallium drivers: nouveau, freedreno, i915, svga.').allowed()
+
+d3d_drivers_path=get_option('d3d-drivers-path')
+if d3d_drivers_path=='':
+  d3d_drivers_path=join_paths(get_option('prefix'),get_option('libdir'),'d3d')
+
+
+with_gallium_st_nine=get_option('gallium-nine')
+if with_gallium_st_nine:
+  if not with_gallium_softpipe:
+    error('The nine state tracker requires gallium softpipe/llvmpipe.')
+  elif not [with_gallium_crocus,with_gallium_freedreno,with_gallium_i915,with_gallium_iris,with_gallium_nouveau,with_gallium_panfrost,with_gallium_r300,with_gallium_r600,with_gallium_radeonsi,with_gallium_svga,with_gallium_zink,].count(True) > 0:
+    error('The nine state tracker requires at least one non-swrast gallium driver.')
+
+  if not with_dri3:
+    error('Using nine with wine requires dri3')
+
+
+with_gallium_st_d3d10umd=get_option('gallium-d3d10umd')
+if with_gallium_st_d3d10umd:
+  if not with_gallium_softpipe:
+    error('The d3d10umd state tracker requires gallium softpipe/llvmpipe.')
+
+
+_power8=get_option('power8')
+if _power8.allowed():
+  if host_machine.cpu_family()=='ppc64' and host_machine.endian()=='little':
+    if cc.get_id()=='gcc' and cc.version().version_compare('< 4.8'):
+      error('Altivec is not supported with gcc version < 4.8.')
+
+    if cc.compiles('''
+        #include <altivec.h>
+        int main() {
+          vector unsigned char r;
+          vector unsigned int v = vec_splat_u32 (1);
+          r = __builtin_vec_vgbbd ((vector unsigned char) v);
+          return 0;
+        }''',args='-mpower8-vector',name='POWER8 intrinsics'):
+      pre_args+=['-D_ARCH_PWR8']
+      c_cpp_args += ['-mpower8-vector'] if isinstance(c_cpp_args, list) else '-mpower8-vector'
+    elif _power8.enabled():
+      error('POWER8 intrinsic support required but not found.')
+
+
+
+
+if get_option('vmware-mks-stats'):
+  if not with_gallium_svga:
+    error('vmware-mks-stats requires gallium VMware/svga driver.')
+
+  pre_args += ['-DVMX86_STATS=1'] if isinstance(pre_args, list) else '-DVMX86_STATS=1'
+
+
+_opencl=get_option('gallium-opencl')
+_rtti=get_option('cpp_rtti')
+if _opencl!='disabled':
+  if not with_gallium:
+    error('OpenCL Clover implementation requires at least one gallium driver.')
+
+  if not _rtti:
+    error('The Clover OpenCL state tracker requires rtti')
+
+
+  with_gallium_clover=True
+  with_opencl_icd=_opencl=='icd'
+else:
+  with_gallium_clover=False
+  with_opencl_icd=False
+
+
+with_gallium_rusticl=get_option('gallium-rusticl')
+if with_gallium_rusticl:
+  if not with_gallium:
+    error('rusticl requires at least one gallium driver.')
+
+
+  if meson.version().version_compare('< 1.4.0'):
+    error('rusticl requires meson 1.4.0 or newer')
+
+
+  add_languages('rust',required=True)
+  rustc=meson.get_compiler('rust')
+
+
+with_clover_spirv=with_gallium_clover and get_option('opencl-spirv')
+with_clc=with_microsoft_clc or with_intel_clc or with_gallium_asahi or with_gallium_rusticl or with_clover_spirv
+
+dep_clc=null_dep
+if with_gallium_clover or with_clc:
+  dep_clc=dependency('libclc')
+
+
+gl_pkgconfig_c_flags=[]
+with_glx_indirect_rendering=False
+if with_platform_x11:
+  if with_glx=='xlib':
+    pre_args += ['-DUSE_XSHM'] if isinstance(pre_args, list) else '-DUSE_XSHM'
+  else:
+    with_glx_indirect_rendering=True
+    pre_args += ['-DGLX_INDIRECT_RENDERING'] if isinstance(pre_args, list) else '-DGLX_INDIRECT_RENDERING'
+    if with_glx_direct:
+      pre_args += ['-DGLX_DIRECT_RENDERING'] if isinstance(pre_args, list) else '-DGLX_DIRECT_RENDERING'
+
+    if with_dri_platform=='drm':
+      pre_args += ['-DGLX_USE_DRM'] if isinstance(pre_args, list) else '-DGLX_USE_DRM'
+    elif with_dri_platform=='apple':
+      pre_args += ['-DGLX_USE_APPLEGL'] if isinstance(pre_args, list) else '-DGLX_USE_APPLEGL'
+      # Check to see if more than just the default 'swrast' is required
+      if (not with_gallium_softpipe) or 1<len(gallium_drivers):
+        pre_args += ['-DGLX_USE_APPLE'] if isinstance(pre_args, list) else '-DGLX_USE_APPLE'
+
+    elif with_dri_platform=='windows':
+      pre_args += ['-DGLX_USE_WINDOWSGL'] if isinstance(pre_args, list) else '-DGLX_USE_WINDOWSGL'
+
+
+
+
+with_glapi_export_proto_entry_points=False
+if with_shared_glapi and not with_glx_indirect_rendering:
+  with_glapi_export_proto_entry_points=True
+
+pre_args += ['-DGLAPI_EXPORT_PROTO_ENTRY_POINTS={}'.format(int(with_glapi_export_proto_entry_points))] if isinstance(pre_args, list) else '-DGLAPI_EXPORT_PROTO_ENTRY_POINTS={}'.format(int(with_glapi_export_proto_entry_points))
+
+with_android_stub=get_option('android-stub')
+if with_android_stub and not with_platform_android:
+  error('`-D android-stub=true` makes no sense without `-D platforms=android`')
+
+
+with_libbacktrace=get_option('android-libbacktrace').require(with_platform_android,error_message='`-D android-libbacktrace=enabled` makes no sense without `-D platforms=android`').disable_auto_if(not with_platform_android).allowed()
+
+if with_libbacktrace:
+  noop()
+
+
+if with_platform_android:
+  dep_android_mapper4=null_dep
+  if not with_android_stub:
+    dep_android=[dependency('cutils'),dependency('hardware'),dependency('log'),dependency('sync'),]
+    if with_libbacktrace:
+      dep_android+=dependency('backtrace')
+
+    if get_option('platform-sdk-version')>=26:
+      dep_android+=dependency('nativewindow')
+
+    if get_option('platform-sdk-version')>=30:
+      dep_android_mapper4=dependency('android.hardware.graphics.mapper',version='>= 4.0',required=False)
+
+
+  pre_args += ['-DANDROID_API_LEVEL='+str(get_option('platform-sdk-version'))] if isinstance(pre_args, list) else '-DANDROID_API_LEVEL='+str(get_option('platform-sdk-version'))
+  if get_option('android-strict'):
+    pre_args += ['-DANDROID_STRICT'] if isinstance(pre_args, list) else '-DANDROID_STRICT'
+
+  pre_args += ['-DVK_USE_PLATFORM_ANDROID_KHR=1'] if isinstance(pre_args, list) else '-DVK_USE_PLATFORM_ANDROID_KHR=1'
+# On Android, seccomp kills the process on kernels without
+# CONFIG_KCMP/CONFIG_CHECKPOINT_RESTORE if it attemps to use KCMP.
+# Since we can't detect that, err on the side of caution and disable
+# KCMP by default on Android.
+if get_option('allow-kcmp').disable_auto_if(with_platform_android).allowed():
+  pre_args += ['-DALLOW_KCMP'] if isinstance(pre_args, list) else '-DALLOW_KCMP'
+
+
+prog_python=module_import('python').find_installation('python3')
+has_mako=run_command(prog_python,'-c','''
+try:
+  from packaging.version import Version
+except:
+  from distutils.version import StrictVersion as Version
+import mako
+assert Version(mako.__version__) >= Version("0.8.0")
+  ''',check=False)
+if has_mako.returncode()!=0:
+  error('Python (3.x) mako module >= 0.8.0 required to build mesa.')
+
+
+if cc.get_id()=='gcc' and cc.version().version_compare('< 4.4.6'):
+  error('When using GCC, version 4.4.6 or later is required.')
+# Support systems without ETIME (e.g. FreeBSD)
+if cc.get_define('ETIME',prefix='#include <errno.h>')=='':
+  pre_args += ['-DETIME=ETIMEDOUT'] if isinstance(pre_args, list) else '-DETIME=ETIMEDOUT'
+
+
+# Define MESA_DEBUG to 1 for debug builds only (debugoptimized is not included on this one);
+# otherwise define MESA_DEBUG to 0
+pre_args += ['-DMESA_DEBUG={}'.format(int(with_mesa_debug))] if isinstance(pre_args, list) else '-DMESA_DEBUG={}'.format(int(with_mesa_debug))
+
+with_split_debug=get_option('split-debug').disable_if(not cc.has_argument('-gsplit-dwarf'),error_message='split-debug requires compiler -gsplit-dwarf support').disable_if(not cc.has_link_argument('-Wl,--gdb-index'),error_message='split-debug requires the linker argument -Wl,--gdb-index')
+
+if with_split_debug.allowed() and get_option('debug'):
+  add_project_arguments('-gsplit-dwarf',language=['c','cpp'])
+  add_project_link_arguments('-Wl,--gdb-index',language=['c','cpp'])
+
+
+with_shader_cache=get_option('shader-cache').require(host_machine.system()!='windows',error_message='Shader Cache does not currently work on Windows').allowed()
+
+if with_shader_cache:
+  pre_args += ['-DENABLE_SHADER_CACHE'] if isinstance(pre_args, list) else '-DENABLE_SHADER_CACHE'
+  if not get_option('shader-cache-default'):
+    pre_args += ['-DSHADER_CACHE_DISABLE_BY_DEFAULT'] if isinstance(pre_args, list) else '-DSHADER_CACHE_DISABLE_BY_DEFAULT'
+
+
+  shader_cache_max_size=get_option('shader-cache-max-size')
+  if shader_cache_max_size!='':
+    pre_args += ['-DMESA_SHADER_CACHE_MAX_SIZE="{}"'.format(shader_cache_max_size)] if isinstance(pre_args, list) else '-DMESA_SHADER_CACHE_MAX_SIZE="{}"'.format(shader_cache_max_size)
+
+
+
+# Check for GCC style builtins
+for b in ['bswap32','bswap64','clz','clzll','ctz','expect','ffs','ffsll','popcount','popcountll','unreachable','types_compatible_p']:
+  if cc.has_function(b):
+    pre_args += ['-DHAVE___BUILTIN_{}'.format(b.upper())] if isinstance(pre_args, list) else '-DHAVE___BUILTIN_{}'.format(b.upper())
+
+# check for GCC __attribute__
+_attributes=['const','flatten','malloc','pure','unused','warn_unused_result','weak','format','packed','returns_nonnull','alias','noreturn',]
+for a in cc.get_supported_function_attributes(_attributes):
+  pre_args += ['-DHAVE_FUNC_ATTRIBUTE_{}'.format(a.upper())] if isinstance(pre_args, list) else '-DHAVE_FUNC_ATTRIBUTE_{}'.format(a.upper())
+
+if cc.has_function_attribute('visibility:hidden'):
+  pre_args += ['-DHAVE_FUNC_ATTRIBUTE_VISIBILITY'] if isinstance(pre_args, list) else '-DHAVE_FUNC_ATTRIBUTE_VISIBILITY'
+
+if cc.compiles('__uint128_t foo(void) { return 0; }',name='__uint128_t'):
+  pre_args += ['-DHAVE_UINT128'] if isinstance(pre_args, list) else '-DHAVE_UINT128'
+
+
+if cc.has_function('reallocarray'):
+  pre_args += ['-DHAVE_REALLOCARRAY'] if isinstance(pre_args, list) else '-DHAVE_REALLOCARRAY'
+
+if cc.has_function('fmemopen'):
+  pre_args += ['-DHAVE_FMEMOPEN'] if isinstance(pre_args, list) else '-DHAVE_FMEMOPEN'
+# TODO: this is very incomplete
+if ['linux','cygwin','gnu','freebsd','gnu/kfreebsd','haiku','android','managarm'].count(host_machine.system()) > 0:
+  pre_args += ['-D_GNU_SOURCE'] if isinstance(pre_args, list) else '-D_GNU_SOURCE'
+elif host_machine.system()=='sunos':
+  pre_args += ['-D__EXTENSIONS__'] if isinstance(pre_args, list) else '-D__EXTENSIONS__'
+elif host_machine.system()=='windows':
+  pre_args+=['-D_WINDOWS','-D_WIN32_WINNT=0x0A00','-DWINVER=0x0A00','-DPIPE_SUBSYSTEM_WINDOWS_USER','-D_USE_MATH_DEFINES',]
+  if cc.get_argument_syntax()=='msvc':
+    pre_args+=['-DVC_EXTRALEAN','-D_CRT_SECURE_NO_WARNINGS','-D_CRT_SECURE_NO_DEPRECATE','-D_SCL_SECURE_NO_WARNINGS','-D_SCL_SECURE_NO_DEPRECATE','-D_ALLOW_KEYWORD_MACROS','-D_HAS_EXCEPTIONS=0','-DNOMINMAX',]
+  else:
+    if cc.compiles('''
+      #include <string.h>
+      #if defined(__MINGW32__) && defined(_UCRT)
+      #error
+      #endif
+      int main(void) { return 0; }'''):
+      pre_args+=['-D__MSVCRT_VERSION__=0x0700']
+
+
+elif host_machine.system()=='openbsd':
+  pre_args += ['-D_ISOC11_SOURCE'] if isinstance(pre_args, list) else '-D_ISOC11_SOURCE'
+
+
+# Check for generic C arguments
+c_msvc_compat_args=[]
+no_override_init_args=[]
+cpp_msvc_compat_args=[]
+ld_args_gc_sections=[]
+if cc.get_argument_syntax()=='msvc':
+  _trial=['/wd4018','/wd4056','/wd4244','/wd4267','/wd4305','/wd4351','/wd4756','/wd4800','/wd4996','/wd4291','/wd4146','/wd4200','/wd4624','/wd4309','/wd4838','/wd5105','/we4020','/we4024','/we4189','/Zc:__cplusplus',]
+  c_args+=cc.get_supported_arguments(_trial)
+  cpp_args+=cpp.get_supported_arguments(_trial)
+else:
+  _trial_c=['-Werror=implicit-function-declaration','-Werror=missing-prototypes','-Werror=return-type','-Werror=empty-body','-Werror=incompatible-pointer-types','-Werror=int-conversion','-Wimplicit-fallthrough','-Wmisleading-indentation','-Wno-missing-field-initializers','-Wno-format-truncation','-Wno-nonnull-compare','-fno-math-errno','-fno-trapping-math','-Qunused-arguments','-fno-common','-Wno-unknown-pragmas','-Wno-microsoft-enum-value','-Wno-unused-function',]
+  _trial_cpp=['-Werror=return-type','-Werror=empty-body','-Wmisleading-indentation','-Wno-non-virtual-dtor','-Wno-missing-field-initializers','-Wno-format-truncation','-fno-math-errno','-fno-trapping-math','-Qunused-arguments','-flifetime-dse=1','-Wno-unknown-pragmas','-Wno-microsoft-enum-value',]# MinGW chokes on format specifiers and I can't get it all working
+  if not(cc.get_argument_syntax()=='gcc' and host_machine.system()=='windows'):
+    _trial_c+=['-Werror=format','-Wformat-security']
+    _trial_cpp+=['-Werror=format','-Wformat-security']
+
+
+  # FreeBSD annotated <pthread.h> but Mesa isn't ready
+  if not(cc.get_id()=='clang' and host_machine.system()=='freebsd'):
+    _trial_c+=['-Werror=thread-safety']
+  # relevant for Vulkan drivers).
+  if cc.links('static char unused() { return 5; } int main() { return 0; }',args='-Wl,--gc-sections',name='gc-sections'):
+    ld_args_gc_sections += ['-Wl,--gc-sections'] if isinstance(ld_args_gc_sections, list) else '-Wl,--gc-sections'
+    _trial_c+=['-ffunction-sections','-fdata-sections']
+    _trial_cpp+=['-ffunction-sections','-fdata-sections']
+# Variables that are only used for assertions are considered unused when assertions
+  # are disabled. Don't treat this as an error, since we build with -Werror even if
+  # assertions are disabled.
+  if with_mesa_ndebug:
+    _trial_c+=['-Wno-unused-variable','-Wno-unused-but-set-variable','/wd4189']
+    _trial_cpp+=['-Wno-unused-variable','-Wno-unused-but-set-variable','/wd4189']
+
+
+  c_args+=cc.get_supported_arguments(_trial_c)
+  cpp_args+=cpp.get_supported_arguments(_trial_cpp)
+
+  no_override_init_args+=cc.get_supported_arguments(['-Wno-override-init','-Wno-initializer-overrides'])# Check for C and C++ arguments for MSVC compatibility. These are only used
+  # in parts of the mesa code base that need to compile with MSVC, mainly
+  # common code
+  _trial_msvc=['-Werror=pointer-arith','-Werror=vla','-Werror=gnu-empty-initializer']
+  c_msvc_compat_args+=cc.get_supported_arguments(_trial_msvc)
+  cpp_msvc_compat_args+=cpp.get_supported_arguments(_trial_msvc)
+# set linker arguments
+if host_machine.system()=='windows':
+  if cc.get_argument_syntax()=='msvc':
+    add_project_link_arguments('/fixed:no','/dynamicbase','/nxcompat',language=['c','cpp'],)
+    if get_option('buildtype')!='debug':
+      add_project_link_arguments('/incremental:no',language=['c','cpp'],)
+
+  else:
+    add_project_link_arguments(cc.get_supported_link_arguments('-Wl,--nxcompat','-Wl,--dynamicbase','-static-libgcc','-static-libstdc++',),language=['c'],)
+    add_project_link_arguments(cpp.get_supported_link_arguments('-Wl,--nxcompat','-Wl,--dynamicbase','-static-libgcc','-static-libstdc++',),language=['cpp'],)
+
+
+
+sse2_arg=[]
+sse2_args=[]
+sse41_args=[]
+with_sse41=False
+if host_machine.cpu_family().startswith('x86'):
+  pre_args += ['-DUSE_SSE41'] if isinstance(pre_args, list) else '-DUSE_SSE41'
+  with_sse41=True
+
+  if cc.get_id()!='msvc':
+    sse41_args=['-msse4.1']
+
+    if host_machine.cpu_family()=='x86':
+      sse2_arg=['-msse2','-mfpmath=sse']
+      sse2_args=[sse2_arg,'-mstackrealign']
+      if get_option('sse2'):
+        c_cpp_args+=sse2_args# sse2_args are adopted into c_cpp_args to avoid duplicated sse2 command line args
+        sse2_arg=[]
+        sse2_args=[]
+      else:
+        sse41_args += ['-mstackrealign'] if isinstance(sse41_args, list) else '-mstackrealign'
+
+
+
+# Detect __builtin_ia32_clflushopt support
+if cc.has_function('__builtin_ia32_clflushopt',args='-mclflushopt'):
+  pre_args += ['-DHAVE___BUILTIN_IA32_CLFLUSHOPT'] if isinstance(pre_args, list) else '-DHAVE___BUILTIN_IA32_CLFLUSHOPT'
+  clflushopt_args=['-mclflushopt']
+  with_clflushopt=True
+else:
+  clflushopt_args=[]
+  with_clflushopt=False
+
+
+# Check for GCC style atomics
+dep_atomic=null_dep
+
+if cc.compiles('''#include <stdint.h>
+                  int main() {
+                    struct {
+                      uint64_t *v;
+                    } x;
+                    return (int)__atomic_load_n(x.v, __ATOMIC_ACQUIRE) &
+                           (int)__atomic_add_fetch(x.v, (uint64_t)1, __ATOMIC_ACQ_REL);
+
+                  }''',name='GCC atomic builtins'):
+  pre_args += ['-DUSE_GCC_ATOMIC_BUILTINS'] if isinstance(pre_args, list) else '-DUSE_GCC_ATOMIC_BUILTINS'# as ARM.
+  if not cc.links('''#include <stdint.h>
+                     int main() {
+                       struct {
+                         uint64_t *v;
+                       } x;
+                       return (int)__atomic_load_n(x.v, __ATOMIC_ACQUIRE) &
+                              (int)__atomic_add_fetch(x.v, (uint64_t)1, __ATOMIC_ACQ_REL);
+                     }''',name='GCC atomic builtins required -latomic'):
+    dep_atomic=cc.find_library('atomic')
+
+
+if not cc.links('''#include <stdint.h>
+                   uint64_t v;
+                   int main() {
+                     return __sync_add_and_fetch(&v, (uint64_t)1);
+                   }''',dependencies=dep_atomic,name='GCC 64bit atomics'):
+  pre_args += ['-DMISSING_64BIT_ATOMICS'] if isinstance(pre_args, list) else '-DMISSING_64BIT_ATOMICS'
+
+
+dep_ws2_32=cc.find_library('ws2_32',required=with_platform_windows)
+with_asm_arch=''
+if host_machine.cpu_family()=='x86':
+  if system_has_kms_drm or host_machine.system()=='gnu':
+    with_asm_arch='x86'
+    pre_args+=['-DUSE_X86_ASM']
+
+    if with_glx_read_only_text:
+      pre_args+=['-DGLX_X86_READONLY_TEXT']
+
+
+elif host_machine.cpu_family()=='x86_64':
+  if system_has_kms_drm:
+    with_asm_arch='x86_64'
+    pre_args+=['-DUSE_X86_64_ASM']
+
+elif host_machine.cpu_family()=='arm':
+  if system_has_kms_drm:
+    with_asm_arch='arm'
+    pre_args+=['-DUSE_ARM_ASM']
+
+elif host_machine.cpu_family()=='aarch64':
+  if system_has_kms_drm:
+    with_asm_arch='aarch64'
+    pre_args+=['-DUSE_AARCH64_ASM']
+
+elif host_machine.cpu_family()=='sparc64':
+  if system_has_kms_drm:
+    with_asm_arch='sparc'
+    pre_args+=['-DUSE_SPARC_ASM']
+
+elif host_machine.cpu_family()=='ppc64' and host_machine.endian()=='little':
+  if system_has_kms_drm:
+    with_asm_arch='ppc64le'
+    pre_args+=['-DUSE_PPC64LE_ASM']
+
+elif host_machine.cpu_family()=='mips64' and host_machine.endian()=='little':
+  if system_has_kms_drm:
+    with_asm_arch='mips64el'
+    pre_args+=['-DUSE_MIPS64EL_ASM']
+
+elif host_machine.cpu_family()=='loongarch64':
+  if system_has_kms_drm:
+    with_asm_arch='loongarch64'
+    pre_args+=['-DUSE_LOONGARCH64_ASM']
+
+
+
+# Check for standard headers and functions
+if (cc.has_header_symbol('sys/sysmacros.h','major') and cc.has_header_symbol('sys/sysmacros.h','minor') and cc.has_header_symbol('sys/sysmacros.h','makedev')):
+  pre_args += ['-DMAJOR_IN_SYSMACROS'] if isinstance(pre_args, list) else '-DMAJOR_IN_SYSMACROS'
+
+if (cc.has_header_symbol('sys/mkdev.h','major') and cc.has_header_symbol('sys/mkdev.h','minor') and cc.has_header_symbol('sys/mkdev.h','makedev')):
+  pre_args += ['-DMAJOR_IN_MKDEV'] if isinstance(pre_args, list) else '-DMAJOR_IN_MKDEV'
+
+
+if cc.check_header('sched.h'):
+  pre_args += ['-DHAS_SCHED_H'] if isinstance(pre_args, list) else '-DHAS_SCHED_H'
+  if cc.has_function('sched_getaffinity'):
+    pre_args += ['-DHAS_SCHED_GETAFFINITY'] if isinstance(pre_args, list) else '-DHAS_SCHED_GETAFFINITY'
+
+
+
+if not['linux'].count(host_machine.system()) > 0:
+  if cc.check_header('sys/sysctl.h',prefix='#include <sys/types.h>'):
+    pre_args += ['-DHAVE_SYS_SYSCTL_H'] if isinstance(pre_args, list) else '-DHAVE_SYS_SYSCTL_H'
+
+
+
+for h in ['xlocale.h','linux/futex.h','endian.h','dlfcn.h','sys/shm.h','cet.h','pthread_np.h','sys/inotify.h','linux/udmabuf.h']:
+  if cc.check_header(h):
+    pre_args += ['-DHAVE_{}'.format(h.upper().replace('.', '_').replace('/', '_'))] if isinstance(pre_args, list) else '-DHAVE_{}'.format(h.upper().replace('.', '_').replace('/', '_'))
+
+
+
+functions_to_detect={'strtof':'','mkostemp':'','memfd_create':'','random_r':'','flock':'','strtok_r':'','getrandom':'','qsort_s':'','posix_fallocate':'','secure_getenv':'',}
+
+for f,prefix in functions_to_detect.items():
+  if cc.has_function(f,prefix=prefix):
+    pre_args += ['-DHAVE_{}'.format(f.upper())] if isinstance(pre_args, list) else '-DHAVE_{}'.format(f.upper())
+
+
+
+if cpp.links('''
+    #define _GNU_SOURCE
+    #include <stdlib.h>
+
+    static int dcomp(const void *l, const void *r, void *t) { return 0; }
+
+    int main(int ac, char **av) {
+      int arr[] = { 1 };
+      void *t = NULL;
+      qsort_r((void*)&arr[0], 1, 1, dcomp, t);
+      return (0);
+    }''',args=pre_args,name='GNU qsort_r'):
+  pre_args += ['-DHAVE_GNU_QSORT_R'] if isinstance(pre_args, list) else '-DHAVE_GNU_QSORT_R'
+elif cpp.links('''
+    #include <stdlib.h>
+
+    static int dcomp(void *t, const void *l, const void *r) { return 0; }
+
+    int main(int ac, char **av) {
+      int arr[] = { 1 };
+      void *t = NULL;
+      qsort_r((void*)&arr[0], 1, 1, t, dcomp);
+      return (0);
+    }''',args=pre_args,name='BSD qsort_r'):
+  pre_args += ['-DHAVE_BSD_QSORT_R'] if isinstance(pre_args, list) else '-DHAVE_BSD_QSORT_R'
+
+
+if cc.has_header_symbol('time.h','struct timespec'):
+  pre_args += ['-DHAVE_STRUCT_TIMESPEC'] if isinstance(pre_args, list) else '-DHAVE_STRUCT_TIMESPEC'
+
+
+with_c11_threads=False
+if cc.has_function('thrd_create',prefix='#include <threads.h>'):
+  if with_platform_android:
+    pre_args += ['-DHAVE_THRD_CREATE'] if isinstance(pre_args, list) else '-DHAVE_THRD_CREATE'
+    with_c11_threads=True
+
+
+
+if cc.has_header_symbol('errno.h','program_invocation_name',args='-D_GNU_SOURCE'):
+  pre_args += ['-DHAVE_PROGRAM_INVOCATION_NAME'] if isinstance(pre_args, list) else '-DHAVE_PROGRAM_INVOCATION_NAME'
+elif with_tools.count('intel') > 0:
+  error('Intel tools require the program_invocation_name variable')
+
+
+if cc.has_header_symbol('math.h','issignaling',args='-D_GNU_SOURCE'):
+  pre_args += ['-DHAVE_ISSIGNALING'] if isinstance(pre_args, list) else '-DHAVE_ISSIGNALING'
+# MinGW provides a __builtin_posix_memalign function, but not a posix_memalign.
+# This means that this check will succeed, but then compilation will later
+# fail. MSVC doesn't have this function at all, so only check for it on
+# non-windows platforms.
+if host_machine.system()!='windows':
+  if cc.has_function('posix_memalign'):
+    pre_args += ['-DHAVE_POSIX_MEMALIGN'] if isinstance(pre_args, list) else '-DHAVE_POSIX_MEMALIGN'
+
+
+
+if cc.has_member('struct dirent','d_type',prefix='''#include <sys/types.h>
+   #include <dirent.h>'''):
+  pre_args += ['-DHAVE_DIRENT_D_TYPE'] if isinstance(pre_args, list) else '-DHAVE_DIRENT_D_TYPE'
+# strtod locale support
+if cc.links('''
+    #define _GNU_SOURCE
+    #include <stdlib.h>
+    #include <locale.h>
+    #ifdef HAVE_XLOCALE_H
+    #include <xlocale.h>
+    #endif
+    int main() {
+      locale_t loc = newlocale(LC_CTYPE_MASK, "C", NULL);
+      const char *s = "1.0";
+      char *end;
+      double d = strtod_l(s, &end, loc);
+      float f = strtof_l(s, &end, loc);
+      freelocale(loc);
+      return 0;
+    }''',args=pre_args,name='strtod has locale support'):
+  pre_args += ['-DHAVE_STRTOD_L'] if isinstance(pre_args, list) else '-DHAVE_STRTOD_L'
+# Check for some linker flags
+ld_args_bsymbolic=[]
+if cc.links('int main() { return 0; }',args='-Wl,-Bsymbolic',name='Bsymbolic'):
+  ld_args_bsymbolic += ['-Wl,-Bsymbolic'] if isinstance(ld_args_bsymbolic, list) else '-Wl,-Bsymbolic'
+
+with_ld_version_script=False
+if cc.links('int main() { return 0; }',args='-Wl,--version-script={}'.format(join_paths(meson.current_source_dir(),'build-support/conftest.map')),name='version-script'):
+  with_ld_version_script=True
+
+with_ld_dynamic_list=False
+if cc.links('int main() { return 0; }',args='-Wl,--dynamic-list={}'.format(join_paths(meson.current_source_dir(),'build-support/conftest.dyn')),name='dynamic-list'):
+  with_ld_dynamic_list=True
+
+
+ld_args_build_id=cc.get_supported_link_arguments('-Wl,--build-id=sha1')# check for dl support
+dep_dl=null_dep
+if host_machine.system()!='windows':
+  if not cc.has_function('dlopen'):
+    dep_dl=cc.find_library('dl',required=True)
+
+  if cc.has_function('dladdr',dependencies=dep_dl):
+    pre_args += ['-DHAVE_DLADDR'] if isinstance(pre_args, list) else '-DHAVE_DLADDR'
+
+
+
+if cc.has_function('dl_iterate_phdr'):
+  pre_args += ['-DHAVE_DL_ITERATE_PHDR'] if isinstance(pre_args, list) else '-DHAVE_DL_ITERATE_PHDR'
+elif with_intel_vk or with_intel_hasvk:
+  error('Intel "Anvil" Vulkan driver requires the dl_iterate_phdr function')
+
+
+if with_any_intel and ['x86','x86_64'].count(host_machine.cpu_family()) > 0:
+  pre_args += ['-DSUPPORT_INTEL_INTEGRATED_GPUS'] if isinstance(pre_args, list) else '-DSUPPORT_INTEL_INTEGRATED_GPUS'
+
+
+if with_gallium_i915 and host_machine.cpu_family().startswith('x86')==False:
+  error('Intel "i915" Gallium driver requires x86 or x86_64 CPU family')
+
+
+# Determine whether or not the rt library is needed for time functions
+if host_machine.system()=='windows' or cc.has_function('clock_gettime'):
+  dep_clock=null_dep
+else:
+  dep_clock=cc.find_library('rt')
+
+
+# IMPORTANT: We can't upgrade Zlib beyond 1.2.5 because it would break Viewperf.
+dep_zlib=dependency('zlib',version='>= 1.2.3',allow_fallback=True,required=get_option('zlib'))
+if dep_zlib.found():
+  pre_args += ['-DHAVE_ZLIB'] if isinstance(pre_args, list) else '-DHAVE_ZLIB'
+
+
+dep_zstd=dependency('libzstd',required=get_option('zstd'))
+if dep_zstd.found():
+  pre_args += ['-DHAVE_ZSTD'] if isinstance(pre_args, list) else '-DHAVE_ZSTD'
+
+
+with_compression=dep_zlib.found() or dep_zstd.found()
+if with_compression:
+  pre_args += ['-DHAVE_COMPRESSION'] if isinstance(pre_args, list) else '-DHAVE_COMPRESSION'
+elif with_shader_cache:
+  error('Shader Cache requires compression')
+
+
+if host_machine.system()=='windows':
+  dep_thread=null_dep
+else:
+  dep_thread=dependency('threads')
+
+if dep_thread.found():
+  pre_args += ['-DHAVE_PTHREAD'] if isinstance(pre_args, list) else '-DHAVE_PTHREAD'
+  if host_machine.system()!='netbsd' and cc.has_function('pthread_setaffinity_np',dependencies=dep_thread,prefix='#include <pthread.h>',args='-D_GNU_SOURCE'):
+    pre_args += ['-DHAVE_PTHREAD_SETAFFINITY'] if isinstance(pre_args, list) else '-DHAVE_PTHREAD_SETAFFINITY'
+
+
+
+with_expat=get_option('expat').disable_auto_if(with_platform_android or with_platform_windows)
+
+if host_machine.system()=='darwin':
+  dep_expat=meson.get_compiler('c').find_library('expat',required=with_expat)
+else:
+  dep_expat=dependency('expat',allow_fallback=True,required=with_expat)
+
+
+# TODO: with Meson 1.1.0 this can be replaced with with_expat.enable_if(with_intel_tools)
+if with_intel_tools and not dep_expat.found():
+  error('Intel tools require expat')
+# We don't require expat on Android or Windows
+use_xmlconfig=get_option('xmlconfig').require(not(with_platform_android or with_platform_windows),error_message='xmlconfig not available on Android or Windows').require(dep_expat.found(),error_message='requires expat').allowed()# Predefined macros for windows
+if host_machine.system()=='windows':
+  pre_args += ['-DWIN32_LEAN_AND_MEAN'] if isinstance(pre_args, list) else '-DWIN32_LEAN_AND_MEAN' # http://msdn2.microsoft.com/en-us/library/6dwk3a1z.aspx
+# this only exists on linux so either this is linux and it will be found, or
+# it's not linux and wont
+dep_m=cc.find_library('m',required=False)
+
+if host_machine.system()=='windows':
+  dep_regex=meson.get_compiler('c').find_library('regex',required=False)
+  if not dep_regex.found():
+    dep_regex=declare_dependency(compile_args=['-DNO_REGEX'])
+
+else:
+  dep_regex=null_dep
+
+
+if with_platform_haiku:
+  dep_network=cc.find_library('network')
+
+
+dep_futex=null_dep
+if host_machine.system()=='windows':
+  if (get_option('min-windows-version')<8):
+    pre_args += ['-DWINDOWS_NO_FUTEX'] if isinstance(pre_args, list) else '-DWINDOWS_NO_FUTEX'
+  else:
+    dep_futex=cc.find_library('synchronization',required=True)
+
+
+
+# Check for libdrm. Various drivers have different libdrm version requirements,
+# but we always want to use the same version for all libdrm modules. That means
+# even if driver foo requires 2.4.0 and driver bar requires 2.4.3, if foo and
+# bar are both on use 2.4.3 for both of them
+dep_libdrm_amdgpu=null_dep
+dep_libdrm_radeon=null_dep
+dep_libdrm_intel=null_dep
+
+_drm_amdgpu_ver='2.4.121'
+_drm_radeon_ver='2.4.71'
+_drm_intel_ver='2.4.75'
+_drm_ver='2.4.109'
+
+_libdrm_checks=[['intel',with_gallium_i915],['amdgpu',(with_amd_vk and not with_platform_windows) or with_gallium_radeonsi],['radeon',(with_gallium_radeonsi or with_gallium_r300 or with_gallium_r600)],]
+
+# Loop over the enables versions and get the highest libdrm requirement for all
+# active drivers.
+_drm_blame=''
+for d in _libdrm_checks:
+  ver=get_variable('_drm_{}_ver'.format(d[0]))
+  if d[1] and ver.version_compare('>'+_drm_ver):
+    _drm_ver=ver
+    _drm_blame=d[0]
+
+
+if _drm_blame!='':
+  message('libdrm {} needed because {} has the highest requirement'.format(_drm_ver,_drm_blame))
+
+
+# Then get each libdrm module
+for d in _libdrm_checks:
+  if d[1]:
+    set_variable('dep_libdrm_'+d[0],dependency('libdrm_'+d[0],version='>='+_drm_ver))
+
+
+
+with_gallium_drisw_kms=False
+if system_has_kms_drm:
+  dep_libdrm=dependency('libdrm',version='>='+_drm_ver,required=(with_dri2 and host_machine.system()!='gnu') or with_dri3)
+else:
+  dep_libdrm=null_dep
+
+if dep_libdrm.found():
+  pre_args += ['-DHAVE_LIBDRM'] if isinstance(pre_args, list) else '-DHAVE_LIBDRM'
+  if with_dri_platform=='drm' and with_dri:
+    with_gallium_drisw_kms=True
+
+
+
+dep_libudev=dependency('libudev',required=False)
+if dep_libudev.found():
+  pre_args += ['-DHAVE_LIBUDEV'] if isinstance(pre_args, list) else '-DHAVE_LIBUDEV'
+
+
+llvm_modules=['bitwriter','engine','mcdisassembler','mcjit','core','executionengine','scalaropts','transformutils','instcombine']
+llvm_optional_modules=['coroutines']
+if with_amd_vk or with_gallium_radeonsi or with_gallium_r600:
+  llvm_modules+=['amdgpu','bitreader','ipo']
+  if with_gallium_r600:
+    llvm_modules += ['asmparser'] if isinstance(llvm_modules, list) else 'asmparser'
+
+
+if with_gallium_clover:
+  llvm_modules+=['linker','coverage','instrumentation','ipo','irreader','lto','option','objcarcopts','profiledata']  # windowsdriver is needded with LLVM>=15, but we don't know what LLVM verrsion we are using yet
+  llvm_optional_modules+=['all-targets','frontendopenmp','windowsdriver']
+
+if with_clc:
+  llvm_modules+=['coverage','target','linker','irreader','option','libdriver','lto']  # but we don't know what LLVM version we are using yet
+  llvm_optional_modules+=['all-targets','windowsdriver','frontendhlsl','frontenddriver']
+
+draw_with_llvm=get_option('draw-use-llvm')
+if draw_with_llvm:
+  llvm_modules += ['native'] if isinstance(llvm_modules, list) else 'native'
+  # lto is needded with LLVM>=15, but we don't know what LLVM verrsion we are using yet
+  llvm_optional_modules+=['lto']
+
+amd_with_llvm=get_option('amd-use-llvm')
+
+if with_amd_vk or with_gallium_radeonsi or with_clc:
+  _llvm_version='>= 15.0.0'
+elif with_gallium_clover:
+  _llvm_version='>= 11.0.0'
+else:
+  _llvm_version='>= 5.0.0'
+
+
+_shared_llvm=get_option('shared-llvm').disable_auto_if(host_machine.system()=='windows').allowed()
+
+_llvm=get_option('llvm')
+dep_llvm=null_dep
+with_llvm=False
+if _llvm.allowed():
+  dep_llvm=dependency('llvm',method='auto' if host_machine.system()=='windows' else 'config-tool',version=_llvm_version,modules=llvm_modules,optional_modules=llvm_optional_modules,required=(with_amd_vk or with_gallium_radeonsi or with_gallium_clover or with_clc or _llvm.enabled()),static=not _shared_llvm,fallback=['llvm','dep_llvm'],include_type='system',)
+  with_llvm=dep_llvm.found()
+
+if with_llvm:
+  pre_args += ['-DMESA_LLVM_VERSION_STRING="{}"'.format(dep_llvm.version())] if isinstance(pre_args, list) else '-DMESA_LLVM_VERSION_STRING="{}"'.format(dep_llvm.version())
+  pre_args += ['-DLLVM_IS_SHARED={}'.format(int(_shared_llvm))] if isinstance(pre_args, list) else '-DLLVM_IS_SHARED={}'.format(int(_shared_llvm))
+
+  if with_swrast_vk and not draw_with_llvm:
+    error('Lavapipe requires LLVM draw support.')
+
+
+  if with_gallium_r600 and not amd_with_llvm:
+    error('R600 requires LLVM AMD support.')
+
+
+  if host_machine.system()!='windows':
+    if dep_llvm.type_name()=='internal':
+      _llvm_rtti=subproject('llvm').get_variable('has_rtti',True)
+    else:
+      _llvm_rtti=['ON','YES'].count(dep_llvm.get_variable(cmake='LLVM_ENABLE_RTTI',configtool='has-rtti')) > 0
+
+    if _rtti!=_llvm_rtti:
+      if _llvm_rtti:
+        error('LLVM was built with RTTI, cannot build Mesa with RTTI disabled. Remove cpp_rtti disable switch or use LLVM built without LLVM_ENABLE_RTTI.')
+      else:
+        error('LLVM was built without RTTI, so Mesa must also disable RTTI. Use an LLVM built with LLVM_ENABLE_RTTI or add cpp_rtti=false.')
+
+
+
+
+  if cc.get_argument_syntax()=='msvc':
+    add_project_link_arguments('/ignore:4199',language=['c','cpp'],)
+
+elif with_amd_vk and with_aco_tests:
+  error('ACO tests require LLVM, but LLVM is disabled.')
+elif with_swrast_vk:
+  error('The following drivers require LLVM: Lavapipe. One of these is enabled, but LLVM is disabled.')
+elif with_gallium_clover:
+  error('The OpenCL "Clover" state tracker requires LLVM, but LLVM is disabled.')
+elif with_clc:
+  error('The CLC compiler requires LLVM, but LLVM is disabled.')
+else:
+  draw_with_llvm=False
+
+amd_with_llvm=amd_with_llvm and with_llvm
+pre_args += ['-DLLVM_AVAILABLE={}'.format(int(with_llvm))] if isinstance(pre_args, list) else '-DLLVM_AVAILABLE={}'.format(int(with_llvm))
+pre_args += ['-DDRAW_LLVM_AVAILABLE={}'.format(int((with_llvm and draw_with_llvm)))] if isinstance(pre_args, list) else '-DDRAW_LLVM_AVAILABLE={}'.format(int((with_llvm and draw_with_llvm)))
+pre_args += ['-DAMD_LLVM_AVAILABLE={}'.format(int(amd_with_llvm))] if isinstance(pre_args, list) else '-DAMD_LLVM_AVAILABLE={}'.format(int(amd_with_llvm))
+
+if with_clover_spirv or with_clc:
+  chosen_llvm_version_array=dep_llvm.version().split('.')
+  chosen_llvm_version_major=int(chosen_llvm_version_array[0])
+  chosen_llvm_version_minor=int(chosen_llvm_version_array[1])  # we do not want to accept SPIRV-LLVM-Translator 8.0.0.1 as that version
+  # does not have the required API and those are only available starting from
+  # 8.0.1.3.
+  _llvmspirvlib_min_version='>= 8.0.1.3'
+  if with_clc:
+    _llvmspirvlib_min_version='>= 15.0.0.0'
+
+
+  _llvmspirvlib_version=[_llvmspirvlib_min_version,'>= {}.{}'.format(chosen_llvm_version_major,chosen_llvm_version_minor),'< {}.{}'.format(chosen_llvm_version_major,chosen_llvm_version_minor+1)]
+
+  dep_spirv_tools=dependency('SPIRV-Tools',required=True,version='>= 2018.0')
+  # LLVMSPIRVLib is available at https://github.com/KhronosGroup/SPIRV-LLVM-Translator
+  dep_llvmspirvlib=dependency('LLVMSPIRVLib',required=True,version=_llvmspirvlib_version)
+else:
+  dep_spirv_tools=null_dep
+  dep_llvmspirvlib=null_dep
+
+
+dep_clang=null_dep
+if with_clc:
+  llvm_libdir=dep_llvm.get_variable(cmake='LLVM_LIBRARY_DIR',configtool='libdir')
+
+  dep_clang=cpp.find_library('clang-cpp',dirs=llvm_libdir,required=False)
+
+  if not dep_clang.found() or not _shared_llvm:
+    clang_modules=['clangBasic','clangAST','clangCodeGen','clangLex','clangDriver','clangFrontend','clangFrontendTool','clangHandleCXX','clangHandleLLVM','clangSerialization','clangSema','clangParse','clangEdit','clangAnalysis']
+    if dep_llvm.version().version_compare('>= 15.0'):
+      clang_modules += ['clangSupport'] if isinstance(clang_modules, list) else 'clangSupport'
+
+    if dep_llvm.version().version_compare('>= 16.0'):
+      clang_modules += ['clangASTMatchers'] if isinstance(clang_modules, list) else 'clangASTMatchers'
+
+    if dep_llvm.version().version_compare('>= 18.0'):
+      clang_modules += ['clangAPINotes'] if isinstance(clang_modules, list) else 'clangAPINotes'
+
+
+    dep_clang=[]
+    for m in clang_modules:
+      dep_clang+=cpp.find_library(m,dirs=llvm_libdir,required=True)
+
+
+# up random libs with the generic name 'libversion'
+dep_version=null_dep
+if host_machine.system()=='windows':
+  dep_version=cpp.find_library('version')
+
+
+dep_elf=dependency('libelf',required=False)
+if not with_platform_windows and not dep_elf.found():
+  dep_elf=cc.find_library('elf',required=False)
+
+if dep_elf.found():
+  pre_args += ['-DUSE_LIBELF'] if isinstance(pre_args, list) else '-DUSE_LIBELF'
+elif with_gallium_radeonsi:
+  error('Gallium driver radeonsi requires libelf')
+
+
+dep_valgrind=dependency('valgrind',required=get_option('valgrind'))
+if dep_valgrind.found():
+  pre_args += ['-DHAVE_VALGRIND'] if isinstance(pre_args, list) else '-DHAVE_VALGRIND'
+# AddressSanitizer's leak reports need all the symbols to be present at exit to
+# decode well, which runs afoul of our dlopen()/dlclose()ing of the DRI drivers.
+# Set a flag so we can skip the dlclose for asan builds.
+if ['address','address,undefined'].count(get_option('b_sanitize')) > 0:
+  asan_c_args=['-DBUILT_WITH_ASAN=1']
+else:
+  asan_c_args=['-DBUILT_WITH_ASAN=0']
+# so add a define to work silence these issues.
+if get_option('b_sanitize')=='thread':
+  pre_args += ['-DTHREAD_SANITIZER=1'] if isinstance(pre_args, list) else '-DTHREAD_SANITIZER=1'# meson versions prior to 1.4 will warn "Consider using the built-in option for sanitizers ..."
+  # later on because it only checks whether the option starts with "-fsanitize",
+  # but there is no built-in option for adding a blacklist
+  tsan_blacklist='-fsanitize-blacklist={}'.format(join_paths(meson.project_source_root(),'build-support','tsan-blacklist.txt'))
+  if cc.has_argument(tsan_blacklist):
+    pre_args+=tsan_blacklist
+  else:
+    warning('Compiler does not support "-fsanitize-blacklist", expected race conditions will not be surpressed')
+
+else:
+  pre_args += ['-DTHREAD_SANITIZER=0'] if isinstance(pre_args, list) else '-DTHREAD_SANITIZER=0'
+
+
+yacc_is_bison=True
+needs_flex_bison=with_any_opengl or with_freedreno_vk or with_intel_tools or with_gallium
+
+if build_machine.system()=='windows':
+  prog_flex=find_program('win_flex',required=False)
+  if prog_flex.found():
+    prog_flex=[prog_flex,'--wincompat']
+  else:
+    prog_flex=[find_program('flex','lex',required=needs_flex_bison,disabler=True)]
+# Force flex to use const keyword in prototypes, as relies on __cplusplus or
+  # __STDC__ macro to determine whether it's safe to use const keyword
+  prog_flex += ['-DYY_USE_CONST='] if isinstance(prog_flex, list) else '-DYY_USE_CONST='
+
+  prog_flex_cpp=prog_flex# Note that we are using a C99 version here rather than C11,
+  # because using a C11 version can cause the MSVC CRT headers to define
+  # static_assert to _Static_assert, which breaks other parts of the CRT
+  prog_flex_cpp += ['-D__STDC_VERSION__=199901'] if isinstance(prog_flex_cpp, list) else '-D__STDC_VERSION__=199901'
+
+  prog_bison=find_program('win_bison',required=False)
+  if not prog_bison.found():
+    prog_bison=find_program('bison','yacc',required=needs_flex_bison,disabler=True)
+
+else:
+  prog_bison=find_program('bison',required=False)
+
+  if not prog_bison.found():
+    prog_bison=find_program('byacc',required=needs_flex_bison,disabler=True)
+    yacc_is_bison=False
+  # https://gitlab.freedesktop.org/mesa/mesa/merge_requests/2161
+  if find_program('bison',required=False,version='> 2.3').found():
+    prog_bison=[prog_bison,'-Wno-deprecated']
+
+
+  prog_flex=find_program('flex',required=needs_flex_bison,disabler=True)
+  prog_flex_cpp=prog_flex
+
+
+dep_selinux=null_dep
+if get_option('selinux'):
+  dep_selinux=dependency('libselinux')
+  pre_args += ['-DMESA_SELINUX'] if isinstance(pre_args, list) else '-DMESA_SELINUX'
+
+
+_libunwind=get_option('libunwind').require(not with_platform_android,error_message='Android requires the use of the backtrace library, not libunwind')
+if host_machine.system()=='darwin':
+  dep_unwind=meson.get_compiler('c').find_library('System',required=_libunwind)
+else:
+  dep_unwind=dependency('libunwind',required=_libunwind)
+
+if dep_unwind.found():
+  pre_args += ['-DHAVE_LIBUNWIND'] if isinstance(pre_args, list) else '-DHAVE_LIBUNWIND'
+
+
+if with_osmesa:
+  if not with_gallium_softpipe:
+    error('OSMesa gallium requires gallium softpipe or llvmpipe.')
+
+  if host_machine.system()=='windows':
+    osmesa_lib_name='osmesa'
+  else:
+    osmesa_lib_name='OSMesa'
+
+# TODO: symbol mangling
+
+if with_platform_wayland:
+  dep_wl_scanner=dependency('wayland-scanner',native=True)
+  prog_wl_scanner=find_program(dep_wl_scanner.get_variable(pkgconfig='wayland_scanner'))
+  if dep_wl_scanner.version().version_compare('>= 1.15'):
+    wl_scanner_arg='private-code'
+  else:
+    wl_scanner_arg='code'
+
+  dep_wl_protocols=dependency('wayland-protocols',version='>= 1.34')
+  dep_wayland_client=dependency('wayland-client',version='>=1.18')
+  dep_wayland_server=dependency('wayland-server',version='>=1.18')
+  if with_egl:
+    dep_wayland_egl=dependency('wayland-egl-backend',version='>= 3')
+    dep_wayland_egl_headers=dep_wayland_egl.partial_dependency(compile_args=True)
+
+  pre_args += ['-DWL_HIDE_DEPRECATED'] if isinstance(pre_args, list) else '-DWL_HIDE_DEPRECATED'
+  if cc.has_function('wl_display_dispatch_queue_timeout',prefix='#include <wayland-client.h>',dependencies=dep_wayland_client):
+    pre_args+=['-DHAVE_WL_DISPATCH_QUEUE_TIMEOUT']
+
+  if cc.has_function('wl_display_create_queue_with_name',prefix='#include <wayland-client.h>',dependencies=dep_wayland_client):
+    pre_args+=['-DHAVE_WL_CREATE_QUEUE_WITH_NAME']
+
+
+
+dep_x11=null_dep
+dep_xext=null_dep
+dep_xfixes=null_dep
+dep_x11_xcb=null_dep
+dep_xcb=null_dep
+dep_xcb_keysyms=null_dep
+dep_xcb_glx=null_dep
+dep_xcb_dri2=null_dep
+dep_xcb_dri3=null_dep
+dep_dri2proto=null_dep
+dep_glproto=null_dep
+dep_xxf86vm=null_dep
+dep_xcb_dri3=null_dep
+dep_xcb_present=null_dep
+dep_xcb_sync=null_dep
+dep_xcb_xfixes=null_dep
+dep_xshmfence=null_dep
+dep_xcb_xrandr=null_dep
+dep_xcb_shm=null_dep
+dep_xlib_xrandr=null_dep
+dep_openmp=null_dep
+
+# Even if we find OpenMP, Gitlab CI fails to link with gcc/i386 and clang/anyarch.
+if host_machine.cpu_family()=='x86_64' and cc.get_id()=='gcc':
+  dep_openmp=dependency('openmp',required=False)
+  if dep_openmp.found():
+    pre_args+=['-DHAVE_OPENMP']
+
+
+
+with_dri3_modifiers=False
+with_dri3_explicit_sync=False
+with_xcb_keysyms=False
+if with_platform_x11:
+  if with_glx=='xlib':
+    dep_x11=dependency('x11')
+    dep_xext=dependency('xext')
+    dep_xcb=dependency('xcb')
+    dep_xcb_xrandr=dependency('xcb-randr')
+  elif with_glx=='dri':
+    dep_x11=dependency('x11')
+    dep_xext=dependency('xext')
+    dep_xfixes=dependency('xfixes',version='>= 2.0')
+    dep_xcb_glx=dependency('xcb-glx',version='>= 1.8.1')
+    dep_xcb_shm=dependency('xcb-shm')
+  elif with_gallium_rusticl:
+    dep_x11=dependency('x11')
+
+  if (with_any_vk or with_glx=='dri' or with_egl or (with_gallium_vdpau or with_gallium_va or with_gallium_omx!='disabled')):
+    dep_xcb=dependency('xcb')
+    dep_xcb_keysyms=dependency('xcb-keysyms',required=False)
+    with_xcb_keysyms=dep_xcb_keysyms.found()
+    if with_xcb_keysyms:
+      pre_args += ['-DXCB_KEYSYMS_AVAILABLE'] if isinstance(pre_args, list) else '-DXCB_KEYSYMS_AVAILABLE'
+
+    dep_x11_xcb=dependency('x11-xcb')
+    dep_xcb_dri2=dependency('xcb-dri2',version='>= 1.8')
+    if with_dri_platform=='drm' and not dep_libdrm.found():
+      error('libdrm required for gallium video statetrackers when using x11')
+
+
+  if with_any_vk or with_egl or (with_glx=='dri' and with_dri_platform=='drm'):
+    dep_xcb_dri2=dependency('xcb-dri2',version='>= 1.8')
+
+    if with_dri3:
+      dep_xcb_dri3=dependency('xcb-dri3')
+      dep_xcb_present=dependency('xcb-present')# until xcb-dri3 has been around long enough to make a hard-dependency:
+      if (dep_xcb_dri3.version().version_compare('>= 1.13') and dep_xcb_present.version().version_compare('>= 1.13')):
+        with_dri3_modifiers=True
+
+      if (dep_xcb_dri3.version().version_compare('>= 1.17') and dep_xcb_present.version().version_compare('>= 1.17')):
+        with_dri3_explicit_sync=True
+
+      dep_xcb_shm=dependency('xcb-shm')
+      dep_xcb_sync=dependency('xcb-sync')
+      dep_xshmfence=dependency('xshmfence',version='>= 1.1')
+
+
+  if with_glx=='dri' or with_glx=='xlib':
+    dep_glproto=dependency('glproto',version='>= 1.4.14')
+
+  if with_glx=='dri':
+    if with_dri_platform=='drm':
+      dep_dri2proto=dependency('dri2proto',version='>= 2.8')
+      if with_glx_direct:
+        dep_xxf86vm=dependency('xxf86vm')
+
+
+
+  if (with_egl or with_dri3 or (with_gallium_vdpau or with_gallium_xa or with_gallium_omx!='disabled')):
+    dep_xcb_xfixes=dependency('xcb-xfixes')
+
+  if with_xlib_lease or with_any_vk:
+    dep_xcb_xrandr=dependency('xcb-randr')
+
+  if with_xlib_lease:
+    dep_xlib_xrandr=dependency('xrandr',version='>= 1.3')
+
+
+
+if with_dri:
+  pre_args += ['-DHAVE_DRI'] if isinstance(pre_args, list) else '-DHAVE_DRI'
+
+if with_dri2:
+  pre_args += ['-DHAVE_DRI2'] if isinstance(pre_args, list) else '-DHAVE_DRI2'
+
+if with_dri3:
+  pre_args += ['-DHAVE_DRI3'] if isinstance(pre_args, list) else '-DHAVE_DRI3'
+
+if with_dri3_modifiers:
+  pre_args += ['-DHAVE_DRI3_MODIFIERS'] if isinstance(pre_args, list) else '-DHAVE_DRI3_MODIFIERS'
+
+if with_dri3_explicit_sync:
+  pre_args += ['-DHAVE_DRI3_EXPLICIT_SYNC'] if isinstance(pre_args, list) else '-DHAVE_DRI3_EXPLICIT_SYNC'
+
+if with_gallium_drisw_kms:
+  pre_args += ['-DHAVE_DRISW_KMS'] if isinstance(pre_args, list) else '-DHAVE_DRISW_KMS'
+
+
+if get_option('gallium-extra-hud'):
+  pre_args += ['-DHAVE_GALLIUM_EXTRA_HUD=1'] if isinstance(pre_args, list) else '-DHAVE_GALLIUM_EXTRA_HUD=1'
+
+
+dep_lmsensors=cc.find_library('sensors',required=get_option('lmsensors'))
+if dep_lmsensors.found():
+  pre_args += ['-DHAVE_LIBSENSORS=1'] if isinstance(pre_args, list) else '-DHAVE_LIBSENSORS=1'
+
+
+_shader_replacement=get_option('custom-shader-replacement')
+if _shader_replacement=='':
+  noop()
+else:
+  pre_args += ['-DCUSTOM_SHADER_REPLACEMENT'] if isinstance(pre_args, list) else '-DCUSTOM_SHADER_REPLACEMENT'
+
+
+with_perfetto=get_option('perfetto')
+with_datasources=get_option('datasources')
+with_any_datasource=len(with_datasources)!=0
+if with_perfetto:
+  dep_perfetto=dependency('perfetto',fallback=['perfetto','dep_perfetto'])
+  pre_args += ['-DHAVE_PERFETTO'] if isinstance(pre_args, list) else '-DHAVE_PERFETTO'
+
+
+with_teflon=get_option('teflon')
+if with_teflon and with_tests:
+  dep_xtensor=dependency('xtensor')
+  dep_flatbuffers=dependency('flatbuffers')
+  prog_flatc=find_program('flatc')
+
+
+with_gpuvis=get_option('gpuvis')
+if with_gpuvis:
+  pre_args += ['-DHAVE_GPUVIS'] if isinstance(pre_args, list) else '-DHAVE_GPUVIS'
+
+
+add_project_arguments(pre_args,language=['c','cpp'])
+add_project_arguments(c_cpp_args,language=['c','cpp'])
+
+add_project_arguments(c_args,language=['c'])
+add_project_arguments(cpp_args,language=['cpp'])
+
+gl_priv_reqs=[]
+
+if with_glx=='xlib':
+  gl_priv_reqs+=['x11','xext','xcb']
+elif with_glx=='dri':
+  gl_priv_reqs+=['x11','xext','xfixes','x11-xcb','xcb','xcb-glx >= 1.8.1']
+  if with_dri_platform=='drm':
+    gl_priv_reqs += ['xcb-dri2 >= 1.8'] if isinstance(gl_priv_reqs, list) else 'xcb-dri2 >= 1.8'
+    if with_glx_direct:
+      gl_priv_reqs += ['xxf86vm'] if isinstance(gl_priv_reqs, list) else 'xxf86vm'
+
+
+
+if dep_libdrm.found():
+  gl_priv_reqs += ['libdrm >= 2.4.75'] if isinstance(gl_priv_reqs, list) else 'libdrm >= 2.4.75'
+
+
+gl_priv_libs=[]
+if dep_thread.found():
+  gl_priv_libs+=['-lpthread','-pthread']
+
+if dep_m.found():
+  gl_priv_libs += ['-lm'] if isinstance(gl_priv_libs, list) else '-lm'
+
+if dep_dl.found():
+  gl_priv_libs += ['-ldl'] if isinstance(gl_priv_libs, list) else '-ldl'
+# FIXME: autotools lists this as incomplete
+gbm_priv_libs=[]
+if dep_dl.found():
+  gbm_priv_libs += ['-ldl'] if isinstance(gbm_priv_libs, list) else '-ldl'
+
+
+pkg=module_import('pkgconfig')
+
+if host_machine.system()=='windows':
+  prog_dumpbin=find_program('dumpbin',required=False)
+  with_symbols_check=prog_dumpbin.found() and with_tests
+  if with_symbols_check:
+    symbols_check_args=['--dumpbin',prog_dumpbin.full_path()]
+
+else:
+  prog_nm=find_program('nm')
+  with_symbols_check=with_tests
+  symbols_check_args=['--nm',prog_nm.full_path()]
+
+
+# This quirk needs to be applied to sources with functions defined in assembly
+# as GCC LTO drops them. See: https://bugs.freedesktop.org/show_bug.cgi?id=109391
+gcc_lto_quirk=['-fno-lto'] if (cc.get_id()=='gcc') else []# As of GCC 13.2.1, Venus build with optimization level plain/0 and LTO does not
+# compile properly: https://gitlab.freedesktop.org/mesa/mesa/-/issues/11006
+if with_virtio_vk and cc.get_id()=='gcc' and (get_option('optimization')=='0' or get_option('optimization')=='plain') and get_option('b_lto')==True:
+  error('Venus does not compile properly with GCC + optimization level plain/0 + LTO.')
+
+
+devenv=environment()
+
+dir_compiler_nir=join_paths(meson.current_source_dir(),'src/compiler/nir/')
+dir_source_root=meson.project_source_root()
+
+
+set_relative_dir('include')
+########################################################################################################################
+### Begin conversion from: include/meson.build
+########################################################################################################################
+inc_include=[include_directories('.')]
+inc_d3d9=include_directories('D3D9')
+inc_winddk=include_directories('winddk')# inc_include when using the stub.
+if with_android_stub:
+  inc_include+=[include_directories('android_stub')]
+
+
+if not with_glvnd and host_machine.system()!='windows':
+  if with_gles1 or with_gles2 or with_opengl or with_egl:
+    install_headers('KHR/khrplatform.h',subdir='KHR')
+
+
+  if with_gles1:
+    install_headers('GLES/egl.h','GLES/gl.h','GLES/glext.h','GLES/glplatform.h',subdir='GLES',)
+
+
+  if with_gles2:
+    install_headers('GLES2/gl2.h','GLES2/gl2ext.h','GLES2/gl2platform.h',subdir='GLES2',)
+    install_headers('GLES3/gl3.h','GLES3/gl31.h','GLES3/gl32.h','GLES3/gl3ext.h','GLES3/gl3platform.h',subdir='GLES3',)
+
+
+  if with_opengl:
+    install_headers('GL/gl.h','GL/glcorearb.h','GL/glext.h',subdir='GL',)
+
+
+  if with_glx!='disabled':
+    install_headers('GL/glx.h','GL/glxext.h',subdir='GL')
+
+
+  if with_egl:
+    install_headers('EGL/egl.h','EGL/eglext.h','EGL/eglplatform.h',subdir='EGL',)
+
+# Non-upstream headers
+if with_egl:
+  install_headers('EGL/eglext_angle.h','EGL/eglmesaext.h',subdir='EGL',)
+
+
+if with_osmesa:
+  install_headers('GL/osmesa.h',subdir='GL')
+
+
+if with_dri:
+  install_headers('GL/internal/dri_interface.h',subdir='GL/internal')
+
+
+if with_gallium_st_nine:
+  install_headers('d3dadapter/d3dadapter9.h','d3dadapter/drm.h','d3dadapter/present.h',subdir='d3dadapter',)
+
+
+opencl_headers=files('CL/cl.h','CL/cl.hpp','CL/cl2.hpp','CL/cl_d3d10.h','CL/cl_d3d11.h','CL/cl_dx9_media_sharing.h','CL/cl_dx9_media_sharing_intel.h','CL/cl_egl.h','CL/cl_ext.h','CL/cl_ext_intel.h','CL/cl_gl.h','CL/cl_gl_ext.h','CL/cl_icd.h','CL/cl_platform.h','CL/cl_va_api_media_sharing_intel.h','CL/cl_version.h','CL/opencl.h','CL/opencl.hpp',)
+# Only install the headers if we are building a stand alone implementation and
+# not an ICD enabled implementation
+if with_gallium_clover and not with_opencl_icd:
+  install_headers(opencl_headers,subdir='CL')
+
+
+########################################################################################################################
+### End conversion from: include/meson.build
+########################################################################################################################
+set_relative_dir('')
+set_relative_dir('bin')
+########################################################################################################################
+### Begin conversion from: bin/meson.build
+########################################################################################################################
+git_sha1_gen_py=files('git_sha1_gen.py')
+gen_vs_module_defs_py=files('gen_vs_module_defs.py')
+gen_vs_module_defs_normal_command=[prog_python,gen_vs_module_defs_py,'--in_file','@INPUT@','--out_file','@OUTPUT@','--compiler_abi',cc.get_argument_syntax(),'--compiler_id',cc.get_id(),'--cpu_family',host_machine.cpu_family()]
+symbols_check=find_program('symbols-check.py')
+install_megadrivers_py=find_program('install_megadrivers.py')
+
+########################################################################################################################
+### End conversion from: bin/meson.build
+########################################################################################################################
+set_relative_dir('')
+set_relative_dir('src')
+########################################################################################################################
+### Begin conversion from: src/meson.build
+########################################################################################################################
+set_relative_dir('src/gtest')
+########################################################################################################################
+### Begin conversion from: src/gtest/meson.build
+########################################################################################################################
+libgtest=static_library('gtest',files('src/gtest-all.cc','src/gtest_main.cc'),include_directories=include_directories('include'),override_options='warning_level=1',build_by_default=False,)
+
+idep_gtest=declare_dependency(link_with=libgtest,include_directories=include_directories('include',is_system=True),dependencies=[dep_thread],)
+
+########################################################################################################################
+### End conversion from: src/gtest/meson.build
+########################################################################################################################
+set_relative_dir('src')
+set_relative_dir('src/c11/impl')
+########################################################################################################################
+### Begin conversion from: src/c11/impl/meson.build
+########################################################################################################################
+inc_util_c11=[include_directories('../..')]
+
+files_mesa_util_c11=files('time.c',)
+
+if with_c11_threads:
+  noop()
+elif host_machine.system()=='windows':
+  files_mesa_util_c11 += ['threads_win32.c'] if isinstance(files_mesa_util_c11, list) else 'threads_win32.c'
+  files_mesa_util_c11 += ['threads_win32_tls_callback.cpp'] if isinstance(files_mesa_util_c11, list) else 'threads_win32_tls_callback.cpp'
+else:
+  files_mesa_util_c11 += ['threads_posix.c'] if isinstance(files_mesa_util_c11, list) else 'threads_posix.c'
+
+
+_libmesa_util_c11=static_library('mesa_util_c11',[files_mesa_util_c11],include_directories=inc_util_c11,c_args=[c_msvc_compat_args],gnu_symbol_visibility='hidden',build_by_default=False)
+
+idep_mesautilc11=declare_dependency(link_with=_libmesa_util_c11,include_directories=inc_util_c11,dependencies=[dep_clock,dep_thread,dep_atomic,dep_m,dep_valgrind],)
+
+########################################################################################################################
+### End conversion from: src/c11/impl/meson.build
+########################################################################################################################
+set_relative_dir('src')
+set_relative_dir('src/android_stub')
+########################################################################################################################
+### Begin conversion from: src/android_stub/meson.build
+########################################################################################################################
+if with_android_stub:
+  stub_libs=[]
+  lib_names=['cutils','hardware','log','nativewindow','sync']
+
+  if with_libbacktrace:
+    lib_names+=['backtrace']
+
+
+  for lib in lib_names:
+    stub_libs+=shared_library(lib,files(lib+'_stub.cpp'),include_directories=inc_include,install=False,)
+
+
+  dep_android=declare_dependency(link_with=stub_libs,)
+
+
+########################################################################################################################
+### End conversion from: src/android_stub/meson.build
+########################################################################################################################
+set_relative_dir('src')
+set_relative_dir('src/util')
+########################################################################################################################
+### Begin conversion from: src/util/meson.build
+########################################################################################################################
+inc_util=[inc_include,include_directories('..')]
+
+if with_platform_android:
+  set_relative_dir('src/util/u_gralloc')
+  ########################################################################################################################
+  ### Begin conversion from: src/util/u_gralloc/meson.build
+  ########################################################################################################################
+  c_args_for_u_gralloc=[]
+  cpp_args_for_u_gralloc=[]
+  options_for_u_gralloc=[]
+  deps_for_u_gralloc=[dep_android]
+  
+  files_u_gralloc=files('u_gralloc.c','u_gralloc_internal.c','u_gralloc_fallback.c','u_gralloc_cros_api.c','u_gralloc_libdrm.c','u_gralloc_qcom.c',)
+  
+  if dep_android_mapper4.found():
+    files_u_gralloc+=files('u_gralloc_imapper4_api.cpp')
+    c_args_for_u_gralloc += ['-DUSE_IMAPPER4_METADATA_API'] if isinstance(c_args_for_u_gralloc, list) else '-DUSE_IMAPPER4_METADATA_API'
+    cpp_args_for_u_gralloc += ['-DUSE_IMAPPER4_METADATA_API'] if isinstance(cpp_args_for_u_gralloc, list) else '-DUSE_IMAPPER4_METADATA_API'
+    options_for_u_gralloc += ['cpp_std=c++17'] if isinstance(options_for_u_gralloc, list) else 'cpp_std=c++17'
+    deps_for_u_gralloc+=dep_android_mapper4
+  
+  
+  if with_freedreno_vk or with_gallium_freedreno:
+    c_args_for_u_gralloc += ['-DHAS_FREEDRENO'] if isinstance(c_args_for_u_gralloc, list) else '-DHAS_FREEDRENO'
+  
+  
+  _libmesa_u_gralloc=static_library('_mesa_u_gralloc',[files_u_gralloc],include_directories=[inc_include,inc_util],c_args=c_args_for_u_gralloc,cpp_args=cpp_args_for_u_gralloc,override_options=options_for_u_gralloc,gnu_symbol_visibility='hidden',build_by_default=False,dependencies=deps_for_u_gralloc,)
+  
+  idep_u_gralloc=declare_dependency(link_with=_libmesa_u_gralloc)
+  
+  ########################################################################################################################
+  ### End conversion from: src/util/u_gralloc/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/util')
+
+
+set_relative_dir('src/util/blake3')
+########################################################################################################################
+### Begin conversion from: src/util/blake3/meson.build
+########################################################################################################################
+files_blake3=['blake3.c','blake3_dispatch.c','blake3_portable.c']
+blake3_defs=[]
+
+is_windows=host_machine.system()=='windows'
+is_msvc=meson.get_compiler('c').get_id()=='msvc'
+cpu_family=host_machine.cpu_family()
+
+blake3_x86_no_simd_defs=['-DBLAKE3_NO_SSE2','-DBLAKE3_NO_SSE41','-DBLAKE3_NO_AVX2','-DBLAKE3_NO_AVX512']
+
+if cpu_family=='x86_64':
+  if is_windows:
+    if is_msvc:
+      if meson.backend()=='ninja' and add_languages('masm',required=False):
+        files_blake3+=['blake3_sse2_x86-64_windows_msvc.masm','blake3_sse41_x86-64_windows_msvc.masm','blake3_avx2_x86-64_windows_msvc.masm','blake3_avx512_x86-64_windows_msvc.masm']
+      else:
+        blake3_defs+=blake3_x86_no_simd_defs
+
+    else:
+      files_blake3+=['blake3_sse2_x86-64_windows_gnu.S','blake3_sse41_x86-64_windows_gnu.S','blake3_avx2_x86-64_windows_gnu.S','blake3_avx512_x86-64_windows_gnu.S']
+
+  else:
+    files_blake3+=['blake3_sse2_x86-64_unix.S','blake3_sse41_x86-64_unix.S','blake3_avx2_x86-64_unix.S','blake3_avx512_x86-64_unix.S']
+
+elif cpu_family=='x86':
+  blake3_defs+=blake3_x86_no_simd_defs
+elif cpu_family=='aarch64':
+  files_blake3+=['blake3_neon.c']
+
+
+blake3=static_library('blake3',files_blake3,c_args=blake3_defs,gnu_symbol_visibility='hidden',)
+
+idep_blake3=declare_dependency(link_with=blake3,)
+
+########################################################################################################################
+### End conversion from: src/util/blake3/meson.build
+########################################################################################################################
+set_relative_dir('src/util')
+
+files_mesa_util=files('anon_file.h','anon_file.c','bigmath.h','bitscan.c','bitscan.h','bitset.h','blend.h','blob.c','blob.h','box.h','build_id.c','build_id.h','cnd_monotonic.c','cnd_monotonic.h','compiler.h','compress.c','compress.h','thread_sched.c','thread_sched.h','crc32.c','crc32.h','dag.c','disk_cache.c','disk_cache.h','disk_cache_os.c','disk_cache_os.h','double.c','double.h','enum_operators.h','fast_idiv_by_const.c','fast_idiv_by_const.h','format_r11g11b10f.h','format_rgb9e5.h','format_srgb.h','fossilize_db.c','fossilize_db.h','futex.c','futex.h','glheader.h','half_float.c','half_float.h','hash_table.c','hash_table.h','hex.h','u_idalloc.c','u_idalloc.h','list.h','log.c','macros.h','memstream.c','memstream.h','mesa-sha1.c','mesa-sha1.h','mesa-blake3.c','mesa-blake3.h','os_time.c','os_time.h','os_file.c','os_memory_fd.c','os_misc.c','os_misc.h','os_socket.c','os_socket.h','ptralloc.h','perf/u_trace.h','perf/u_trace.c','perf/u_trace_priv.h','u_process.c','u_process.h','u_qsort.cpp','u_qsort.h','rwlock.c','rwlock.h','sha1/sha1.c','sha1/sha1.h','ralloc.c','ralloc.h','rand_xor.c','rand_xor.h','rb_tree.c','rb_tree.h','register_allocate.c','register_allocate.h','rgtc.c','rgtc.h','rounding.h','set.c','set.h','simple_mtx.c','simple_mtx.h','slab.c','slab.h','softfloat.c','softfloat.h','sparse_array.c','sparse_array.h','string_buffer.c','string_buffer.h','strndup.h','strtod.c','strtod.h','texcompress_astc_luts.cpp','texcompress_astc_luts.h','texcompress_astc_luts_wrap.cpp','texcompress_astc_luts_wrap.h','timespec.h','u_atomic.c','u_atomic.h','u_call_once.c','u_call_once.h','u_dl.c','u_dl.h','u_dynarray.c','u_dynarray.h','u_endian.h','u_hash_table.c','u_hash_table.h','u_pointer.h','u_queue.c','u_queue.h','u_string.h','u_thread.c','u_thread.h','u_vector.c','u_vector.h','u_math.c','u_math.h','u_memset.h','u_mm.c','u_mm.h','u_pack_color.h','u_debug.c','u_debug.h','u_debug_memory.c','u_cpu_detect.c','u_cpu_detect.h','u_printf.c','u_printf.h','u_worklist.c','u_worklist.h','vl_vlc.h','vl_rbsp.h','vl_zscan_data.h','vl_zscan_data.c','vma.c','vma.h','xxhash.h','mesa_cache_db.c','mesa_cache_db.h','mesa_cache_db_multipart.c','mesa_cache_db_multipart.h',)
+
+files_drirc=files('00-mesa-defaults.conf')
+
+if with_amd_vk:
+  files_drirc+=files('00-radv-defaults.conf')
+
+
+if with_tests:
+  prog_xmllint=find_program('xmllint',required=False,native=True)
+  if prog_xmllint.found():
+    test('drirc xml validation',prog_xmllint,args=['--noout','--valid',files_drirc],suite=['util'],)
+
+
+
+files_xmlconfig=files('xmlconfig.c','xmlconfig.h',)
+
+files_xmlconfig+=custom_target('driconf_static.h',input=['driconf_static.py']+files_drirc,output='driconf_static.h',command=[prog_python,'@INPUT@','@OUTPUT@',],)
+
+format_srgb=custom_target('format_srgb',input=['format_srgb.py'],output='format_srgb.c',command=[prog_python,'@INPUT0@'],capture=True,)
+
+deps_for_libmesa_util=[dep_zlib,dep_clock,dep_thread,dep_atomic,dep_m,dep_valgrind,dep_zstd,dep_dl,dep_unwind,dep_futex,idep_blake3,idep_mesautilc11]
+
+if with_platform_android:
+  deps_for_libmesa_util+=dep_android
+  files_debug_stack=files('u_debug_stack_android.cpp')
+else:
+  files_debug_stack=files('dbghelp.h','u_debug_stack.c','u_debug_symbol.c','u_debug_symbol.h',)
+
+
+if with_platform_haiku:
+  deps_for_libmesa_util+=dep_network
+
+
+if with_perfetto:
+  files_mesa_util+=files('perf/u_perfetto.cc','perf/u_perfetto.h',)
+  deps_for_libmesa_util+=dep_perfetto
+
+
+if with_gpuvis:
+  files_mesa_util+=files('perf/u_gpuvis.c','perf/u_gpuvis.h','perf/gpuvis_trace_utils.h',)
+
+
+u_trace_py=files('perf/u_trace.py')
+
+libmesa_util_sse41=static_library('mesa_util_sse41',files('streaming-load-memcpy.c'),c_args=[c_msvc_compat_args,sse41_args],include_directories=[inc_util],gnu_symbol_visibility='hidden',)# subdir format provide files_mesa_format
+set_relative_dir('src/util/format')
+########################################################################################################################
+### Begin conversion from: src/util/format/meson.build
+########################################################################################################################
+files_mesa_format=files('u_format.c','u_format_bptc.c','u_format_etc.c','u_format_fxt1.c','u_format_latc.c','u_format_other.c','u_format_rgtc.c','u_format_s3tc.c','u_format_tests.c','u_format_unpack_neon.c','u_format_yuv.c','u_format_zs.c',)
+
+u_format_pack_h=custom_target('u_format_pack.h',input=['u_format_table.py','u_format.csv'],output='u_format_pack.h',command=[prog_python,'@INPUT@','--header'],depend_files=files('u_format_pack.py','u_format_parse.py'),capture=True,)
+
+u_format_table_c=custom_target('u_format_table.c',input=['u_format_table.py','u_format.csv'],output='u_format_table.c',command=[prog_python,'@INPUT@'],depend_files=files('u_format_pack.py','u_format_parse.py'),capture=True,)
+
+files_mesa_format+=[u_format_pack_h,u_format_table_c]
+
+########################################################################################################################
+### End conversion from: src/util/format/meson.build
+########################################################################################################################
+set_relative_dir('src/util')
+files_mesa_util+=files_mesa_format
+
+_libmesa_util=static_library('mesa_util',[files_mesa_util,files_debug_stack,format_srgb],include_directories=[inc_util,include_directories('format')],dependencies=deps_for_libmesa_util,link_with=[libmesa_util_sse41],c_args=[c_msvc_compat_args],gnu_symbol_visibility='hidden',build_by_default=False)
+
+idep_mesautil=declare_dependency(link_with=_libmesa_util,include_directories=[inc_util],dependencies=deps_for_libmesa_util,)
+
+# Only install the drirc file if we build with support for parsing drirc files
+if use_xmlconfig:
+  install_data(files_drirc,install_dir=join_paths(get_option('datadir'),'drirc.d'),install_tag='runtime')
+
+
+xmlconfig_deps=[]
+if use_xmlconfig:
+  xmlconfig_deps+=dep_expat
+
+xmlconfig_deps+=dep_regex
+
+c_xmlconfig_arg='-DWITH_XMLCONFIG={}'.format(int(use_xmlconfig))
+
+_libxmlconfig=static_library('xmlconfig',files_xmlconfig,dependencies=[idep_mesautil,dep_m,xmlconfig_deps],c_args=[c_msvc_compat_args,c_xmlconfig_arg,'-DSYSCONFDIR="{}"'.format(join_paths(get_option('prefix'),get_option('sysconfdir'))),'-DDATADIR="{}"'.format(join_paths(get_option('prefix'),get_option('datadir'))),],gnu_symbol_visibility='hidden',build_by_default=False,)
+
+idep_xmlconfig=declare_dependency(dependencies=xmlconfig_deps,link_with=_libxmlconfig,)
+
+files_xxd=files('xxd.py')
+glsl2spirv=files('glsl2spirv.py')
+
+devenv.set('DRIRC_CONFIGDIR',meson.current_source_dir())
+
+_libparson=static_library('parson',['parson.c','parson.h'],gnu_symbol_visibility='hidden',build_by_default=False,)
+
+idep_parson=declare_dependency(link_with=_libparson,)
+
+if with_tests:
+  if host_machine.system()!='windows' and cpp.has_argument('-std=c++2a'):
+    test('xmlconfig',executable('xmlconfig_test',files('tests/xmlconfig.cpp'),dependencies=[idep_mesautil,idep_xmlconfig,idep_gtest],override_options=['cpp_std=c++2a'],cpp_args=['-Wno-write-strings',c_xmlconfig_arg]),suite=['util'],env=['HOME='+join_paths(meson.current_source_dir(),'tests','drirc_home'),'DRIRC_CONFIGDIR='+join_paths(meson.current_source_dir(),'tests','drirc_configdir')],protocol='gtest',)
+
+
+  files_util_tests=files('tests/bitset_test.cpp','tests/blob_test.cpp','tests/dag_test.cpp','tests/fast_idiv_by_const_test.cpp','tests/fast_urem_by_const_test.cpp','tests/gc_alloc_tests.cpp','tests/half_float_test.cpp','tests/int_min_max.cpp','tests/linear_test.cpp','tests/mesa-sha1_test.cpp','tests/os_mman_test.cpp','tests/perf/u_trace_test.cpp','tests/rb_tree_test.cpp','tests/register_allocate_test.cpp','tests/roundeven_test.cpp','tests/set_test.cpp','tests/string_buffer_test.cpp','tests/timespec_test.cpp','tests/u_atomic_test.cpp','tests/u_call_once_test.cpp','tests/u_debug_stack_test.cpp','tests/u_debug_test.cpp','tests/u_printf_test.cpp','tests/u_qsort_test.cpp','tests/vector_test.cpp',)
+
+  # FIXME: this test cause a big timeout on MacOS
+  if host_machine.system()!='darwin':
+    files_util_tests+=files('tests/sparse_array_test.cpp',)
+
+
+  if with_shader_cache:
+    files_util_tests+=files('tests/cache_test.cpp',)
+
+
+  test('util_tests',executable('util_tests',files_util_tests,dependencies=[idep_mesautil,idep_gtest],),suite=['util'],protocol='gtest',timeout=180,)
+
+  process_test_exe=executable('process_test',files('tests/process_test.c'),dependencies=idep_mesautil,c_args=[c_msvc_compat_args],)
+  if (host_machine.system()=='windows' and build_machine.system()!='windows'):
+    prog_winepath=find_program('winepath')
+    process_test_exe_full_path=run_command(prog_winepath,'-w',process_test_exe.full_path(),check=True).stdout().strip()
+  else:
+    process_test_exe_full_path=process_test_exe.full_path()
+
+
+  test('process',process_test_exe,suite=['util'],env=['BUILD_FULL_PATH='+process_test_exe_full_path])
+
+  test('process_with_overrides',process_test_exe,suite=['util'],env=['BUILD_FULL_PATH='+process_test_exe_full_path,'MESA_PROCESS_NAME=hello',])
+
+  set_relative_dir('src/util/tests/hash_table')
+  ########################################################################################################################
+  ### Begin conversion from: src/util/tests/hash_table/meson.build
+  ########################################################################################################################
+  for t in ['clear','collision','delete_and_lookup','delete_management','destroy_callback','insert_and_lookup','insert_many','null_destroy','random_entry','remove_key','remove_null','replacement']:
+    test(t,executable('{}_test'.format(t),files('{}.c'.format(t)),c_args=[c_msvc_compat_args],dependencies=idep_mesautil,),suite=['util'],)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/util/tests/hash_table/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/util')
+  set_relative_dir('src/util/tests/vma')
+  ########################################################################################################################
+  ### Begin conversion from: src/util/tests/vma/meson.build
+  ########################################################################################################################
+  test('vma_random',executable('vma_random_test','vma_random_test.cpp',dependencies=idep_mesautil,),suite=['util'],)
+  
+  ########################################################################################################################
+  ### End conversion from: src/util/tests/vma/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/util')
+  set_relative_dir('src/util/tests/format')
+  ########################################################################################################################
+  ### Begin conversion from: src/util/tests/format/meson.build
+  ########################################################################################################################
+  for t in ['srgb','u_format_test','u_format_compatible_test']:
+    test(t,executable(t,'{}.c'.format(t),dependencies=idep_mesautil,),suite='format',should_fail=meson.get_external_property('xfail','').count(t) > 0,)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/util/tests/format/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/util')
+
+
+########################################################################################################################
+### End conversion from: src/util/meson.build
+########################################################################################################################
+set_relative_dir('src')
+
+inc_mesa=include_directories('mesa')
+inc_mapi=include_directories('mapi')
+inc_src=include_directories('.')
+inc_gallium=include_directories('gallium/include')
+inc_gallium_aux=include_directories('gallium/auxiliary')
+inc_amd_common=include_directories('amd/common')
+inc_tool=include_directories('tool')
+inc_virtio_gpu=include_directories('virtio/virtio-gpu')
+inc_frontends=include_directories('gallium/frontends')
+pps_datasources=[]
+pps_includes=[]
+
+inc_llvmpipe=include_directories('gallium/drivers/llvmpipe')
+
+if with_llvm:
+  inc_amd_common_llvm=include_directories('amd/llvm')
+else:
+  inc_amd_common_llvm=[]
+
+
+glsl_util_files=files('mesa/main/extensions_table.c','mesa/program/prog_parameter.c','mesa/program/symbol_table.c','mesa/program/dummy_errors.c',)
+
+sha1_h=custom_target('git_sha1.h',output='git_sha1.h',command=[prog_python,git_sha1_gen_py,'--output','@OUTPUT@'],build_by_default=True,build_always_stale=True,)
+
+if cc.get_argument_syntax()=='msvc':
+  set_relative_dir('src/getopt')
+  ########################################################################################################################
+  ### Begin conversion from: src/getopt/meson.build
+  ########################################################################################################################
+  libgetopt=static_library('getopt','getopt_long.c',)
+  
+  idep_getopt=declare_dependency(link_with=libgetopt,include_directories=include_directories('.',is_system=True),)
+  
+  ########################################################################################################################
+  ### End conversion from: src/getopt/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+else:
+  idep_getopt=null_dep
+
+if with_gallium or with_gbm or with_platform_wayland:
+  set_relative_dir('src/loader')
+  ########################################################################################################################
+  ### Begin conversion from: src/loader/meson.build
+  ########################################################################################################################
+  inc_loader=include_directories('.')
+  
+  if with_platform_x11 and with_dri3:
+    libloader_dri3_helper=static_library('loader_dri3_helper','loader_dri3_helper.c',gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[idep_mesautil,dep_libdrm,dep_xcb_dri3,dep_xcb_present,dep_xcb_sync,dep_xshmfence,dep_xcb_xfixes,],build_by_default=False,)
+  else:
+    libloader_dri3_helper=[]
+  
+  
+  if with_platform_wayland:
+    libloader_wayland_helper=static_library('loader_wayland_helper','loader_wayland_helper.c',gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[dep_wayland_client,],build_by_default=False,)
+  else:
+    libloader_wayland_helper=[]
+  
+  
+  loader_c_args=['-DUSE_DRICONF','-DDEFAULT_DRIVER_DIR="{}"'.format(dri_search_path),]
+  libloader=static_library('loader',['loader_dri_helper.c','loader.c',sha1_h],c_args=loader_c_args,gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_util],dependencies=[dep_libdrm,dep_thread,dep_xcb,dep_xcb_xrandr],build_by_default=False,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/loader/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_gallium:
+  set_relative_dir('src/mapi')
+  ########################################################################################################################
+  ### Begin conversion from: src/mapi/meson.build
+  ########################################################################################################################
+  genCommon_py=files('new/genCommon.py')
+  glapi_gen_mapi_py=files('new/gen_gldispatch_mapi.py')
+  mapi_abi_py=files('mapi_abi.py')
+  
+  set_relative_dir('src/mapi/glapi')
+  ########################################################################################################################
+  ### Begin conversion from: src/mapi/glapi/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/mapi/glapi/gen')
+  ########################################################################################################################
+  ### Begin conversion from: src/mapi/glapi/gen/meson.build
+  ########################################################################################################################
+  glapi_gen_gl_xml=files('../registry/gl.xml')
+  glapi_gen_mapi_deps=[glapi_gen_gl_xml,genCommon_py,]
+  
+  gl_and_es_api_files=files('gl_and_es_API.xml')
+  
+  api_xml_files=files('gl_API.xml','es_EXT.xml','gl_and_es_API.xml','gl_and_glX_API.xml','ARB_base_instance.xml','ARB_blend_func_extended.xml','ARB_bindless_texture.xml','ARB_clear_buffer_object.xml','ARB_clear_texture.xml','ARB_clip_control.xml','ARB_color_buffer_float.xml','ARB_compressed_texture_pixel_storage.xml','ARB_compute_shader.xml','ARB_compute_variable_group_size.xml','ARB_copy_buffer.xml','ARB_copy_image.xml','ARB_debug_output.xml','ARB_depth_buffer_float.xml','ARB_depth_clamp.xml','ARB_direct_state_access.xml','ARB_draw_buffers.xml','ARB_draw_buffers_blend.xml','ARB_draw_elements_base_vertex.xml','ARB_draw_indirect.xml','ARB_draw_instanced.xml','ARB_ES2_compatibility.xml','ARB_ES3_compatibility.xml','ARB_framebuffer_no_attachments.xml','ARB_framebuffer_object.xml','ARB_get_program_binary.xml','ARB_get_texture_sub_image.xml','ARB_gl_spirv.xml','ARB_gpu_shader_fp64.xml','ARB_gpu_shader_int64.xml','ARB_gpu_shader5.xml','ARB_indirect_parameters.xml','ARB_instanced_arrays.xml','ARB_internalformat_query.xml','ARB_internalformat_query2.xml','ARB_invalidate_subdata.xml','ARB_map_buffer_range.xml','ARB_multi_bind.xml','ARB_pipeline_statistics_query.xml','ARB_program_interface_query.xml','ARB_robustness.xml','ARB_sample_shading.xml','ARB_sampler_objects.xml','ARB_seamless_cube_map.xml','ARB_separate_shader_objects.xml','ARB_shader_atomic_counters.xml','ARB_shader_image_load_store.xml','ARB_shader_subroutine.xml','ARB_shader_storage_buffer_object.xml','ARB_sparse_buffer.xml','ARB_sparse_texture.xml','ARB_spirv_extensions.xml','ARB_sync.xml','ARB_tessellation_shader.xml','ARB_texture_barrier.xml','ARB_texture_buffer_object.xml','ARB_texture_buffer_range.xml','ARB_texture_compression_rgtc.xml','ARB_texture_cube_map_array.xml','ARB_texture_float.xml','ARB_texture_gather.xml','ARB_texture_multisample.xml','ARB_texture_rgb10_a2ui.xml','ARB_texture_rg.xml','ARB_texture_storage_multisample.xml','ARB_texture_storage.xml','ARB_texture_view.xml','ARB_uniform_buffer_object.xml','ARB_vertex_array_object.xml','ARB_vertex_attrib_64bit.xml','ARB_vertex_attrib_binding.xml','ARB_viewport_array.xml','AMD_depth_clamp_separate.xml','AMD_draw_buffers_blend.xml','AMD_gpu_shader_int64.xml','AMD_performance_monitor.xml','ARB_vertex_type_2_10_10_10_rev.xml','APPLE_object_purgeable.xml','APPLE_vertex_array_object.xml','EXT_direct_state_access.xml','EXT_draw_buffers2.xml','EXT_external_objects.xml','EXT_external_objects_fd.xml','EXT_external_objects_win32.xml','EXT_framebuffer_object.xml','EXT_gpu_shader4.xml','EXT_multisampled_render_to_texture.xml','EXT_packed_depth_stencil.xml','EXT_provoking_vertex.xml','EXT_separate_shader_objects.xml','EXT_shader_image_load_store.xml','EXT_texture_array.xml','EXT_texture_integer.xml','EXT_texture_storage.xml','EXT_texture_storage_compression.xml','EXT_transform_feedback.xml','EXT_vertex_attrib_64bit.xml','EXT_window_rectangles.xml','GREMEDY_string_marker.xml','INTEL_performance_query.xml','KHR_debug.xml','KHR_context_flush_control.xml','KHR_robustness.xml','KHR_robustness_es.xml','KHR_texture_compression_astc.xml','NV_alpha_to_coverage_dither_control.xml','NV_copy_image.xml','NV_conditional_render.xml','NV_primitive_restart.xml','NV_texture_barrier.xml','NV_vdpau_interop.xml','NV_viewport_swizzle.xml','OES_EGL_image.xml','OES_fixed_point.xml','OES_single_precision.xml','OES_texture_compression_astc.xml','GL3x.xml','GL4x.xml',)
+  
+  glapi_gen_depends=files('gl_XML.py','glX_XML.py','license.py','static_data.py','typeexpr.py',)+api_xml_files
+  
+  glx_gen_depends=files('glX_API.xml','glX_XML.py','glX_proto_common.py',)+api_xml_files
+  
+  glapi_mapi_tmp_h=custom_target('glapi_mapi_tmp.h',input=[mapi_abi_py,'gl_and_es_API.xml'],output='glapi_mapi_tmp.h',command=[prog_python,'@INPUT0@','--printer','glapi','@INPUT1@'],depend_files=glapi_gen_depends,capture=True,)
+  
+  glprocs_h=custom_target('glprocs.h',input=['gl_procs.py','gl_and_es_API.xml'],output='glprocs.h',command=[prog_python,'@INPUT0@','-c','-f','@INPUT1@'],depend_files=glapi_gen_depends,capture=True,)
+  
+  glapitemp_h=custom_target('glapitemp.h',input=['gl_apitemp.py','gl_and_es_API.xml'],output='glapitemp.h',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=glapi_gen_depends,capture=True,)
+  
+  glapitable_h=custom_target('glapitable.h',input=['gl_table.py','gl_and_es_API.xml'],output='glapitable.h',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=glapi_gen_depends,capture=True,)
+  
+  glapi_gentable_c=custom_target('glapi_gentable.c',input=['gl_gentable.py','gl_and_es_API.xml'],output='glapi_gentable.c',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=glapi_gen_depends,capture=True,)
+  
+  main_enums_c=custom_target('enums.c',input=['gl_enums.py',files('../registry/gl.xml')],output='enums.c',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],capture=True,)
+  
+  main_api_exec_c=custom_target('api_exec_init.c',input=['api_exec_init.py','gl_and_es_API.xml'],output='api_exec_init.c',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=files('apiexec.py')+glapi_gen_depends,capture=True,)
+  
+  main_api_exec_decl_h=custom_target('api_exec_decl.h',input=['api_exec_decl_h.py','gl_and_es_API.xml'],output='api_exec_decl.h',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=files('apiexec.py')+glapi_gen_depends,capture=True,)
+  
+  main_api_save_init_h=custom_target('api_save_init.h',input=['api_save_init_h.py','gl_and_es_API.xml'],output='api_save_init.h',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=files('apiexec.py')+glapi_gen_depends,capture=True,)
+  
+  main_api_save_h=custom_target('api_save.h',input=['api_save_h.py','gl_and_es_API.xml'],output='api_save.h',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=files('apiexec.py')+glapi_gen_depends,capture=True,)
+  
+  main_api_beginend_init_h=custom_target('api_beginend_init.h',input=['api_beginend_init_h.py','gl_and_es_API.xml'],output='api_beginend_init.h',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=files('apiexec.py')+glapi_gen_depends,capture=True,)
+  
+  main_api_hw_select_init_h=custom_target('api_hw_select_init.h',input=['api_hw_select_init_h.py','gl_API.xml'],output='api_hw_select_init.h',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=files('apiexec.py')+glapi_gen_depends,capture=True,)
+  
+  main_unmarshal_table_c=custom_target('unmarshal_table.c',input=['gl_unmarshal_table.py','gl_and_es_API.xml'],output='unmarshal_table.c',command=[prog_python,'@INPUT0@','@INPUT1@',sizeof_pointer],depend_files=files('marshal_XML.py')+glapi_gen_depends,capture=True,)
+  
+  main_marshal_generated_c=[]
+  for x in ['0','1','2','3','4','5','6','7']:
+    main_marshal_generated_c+=custom_target('marshal_generated'+x+'.c',input=['gl_marshal.py','gl_and_es_API.xml'],output='marshal_generated'+x+'.c',command=[prog_python,'@INPUT0@','@INPUT1@',x,'8',sizeof_pointer],depend_files=files('marshal_XML.py')+glapi_gen_depends,capture=True,)
+  
+  
+  glx_generated=[]
+  
+  for x in [['indirect.c','proto'],['indirect.h','init_h'],['indirect_init.c','init_c']]:
+    glx_generated+=custom_target(x[0],input=['glX_proto_send.py','gl_API.xml'],output=x[0],command=[prog_python,'@INPUT0@','-f','@INPUT1@','-m',x[1]],depend_files=glx_gen_depends,capture=True,)
+  
+  
+  for x in [['indirect_size.h',['-m','size_h','--header-tag','_INDIRECT_SIZE_H_']],['indirect_size.c',['-m','size_c']]]:
+    glx_generated+=custom_target(x[0],input=['glX_proto_size.py','gl_API.xml'],output=x[0],command=[prog_python,'@INPUT0@','-f','@INPUT1@','--only-set',x[1]],depend_files=glx_gen_depends,capture=True,)
+  
+  glx_indirect_size_h=glx_generated[3]
+  
+  glapi_x86_s=custom_target('glapi_x86.S',input=['gl_x86_asm.py',gl_and_es_api_files],output='glapi_x86.S',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=glapi_gen_depends,capture=True,)
+  
+  glapi_x86_64_s=custom_target('glapi_x86-64.S',input=['gl_x86-64_asm.py',gl_and_es_api_files],output='glapi_x86-64.S',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=glapi_gen_depends,capture=True,)
+  
+  glapi_sparc_s=custom_target('glapi_sparc.S',input=['gl_SPARC_asm.py',gl_and_es_api_files],output='glapi_sparc.S',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=glapi_gen_depends,capture=True,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/mapi/glapi/gen/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/mapi/glapi')
+  
+  inc_glapi=include_directories('.')
+  
+  static_glapi_files=[]
+  static_glapi_args=[]
+  
+  if with_dri and ['apple','windows'].count(with_dri_platform) > 0:
+    static_glapi_files+=[glapi_gentable_c,glapitable_h]
+  
+  
+  bridge_glapi_files=static_glapi_files
+  bridge_glapi_args=static_glapi_args
+  
+  bridge_glapi_files+=files('../entry.c','../entry.h','../entry_x86-64_tls.h','../entry_x86_tls.h','../entry_ppc64le_tls.h','../mapi_tmp.h',)
+  bridge_glapi_files+=glapi_mapi_tmp_h
+  bridge_glapi_args+=['-DMAPI_MODE_BRIDGE','-DMAPI_ABI_HEADER="{}"'.format(glapi_mapi_tmp_h.full_path()),gcc_lto_quirk,]
+  if with_platform_windows:
+    bridge_glapi_args+=['-D_GDI32_']
+  
+  
+  static_glapi_args += ['-DMAPI_MODE_UTIL'] if isinstance(static_glapi_args, list) else '-DMAPI_MODE_UTIL'
+  if with_platform_windows:
+    static_glapi_args+=['-D_GDI32_','-DKHRONOS_DLL_EXPORTS','-D_GLAPI_DLL_EXPORTS']
+  
+  static_glapi_files+=files('../u_current.c','../u_current.h','glapi_dispatch.c','glapi_entrypoint.c','glapi_getproc.c','glapi_nop.c','glapi.c','glapi.h','glapi_priv.h',)
+  static_glapi_files+=[glapitable_h,glapi_mapi_tmp_h,glprocs_h,glapitemp_h,]
+  if with_asm_arch=='x86':
+    static_glapi_files+=glapi_x86_s
+  elif with_asm_arch=='x86_64':
+    static_glapi_files+=glapi_x86_64_s
+  elif with_asm_arch=='sparc':
+    static_glapi_files+=glapi_sparc_s
+  
+  
+  
+  libglapi_bridge=static_library('glapi_bridge',bridge_glapi_files,include_directories=[inc_mesa,inc_include,inc_src,inc_mapi],c_args=[c_msvc_compat_args,bridge_glapi_args],dependencies=[dep_thread,dep_selinux,idep_mesautil],build_by_default=False,)
+  
+  if with_shared_glapi:
+    libglapi_static=libglapi_bridge
+  else:
+    libglapi_static=static_library('glapi_static',static_glapi_files,include_directories=[inc_mesa,inc_include,inc_src,inc_mapi],c_args=[c_msvc_compat_args,static_glapi_args],dependencies=[dep_thread,dep_selinux,idep_mesautil],build_by_default=False,)
+  # TODO: this test doesn't compile on windows with mingw or msvc due to
+  # undefined symbols from libglapi_static, but that should be fixable.
+  if with_any_opengl and not with_shared_glapi and with_tests and not with_platform_windows:
+    test('glapi_static_check_table',executable('glapi_static_check_table',['tests/check_table.cpp',glapitable_h],include_directories=[inc_include,inc_src,inc_mesa,inc_mapi],link_with=[libglapi_static],dependencies=[idep_gtest,dep_thread],),suite=['mapi'],protocol='gtest',)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/mapi/glapi/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/mapi')
+  if with_shared_glapi:
+    subdir('shared-glapi')
+  else:
+    libglapi=[]
+  
+  if not with_glvnd:
+    if with_gles1:
+      set_relative_dir('src/mapi/es1api')
+      ########################################################################################################################
+      ### Begin conversion from: src/mapi/es1api/meson.build
+      ########################################################################################################################
+      es1_glapi_mapi_tmp_h=custom_target('es1_glapi_mapi_tmp.h',input=[glapi_gen_mapi_py,glapi_gen_gl_xml],output='glapi_mapi_tmp.h',command=[prog_python,'@INPUT0@','glesv1','@INPUT1@'],depend_files=glapi_gen_mapi_deps,capture=True,)
+      
+      _es1_c_args=[]
+      if with_platform_windows:
+        _es1_c_args+=['-D_GDI32_']
+      
+      
+      gles1_def=custom_target('gles1.def',input='gles1.def.in',output='gles1.def',command=gen_vs_module_defs_normal_command,)
+      
+      libglesv1_cm=shared_library('GLESv1_CM'+get_option('gles-lib-suffix'),['../entry.c',es1_glapi_mapi_tmp_h],vs_module_defs=gles1_def,c_args=[c_msvc_compat_args,_es1_c_args,'-DMAPI_MODE_BRIDGE','-DMAPI_ABI_HEADER="{}"'.format(es1_glapi_mapi_tmp_h.full_path()),gcc_lto_quirk,],gnu_symbol_visibility='hidden',link_args=[ld_args_gc_sections],include_directories=[inc_src,inc_include,inc_mapi],link_with=libglapi,dependencies=[dep_thread,dep_libdrm,dep_m,dep_dl,idep_mesautilc11],soversion='' if host_machine.system()=='windows' else '1',version='1.1.0',darwin_versions='3.0.0',name_prefix='lib' if host_machine.system()=='windows' else [],install=True,)
+      
+      pkg.generate(name='glesv1_cm',filebase='glesv1_cm',description='Mesa OpenGL ES 1.1 CM library',version=meson.project_version(),libraries=libglesv1_cm,libraries_private=gl_priv_libs,)
+      
+      if with_symbols_check:
+        test('es1-ABI-check',symbols_check,args=['--lib',libglesv1_cm,'--symbols-file',files('gles1-symbols.txt'),symbols_check_args,],suite=['mapi'],)
+      
+      
+      ########################################################################################################################
+      ### End conversion from: src/mapi/es1api/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/mapi')
+  
+    if with_gles2:
+      set_relative_dir('src/mapi/es2api')
+      ########################################################################################################################
+      ### Begin conversion from: src/mapi/es2api/meson.build
+      ########################################################################################################################
+      es2_glapi_mapi_tmp_h=custom_target('es2_glapi_mapi_tmp.h',input=[glapi_gen_mapi_py,glapi_gen_gl_xml],output='glapi_mapi_tmp.h',command=[prog_python,'@INPUT0@','glesv2','@INPUT1@'],depend_files=glapi_gen_mapi_deps,capture=True,)
+      
+      _es2_c_args=[]
+      if with_platform_windows:
+        _es2_c_args+=['-D_GDI32_']
+      
+      
+      gles2_def=custom_target('gles2.def',input='gles2.def.in',output='gles2.def',command=gen_vs_module_defs_normal_command,)
+      
+      libgles2=shared_library('GLESv2'+get_option('gles-lib-suffix'),['../entry.c',es2_glapi_mapi_tmp_h],vs_module_defs=gles2_def,c_args=[c_msvc_compat_args,_es2_c_args,'-DMAPI_MODE_BRIDGE','-DMAPI_ABI_HEADER="{}"'.format(es2_glapi_mapi_tmp_h.full_path()),gcc_lto_quirk,],gnu_symbol_visibility='hidden',link_args=[ld_args_gc_sections],include_directories=[inc_src,inc_include,inc_mapi],link_with=libglapi,dependencies=[dep_thread,dep_libdrm,dep_m,dep_dl,idep_mesautilc11],soversion='' if host_machine.system()=='windows' else '2',version='2.0.0',darwin_versions='3.0.0',name_prefix='lib' if host_machine.system()=='windows' else [],install=True,)
+      
+      pkg.generate(name='glesv2',filebase='glesv2',description='Mesa OpenGL ES 2.0 library',version=meson.project_version(),libraries=libgles2,libraries_private=gl_priv_libs,)
+      
+      if with_symbols_check:
+        test('es2-ABI-check',symbols_check,args=['--lib',libgles2,'--symbols-file',files('gles2-symbols.txt'),symbols_check_args,],suite=['mapi'],)
+      
+      
+      ########################################################################################################################
+      ### End conversion from: src/mapi/es2api/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/mapi')
+  
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/mapi/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+set_relative_dir('src/compiler')
+########################################################################################################################
+### Begin conversion from: src/compiler/meson.build
+########################################################################################################################
+inc_compiler=include_directories('.')
+inc_glsl=include_directories('glsl')
+inc_spirv=include_directories('spirv')
+
+builtin_types_h=custom_target('builtin_types.h',input='builtin_types_h.py',output='builtin_types.h',command=[prog_python,'@INPUT@','@OUTPUT@'],depend_files=files('builtin_types.py'),)
+
+builtin_types_c=custom_target('builtin_types.c',input='builtin_types_c.py',output='builtin_types.c',command=[prog_python,'@INPUT@','@OUTPUT@'],depend_files=files('builtin_types.py'),)
+
+float64_glsl_file=files('glsl/float64.glsl')
+
+astc_decoder_glsl_file=files('glsl/astc_decoder.glsl')
+
+files_libcompiler=files('glsl_types.c','glsl_types.h','shader_enums.c','shader_enums.h','shader_info.h',)
+
+ir_expression_operation_h=custom_target('ir_expression_operation.h',input='glsl/ir_expression_operation.py',output='ir_expression_operation.h',command=[prog_python,'@INPUT@','enum'],capture=True,)
+
+libcompiler=static_library('compiler',[files_libcompiler,ir_expression_operation_h,builtin_types_h,builtin_types_c],include_directories=[inc_compiler,inc_include,inc_src],c_args=[c_msvc_compat_args,no_override_init_args],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',dependencies=[dep_valgrind],build_by_default=False,)
+
+idep_compiler=declare_dependency(sources=[ir_expression_operation_h,builtin_types_h],include_directories=inc_compiler,link_with=libcompiler,)
+
+set_relative_dir('src/compiler/nir')
+########################################################################################################################
+### Begin conversion from: src/compiler/nir/meson.build
+########################################################################################################################
+nir_depends=files('nir_opcodes.py','nir_intrinsics.py')
+
+nir_algebraic_depends=files('nir_opcodes.py','nir_algebraic.py')
+
+nir_builder_opcodes_h=custom_target('nir_builder_opcodes.h',input='nir_builder_opcodes_h.py',output='nir_builder_opcodes.h',command=[prog_python,'@INPUT@'],capture=True,depend_files=nir_depends,)
+
+nir_constant_expressions_c=custom_target('nir_constant_expressions.c',input='nir_constant_expressions.py',output='nir_constant_expressions.c',command=[prog_python,'@INPUT@'],capture=True,depend_files=nir_depends,)
+
+nir_opcodes_h=custom_target('nir_opcodes.h',input='nir_opcodes_h.py',output='nir_opcodes.h',command=[prog_python,'@INPUT@'],capture=True,depend_files=nir_depends,)
+
+nir_opcodes_c=custom_target('nir_opcodes.c',input='nir_opcodes_c.py',output='nir_opcodes.c',command=[prog_python,'@INPUT@'],capture=True,depend_files=nir_depends,)
+
+nir_opt_algebraic_c=custom_target('nir_opt_algebraic.c',input='nir_opt_algebraic.py',output='nir_opt_algebraic.c',command=[prog_python,'@INPUT@','--out','@OUTPUT@'],depend_files=nir_algebraic_depends,)
+
+nir_intrinsics_h=custom_target('nir_intrinsics.h',input='nir_intrinsics_h.py',output='nir_intrinsics.h',command=[prog_python,'@INPUT@','--outdir',meson.current_build_dir()],capture=False,depend_files=files('nir_intrinsics.py'),)
+
+nir_intrinsics_indices_h=custom_target('nir_intrinsics_indices.h',input='nir_intrinsics_indices_h.py',output='nir_intrinsics_indices.h',command=[prog_python,'@INPUT@','--outdir',meson.current_build_dir()],capture=False,depend_files=files('nir_intrinsics.py'),)
+
+nir_intrinsics_c=custom_target('nir_intrinsic.c',input='nir_intrinsics_c.py',output='nir_intrinsics.c',command=[prog_python,'@INPUT@','--outdir',meson.current_build_dir()],capture=False,depend_files=files('nir_intrinsics.py'),)
+
+files_libnir=files('nir.c','nir.h','nir_builder.c','nir_builder.h','nir_builtin_builder.c','nir_builtin_builder.h','nir_conversion_builder.h','nir_clone.c','nir_constant_expressions.h','nir_control_flow.c','nir_control_flow.h','nir_control_flow_private.h','nir_deref.c','nir_deref.h','nir_divergence_analysis.c','nir_dominance.c','nir_format_convert.c','nir_format_convert.h','nir_from_ssa.c','nir_functions.c','nir_gather_info.c','nir_gather_types.c','nir_gather_xfb_info.c','nir_group_loads.c','nir_gs_count_vertices.c','nir_inline_uniforms.c','nir_instr_set.c','nir_instr_set.h','nir_legacy.c','nir_legacy.h','nir_linking_helpers.c','nir_liveness.c','nir_loop_analyze.c','nir_loop_analyze.h','nir_lower_alu.c','nir_lower_alu_width.c','nir_lower_alpha_test.c','nir_lower_amul.c','nir_lower_array_deref_of_vec.c','nir_lower_atomics_to_ssbo.c','nir_lower_bitmap.c','nir_lower_blend.c','nir_lower_bool_to_bitsize.c','nir_lower_bool_to_float.c','nir_lower_bool_to_int32.c','nir_lower_cl_images.c','nir_lower_clamp_color_outputs.c','nir_lower_clip.c','nir_lower_clip_cull_distance_arrays.c','nir_lower_clip_disable.c','nir_lower_clip_halfz.c','nir_lower_const_arrays_to_uniforms.c','nir_lower_continue_constructs.c','nir_lower_convert_alu_types.c','nir_lower_variable_initializers.c','nir_lower_discard_if.c','nir_lower_double_ops.c','nir_lower_drawpixels.c','nir_lower_fb_read.c','nir_lower_flatshade.c','nir_lower_flrp.c','nir_lower_fp16_conv.c','nir_lower_fragcoord_wtrans.c','nir_lower_frag_coord_to_pixel_coord.c','nir_lower_fragcolor.c','nir_lower_frexp.c','nir_lower_global_vars_to_local.c','nir_lower_goto_ifs.c','nir_lower_gs_intrinsics.c','nir_lower_helper_writes.c','nir_lower_load_const_to_scalar.c','nir_lower_locals_to_regs.c','nir_lower_idiv.c','nir_lower_image.c','nir_lower_image_atomics_to_global.c','nir_lower_indirect_derefs.c','nir_lower_input_attachments.c','nir_lower_int64.c','nir_lower_interpolation.c','nir_lower_int_to_float.c','nir_lower_io.c','nir_lower_io_arrays_to_elements.c','nir_lower_io_to_temporaries.c','nir_lower_io_to_scalar.c','nir_lower_io_to_vector.c','nir_lower_is_helper_invocation.c','nir_lower_multiview.c','nir_lower_mediump.c','nir_lower_mem_access_bit_sizes.c','nir_lower_memcpy.c','nir_lower_memory_model.c','nir_lower_non_uniform_access.c','nir_lower_packing.c','nir_lower_passthrough_edgeflags.c','nir_lower_patch_vertices.c','nir_lower_phis_to_scalar.c','nir_lower_pntc_ytransform.c','nir_lower_point_size.c','nir_lower_point_size_mov.c','nir_lower_point_smooth.c','nir_lower_poly_line_smooth.c','nir_lower_printf.c','nir_lower_reg_intrinsics_to_ssa.c','nir_lower_readonly_images_to_tex.c','nir_lower_returns.c','nir_lower_robust_access.c','nir_lower_samplers.c','nir_lower_scratch.c','nir_lower_shader_calls.c','nir_lower_single_sampled.c','nir_lower_ssbo.c','nir_lower_subgroups.c','nir_lower_system_values.c','nir_lower_task_shader.c','nir_lower_terminate_to_demote.c','nir_lower_tess_coord_z.c','nir_lower_tex_shadow.c','nir_lower_tex.c','nir_lower_texcoord_replace.c','nir_lower_texcoord_replace_late.c','nir_lower_two_sided_color.c','nir_lower_undef_to_zero.c','nir_lower_vars_to_ssa.c','nir_lower_var_copies.c','nir_lower_vec_to_regs.c','nir_lower_vec3_to_vec4.c','nir_lower_viewport_transform.c','nir_lower_wpos_center.c','nir_lower_wpos_ytransform.c','nir_lower_wrmasks.c','nir_lower_bit_size.c','nir_lower_ubo_vec4.c','nir_lower_uniforms_to_ubo.c','nir_lower_sysvals_to_varyings.c','nir_metadata.c','nir_mod_analysis.c','nir_move_vec_src_uses_to_dest.c','nir_normalize_cubemap_coords.c','nir_opt_access.c','nir_opt_barriers.c','nir_opt_combine_stores.c','nir_opt_comparison_pre.c','nir_opt_conditional_discard.c','nir_opt_constant_folding.c','nir_opt_copy_prop_vars.c','nir_opt_copy_propagate.c','nir_opt_cse.c','nir_opt_dce.c','nir_opt_dead_cf.c','nir_opt_dead_write_vars.c','nir_opt_find_array_copies.c','nir_opt_fragdepth.c','nir_opt_gcm.c','nir_opt_idiv_const.c','nir_opt_if.c','nir_opt_intrinsics.c','nir_opt_large_constants.c','nir_opt_load_store_vectorize.c','nir_opt_loop.c','nir_opt_loop_unroll.c','nir_opt_memcpy.c','nir_opt_move.c','nir_opt_move_discards_to_top.c','nir_opt_mqsad.c','nir_opt_non_uniform_access.c','nir_opt_offsets.c','nir_opt_peephole_select.c','nir_opt_phi_precision.c','nir_opt_preamble.c','nir_opt_ray_queries.c','nir_opt_reassociate_bfi.c','nir_opt_rematerialize_compares.c','nir_opt_remove_phis.c','nir_opt_reuse_constants.c','nir_opt_shrink_stores.c','nir_opt_shrink_vectors.c','nir_opt_sink.c','nir_opt_undef.c','nir_opt_uniform_atomics.c','nir_opt_uniform_subgroup.c','nir_opt_varyings.c','nir_opt_vectorize.c','nir_opt_vectorize_io.c','nir_passthrough_gs.c','nir_passthrough_tcs.c','nir_phi_builder.c','nir_phi_builder.h','nir_print.c','nir_propagate_invariant.c','nir_range_analysis.c','nir_range_analysis.h','nir_remove_dead_variables.c','nir_remove_tex_shadow.c','nir_repair_ssa.c','nir_scale_fdiv.c','nir_schedule.c','nir_schedule.h','nir_search.c','nir_search.h','nir_search_helpers.h','nir_serialize.c','nir_serialize.h','nir_split_64bit_vec3_and_vec4.c','nir_split_per_member_structs.c','nir_split_var_copies.c','nir_split_vars.c','nir_sweep.c','nir_to_lcssa.c','nir_trivialize_registers.c','nir_use_dominance.c','nir_validate.c','nir_vla.h','nir_worklist.c','nir_worklist.h','nir_xfb_info.h',)# not being able to process it, however that is not suppressable by a #pragma
+# in GCC.  This happens with the generated code in nir_opt_algebraic.c.
+#
+# As a workaround, drop the warning for GCC.  Clang builds should cover this.
+no_misleading_indentation=[]
+if cc.get_id()=='gcc':
+  no_misleading_indentation+=cc.get_supported_arguments('-Wno-misleading-indentation')
+
+
+_libnir=static_library('nir',[files_libnir,nir_opt_algebraic_c,nir_opcodes_c,nir_opcodes_h,nir_constant_expressions_c,nir_builder_opcodes_h,nir_intrinsics_c,nir_intrinsics_h,nir_intrinsics_indices_h],include_directories=[inc_include,inc_src],c_args=[c_msvc_compat_args,no_override_init_args,no_misleading_indentation],gnu_symbol_visibility='hidden',dependencies=[idep_compiler,dep_valgrind],build_by_default=False,)
+
+inc_nir=include_directories('.')# Headers-only dependency
+idep_nir_headers=declare_dependency(sources=[nir_opcodes_h,nir_builder_opcodes_h,nir_intrinsics_h,nir_intrinsics_indices_h,ir_expression_operation_h,builtin_types_h],include_directories=[inc_nir,inc_compiler],)# Also link with nir
+idep_nir=declare_dependency(dependencies=[idep_nir_headers,idep_mesautil,idep_compiler],link_with=_libnir,)
+
+if with_tests:
+  if cc.get_id()=='msvc' and cc.version().version_compare('< 19.29'):
+    msvc_designated_initializer='cpp_std=c++latest'
+  else:
+    msvc_designated_initializer='cpp_std=c++20'
+
+
+  msvc_bigobj=[]
+  if cc.get_id()=='msvc':
+    msvc_bigobj='/bigobj'
+
+
+  test('nir_tests',executable('nir_tests',files('tests/algebraic_tests.cpp','tests/builder_tests.cpp','tests/comparison_pre_tests.cpp','tests/control_flow_tests.cpp','tests/core_tests.cpp','tests/dce_tests.cpp','tests/format_convert_tests.cpp','tests/load_store_vectorizer_tests.cpp','tests/loop_analyze_tests.cpp','tests/loop_unroll_tests.cpp','tests/lower_alu_width_tests.cpp','tests/mod_analysis_tests.cpp','tests/negative_equal_tests.cpp','tests/opt_if_tests.cpp','tests/opt_loop_tests.cpp','tests/opt_peephole_select.cpp','tests/opt_shrink_vectors_tests.cpp','tests/opt_varyings_tests_bicm_binary_alu.cpp','tests/opt_varyings_tests_dead_input.cpp','tests/opt_varyings_tests_dead_output.cpp','tests/opt_varyings_tests_dedup.cpp','tests/opt_varyings_tests_prop_const.cpp','tests/opt_varyings_tests_prop_ubo.cpp','tests/opt_varyings_tests_prop_uniform.cpp','tests/opt_varyings_tests_prop_uniform_expr.cpp','tests/serialize_tests.cpp','tests/range_analysis_tests.cpp','tests/vars_tests.cpp',),cpp_args=[cpp_msvc_compat_args,msvc_bigobj],override_options=[msvc_designated_initializer],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[dep_thread,idep_gtest,idep_nir,idep_mesautil],),suite=['compiler','nir'],protocol='gtest',)
+
+  test('nir_algebraic_parser',prog_python,args=[files('tests/algebraic_parser_test.py')],suite=['compiler','nir'],)
+
+
+########################################################################################################################
+### End conversion from: src/compiler/nir/meson.build
+########################################################################################################################
+set_relative_dir('src/compiler')
+
+set_relative_dir('src/compiler/spirv')
+########################################################################################################################
+### Begin conversion from: src/compiler/spirv/meson.build
+########################################################################################################################
+vtn_gather_types_c=custom_target('vtn_gather_types.c',input=files('vtn_gather_types_c.py','spirv.core.grammar.json'),output='vtn_gather_types.c',command=[prog_python,'@INPUT0@','@INPUT1@','@OUTPUT@'],)
+
+spirv_info=custom_target('spirv_info',input=files('spirv_info_gen.py','spirv.core.grammar.json'),output=['spirv_info.h','spirv_info.c'],command=[prog_python,'@INPUT0@','--json','@INPUT1@','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@'],)
+spirv_info_h=spirv_info[0]
+
+vtn_generator_ids_h=custom_target('vtn_generator_ids.h',input=files('vtn_generator_ids_h.py','spir-v.xml'),output='vtn_generator_ids.h',command=[prog_python,'@INPUT0@','@INPUT1@','@OUTPUT@'],)
+
+files_libvtn=files('GLSL.ext.AMD.h','GLSL.std.450.h','OpenCL.std.h','gl_spirv.c','nir_spirv.h','spirv.h','spirv_to_nir.c','vtn_alu.c','vtn_amd.c','vtn_cfg.c','vtn_cmat.c','vtn_glsl450.c','vtn_opencl.c','vtn_private.h','vtn_structured_cfg.c','vtn_subgroup.c','vtn_variables.c',)
+
+libvtn=static_library('vtn',[files_libvtn,spirv_info,vtn_gather_types_c,vtn_generator_ids_h,],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa],c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[idep_nir,dep_valgrind],build_by_default=False,)
+
+idep_vtn=declare_dependency(dependencies=[idep_nir,idep_mesautil],link_with=libvtn,)
+
+spirv2nir=executable('spirv2nir',files('spirv2nir.c')+[vtn_generator_ids_h,],dependencies=[dep_m,idep_vtn,idep_mesautil],include_directories=[inc_include,inc_src],c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=with_tools.count('nir') > 0,install=with_tools.count('nir') > 0,)
+
+if with_tests:
+  test('spirv_tests',executable('spirv_tests',files('tests/helpers.h','tests/avail_vis.cpp','tests/volatile.cpp','tests/control_flow_tests.cpp',),c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[idep_vtn,dep_thread,idep_gtest,idep_nir,idep_mesautil],),suite=['compiler','spirv'],protocol='gtest',)
+
+
+########################################################################################################################
+### End conversion from: src/compiler/spirv/meson.build
+########################################################################################################################
+set_relative_dir('src/compiler')
+
+if with_clc:
+  set_relative_dir('src/compiler/clc')
+  ########################################################################################################################
+  ### Begin conversion from: src/compiler/clc/meson.build
+  ########################################################################################################################
+  files_libmesaclc=files('clc.c','clc_helpers.cpp','nir_load_libclc.c',)
+  
+  _libmesaclc_c_args=[]
+  _libmesaclc_cpp_args=['-DLLVM_LIB_DIR="{}"'.format(llvm_libdir)]
+  _libmesaclc_sources=[]
+  
+  if not _shared_llvm:
+    if dep_llvm.version().version_compare('< 16'):
+      clang_version_dir=dep_llvm.version()
+    else:
+      clang_version_dir=dep_llvm.version().split('.')[0]
+  
+    clang_resource_dir=join_paths(llvm_libdir,'clang',clang_version_dir,'include')
+  
+    opencl_c_base_h=custom_target('opencl-c-base.h',input=[files_xxd,join_paths(clang_resource_dir,'opencl-c-base.h')],output='opencl-c-base.h.h',command=[prog_python,'@INPUT@','@OUTPUT@','-n','opencl_c_base_source'],)
+  
+    opencl_c_h=custom_target('opencl-c.h',input=[files_xxd,join_paths(clang_resource_dir,'opencl-c.h')],output='opencl-c.h.h',command=[prog_python,'@INPUT@','@OUTPUT@','-n','opencl_c_source'],)
+  
+    _libmesaclc_sources+=[opencl_c_base_h,opencl_c_h]
+    _libmesaclc_cpp_args+=['-DUSE_STATIC_OPENCL_C_H=1']
+  
+  
+  _basedir=dep_clc.get_variable(pkgconfig='libexecdir')
+  
+  _static_libclc=get_option('static-libclc')
+  if len(_static_libclc)>0:
+    if _static_libclc.count('all') > 0:
+      _static_libclc=['spirv','spirv64']
+  
+    prog_zstd=find_program('zstd',required=False,native=True)
+    _zstd_static_libclc=dep_zstd.found() and prog_zstd.found()
+    if _zstd_static_libclc:
+      _libmesaclc_c_args += ['-DHAVE_STATIC_LIBCLC_ZSTD'] if isinstance(_libmesaclc_c_args, list) else '-DHAVE_STATIC_LIBCLC_ZSTD'
+  
+    for s in _static_libclc:
+      _libmesaclc_c_args += ['-DHAVE_STATIC_LIBCLC_{}'.format(s.upper())] if isinstance(_libmesaclc_c_args, list) else '-DHAVE_STATIC_LIBCLC_{}'.format(s.upper())
+      f='{}-mesa3d-.spv'.format(s)
+      _libclc_file=(_basedir + f) if isinstance(_basedir, str) else (_basedir / f)
+      if _zstd_static_libclc:
+        _libclc_file=custom_target('{}.zstd'.format(f),command=[prog_zstd,'-f','@INPUT@','-o','@OUTPUT@'],input=[_libclc_file],output='{}.zstd'.format(f),)
+  
+      files_libmesaclc+=custom_target('{}.h'.format(f),command=[prog_python,files_xxd,'-b','@INPUT@','@OUTPUT@','-n','libclc_{}_mesa3d_spv'.format(s),],input=[_libclc_file],output='{}.h'.format(f),depend_files=files_xxd,)
+  
+  else:
+    _libmesaclc_c_args+=['-DDYNAMIC_LIBCLC_PATH="{}/"'.format(_basedir)]
+    if not cc.has_function('mmap'):
+      error('mmap required for dynamic libCLC loading')
+  
+  
+  
+  _libmesaclc=static_library('libmesaclc',files_libmesaclc,sources=_libmesaclc_sources,include_directories=[inc_include,inc_src,inc_spirv],c_args=_libmesaclc_c_args,cpp_args=[_libmesaclc_cpp_args,_libmesaclc_c_args],dependencies=[idep_nir,dep_clang,dep_llvm,dep_llvmspirvlib,idep_mesautil,dep_spirv_tools,idep_vtn])
+  
+  _idep_mesaclc_link_args=[]
+  if _shared_llvm:
+    _idep_mesaclc_link_args+=cc.get_supported_link_arguments('-fPIC')
+  
+  
+  idep_mesaclc=declare_dependency(link_with=_libmesaclc,include_directories=include_directories('.'),link_args=_idep_mesaclc_link_args,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/compiler/clc/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/compiler')
+
+if with_gallium:
+  set_relative_dir('src/compiler/glsl')
+  ########################################################################################################################
+  ### Begin conversion from: src/compiler/glsl/meson.build
+  ########################################################################################################################
+  libglsl_util=static_library('glsl_util',glsl_util_files,include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],dependencies=dep_valgrind,gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  set_relative_dir('src/compiler/glsl/glcpp')
+  ########################################################################################################################
+  ### Begin conversion from: src/compiler/glsl/glcpp/meson.build
+  ########################################################################################################################
+  bison_command=[]
+  if yacc_is_bison:
+    bison_command=[prog_bison,'-o','@OUTPUT0@','-p','glcpp_parser_','--defines=@OUTPUT1@','@INPUT@',]
+  else:
+    bison_command=[prog_bison,'-o','@OUTPUT0@','-p','glcpp_parser_','-H','@OUTPUT1@','@INPUT@',]
+  
+  
+  glcpp_parse=custom_target('glcpp-parse.[ch]',input='glcpp-parse.y',output=['glcpp-parse.c','glcpp-parse.h'],command=bison_command)
+  
+  glcpp_lex=custom_target('glcpp-lex.c',input='glcpp-lex.l',output='glcpp-lex.c',command=[prog_flex,'-o','@OUTPUT@','@INPUT@'],)
+  
+  libglcpp=static_library('glcpp',[glcpp_lex,glcpp_parse,files('glcpp.h','pp.c')],dependencies=idep_mesautil,include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],c_args=[no_override_init_args,c_msvc_compat_args],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  libglcpp_standalone=static_library('glcpp_standalone','pp_standalone_scaffolding.c',link_with=libglcpp,dependencies=idep_mesautil,include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],c_args=[no_override_init_args,c_msvc_compat_args],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  glcpp=executable('glcpp','glcpp.c',dependencies=[dep_m,idep_getopt,idep_mesautil],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],link_with=[libglcpp_standalone,libglsl_util],c_args=[no_override_init_args,c_msvc_compat_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  # Meson can't auto-skip these on cross builds because of the python wrapper
+  if with_any_opengl and with_tests and meson.can_run_host_binaries() and with_glcpp_tests:
+    modes=['unix','windows','oldmac','bizarro']
+  
+    for m in modes:
+      test('glcpp test ({})'.format(m),prog_python,args=[files('tests/glcpp_test.py'),glcpp,join_paths(meson.current_source_dir(),'tests'),'--{}'.format(m),],suite=['compiler','glcpp'],timeout=60,)
+  
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/compiler/glsl/glcpp/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/compiler/glsl')
+  
+  bison_command=[]
+  if yacc_is_bison:
+    bison_command=[prog_bison,'-o','@OUTPUT0@','-p','_mesa_glsl_','--defines=@OUTPUT1@','@INPUT@',]
+  else:
+    bison_command=[prog_bison,'-o','@OUTPUT0@','-p','_mesa_glsl_','-H','@OUTPUT1@','@INPUT@',]
+  
+  
+  glsl_parser=custom_target('glsl_parser',input='glsl_parser.yy',output=['glsl_parser.cpp','glsl_parser.h'],command=bison_command)
+  
+  glsl_lexer_cpp=custom_target('glsl_lexer_cpp',input='glsl_lexer.ll',output='glsl_lexer.cpp',command=[prog_flex_cpp,'-o','@OUTPUT@','@INPUT@'],)
+  
+  ir_expression_operation_constant_h=custom_target('ir_expression_operation_constant.h',input='ir_expression_operation.py',output='ir_expression_operation_constant.h',command=[prog_python,'@INPUT@','constant'],capture=True,)
+  
+  ir_expression_operation_strings_h=custom_target('ir_expression_operation_strings.h',input='ir_expression_operation.py',output='ir_expression_operation_strings.h',command=[prog_python,'@INPUT@','strings'],capture=True,)
+  
+  float64_glsl_h=custom_target('float64_glsl.h',input=[files_xxd,'float64.glsl'],output='float64_glsl.h',command=[prog_python,'@INPUT@','@OUTPUT@','-n','float64_source'],)
+  
+  cross_platform_settings_piece_all_h=custom_target('cross_platform_settings_piece_all.h',input=[files_xxd,'CrossPlatformSettings_piece_all.glsl'],output='cross_platform_settings_piece_all.h',command=[prog_python,'@INPUT@','@OUTPUT@','-n','cross_platform_settings_piece_all_header'],)
+  
+  bc1_glsl_h=custom_target('bc1_glsl.h',input=[files_xxd,'bc1.glsl'],output='bc1_glsl.h',command=[prog_python,'@INPUT@','@OUTPUT@','-n','bc1_source'],)
+  
+  bc4_glsl_h=custom_target('bc4_glsl.h',input=[files_xxd,'bc4.glsl'],output='bc4_glsl.h',command=[prog_python,'@INPUT@','@OUTPUT@','-n','bc4_source'],)
+  
+  etc2_rgba_stitch_glsl_h=custom_target('etc2_rgba_stitch_glsl.h',input=[files_xxd,'etc2_rgba_stitch.glsl'],output='etc2_rgba_stitch_glsl.h',command=[prog_python,'@INPUT@','@OUTPUT@','-n','etc2_rgba_stitch_source'],)
+  
+  astc_glsl_h=custom_target('astc_glsl.h',input=[files_xxd,'astc_decoder.glsl'],output='astc_glsl.h',command=[prog_python,'@INPUT@','@OUTPUT@','-n','astc_source'],)
+  
+  files_libglsl=files('ast.h','ast_array_index.cpp','ast_expr.cpp','ast_function.cpp','ast_to_hir.cpp','ast_type.cpp','builtin_functions.cpp','builtin_functions.h','builtin_types.cpp','builtin_variables.cpp','gl_nir_detect_function_recursion.c','gl_nir_lower_atomics.c','gl_nir_lower_images.c','gl_nir_lower_blend_equation_advanced.c','gl_nir_lower_buffers.c','gl_nir_lower_discard_flow.c','gl_nir_lower_named_interface_blocks.c','gl_nir_lower_packed_varyings.c','gl_nir_lower_samplers.c','gl_nir_lower_samplers_as_deref.c','gl_nir_lower_xfb_varying.c','gl_nir_link_atomics.c','gl_nir_link_interface_blocks.c','gl_nir_link_uniform_blocks.c','gl_nir_link_uniform_initializers.c','gl_nir_link_uniforms.c','gl_nir_link_varyings.c','gl_nir_link_varyings.h','gl_nir_link_xfb.c','gl_nir_linker.c','gl_nir_linker.h','gl_nir_opt_dead_builtin_varyings.c','gl_nir.h','glsl_parser_extras.cpp','glsl_parser_extras.h','glsl_symbol_table.cpp','glsl_symbol_table.h','glsl_to_nir.cpp','glsl_to_nir.h','hir_field_selection.cpp','ir_array_refcount.cpp','ir_array_refcount.h','ir_basic_block.cpp','ir_basic_block.h','ir_builder.cpp','ir_builder.h','ir_clone.cpp','ir_constant_expression.cpp','ir.cpp','ir.h','ir_equals.cpp','ir_expression_flattening.cpp','ir_expression_flattening.h','ir_function_detect_recursion.cpp','ir_function.cpp','ir_hierarchical_visitor.cpp','ir_hierarchical_visitor.h','ir_hv_accept.cpp','ir_optimization.h','ir_print_visitor.cpp','ir_print_visitor.h','ir_reader.cpp','ir_reader.h','ir_rvalue_visitor.cpp','ir_rvalue_visitor.h','ir_uniform.h','ir_validate.cpp','ir_variable_refcount.cpp','ir_variable_refcount.h','ir_visitor.h','linker.cpp','linker.h','linker_util.h','linker_util.cpp','link_functions.cpp','link_interface_blocks.cpp','list.h','lower_builtins.cpp','lower_instructions.cpp','lower_jumps.cpp','lower_mat_op_to_vec.cpp','lower_packing_builtins.cpp','lower_precision.cpp','lower_subroutine.cpp','lower_vec_index_to_cond_assign.cpp','lower_vector_derefs.cpp','opt_algebraic.cpp','opt_dead_builtin_variables.cpp','opt_dead_code.cpp','opt_dead_code_local.cpp','opt_flatten_nested_if_blocks.cpp','opt_flip_matrices.cpp','opt_function_inlining.cpp','opt_if_simplification.cpp','opt_minmax.cpp','opt_rebalance_tree.cpp','opt_tree_grafting.cpp','program.h','propagate_invariance.cpp','s_expression.cpp','s_expression.h','string_to_uint_map.cpp','string_to_uint_map.h','serialize.cpp','serialize.h','shader_cache.cpp','shader_cache.h',)
+  
+  files_libglsl_standalone=files('standalone_scaffolding.cpp','standalone_scaffolding.h','standalone.cpp','standalone.h',)
+  
+  libglsl_headers=[ir_expression_operation_h,cross_platform_settings_piece_all_h,bc1_glsl_h,bc4_glsl_h,etc2_rgba_stitch_glsl_h,astc_glsl_h]
+  
+  libglsl=static_library('glsl',[files_libglsl,glsl_parser,glsl_lexer_cpp,libglsl_headers,ir_expression_operation_strings_h,ir_expression_operation_constant_h,float64_glsl_h],c_args=[c_msvc_compat_args,no_override_init_args],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',link_with=libglcpp,include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],dependencies=idep_nir,build_by_default=False,)
+  
+  idep_libglsl=declare_dependency(sources=libglsl_headers,link_with=libglsl,)
+  
+  libglsl_standalone=static_library('glsl_standalone',[files_libglsl_standalone,ir_expression_operation_h],c_args=[c_msvc_compat_args,no_override_init_args],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],link_with=[libglsl,libglsl_util,libglcpp_standalone],dependencies=[idep_mesautil,idep_getopt,idep_compiler],build_by_default=False,)
+  
+  glsl_compiler=executable('glsl_compiler','main.cpp',c_args=[c_msvc_compat_args,no_override_init_args],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',dependencies=[dep_clock,dep_thread,idep_getopt,idep_mesautil],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],link_with=[libglsl_standalone],build_by_default=with_tools.count('glsl') > 0,install=with_tools.count('glsl') > 0,)
+  
+  glsl_test=executable('glsl_test',['test.cpp','test_optpass.cpp','test_optpass.h',ir_expression_operation_h],c_args=[c_msvc_compat_args,no_override_init_args],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],dependencies=[dep_clock,dep_thread,idep_getopt,idep_mesautil,idep_compiler],link_with=[libglsl,libglsl_standalone,libglsl_util],build_by_default=with_tools.count('glsl') > 0,install=with_tools.count('glsl') > 0,)
+  
+  if with_any_opengl and with_tests:
+    set_relative_dir('src/compiler/glsl/tests')
+    ########################################################################################################################
+    ### Begin conversion from: src/compiler/glsl/tests/meson.build
+    ########################################################################################################################
+    general_ir_test_files=files('array_refcount_test.cpp','builtin_variable_test.cpp','general_ir_test.cpp',)
+    general_ir_test_files+=ir_expression_operation_h
+    
+    if with_gles2:
+      general_ir_test_files+=files('test_gl_lower_mediump.cpp')
+    
+    
+    test('general_ir_test',executable('general_ir_test',general_ir_test_files,cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_glsl],link_with=[libglsl,libglsl_standalone,libglsl_util],dependencies=[dep_clock,dep_thread,idep_gtest,idep_mesautil,idep_nir],),suite=['compiler','glsl'],protocol='gtest',)
+    
+    test('sampler_types_test',executable('sampler_types_test',['sampler_types_test.cpp',ir_expression_operation_h],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_glsl],link_with=[libglsl,libglsl_util],dependencies=[dep_thread,idep_gtest,idep_mesautil,idep_compiler],),suite=['compiler','glsl'],protocol='gtest',)
+    
+    test('list_iterators',executable('list_iterators',['list_iterators.cpp'],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_glsl],link_with=[libglsl,libglsl_util],dependencies=[dep_thread,idep_gtest],),suite=['compiler','glsl'],protocol='gtest',)# Meson can't auto-skip these on cross builds because of the python wrapper
+    if meson.can_run_host_binaries():
+      test('glsl compiler warnings',prog_python,args=[files('warnings_test.py'),'--glsl-compiler',glsl_compiler,'--test-directory',join_paths(dir_source_root,'src','compiler','glsl','tests','warnings'),],suite=['compiler','glsl'],timeout=60,)
+    
+      test('glsl optimization',prog_python,args=[files('optimization_test.py'),'--test-runner',glsl_test],suite=['compiler','glsl'],)
+    
+    
+    if with_tools.count('glsl') > 0:
+      if with_gles2:
+        test('glsl lower-precision test',prog_python,args=[files('lower_precision_test.py'),glsl_compiler],suite=['compiler','glsl'],timeout=60,)
+    
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/compiler/glsl/tests/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/compiler/glsl')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/compiler/glsl/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/compiler')
+
+set_relative_dir('src/compiler/isaspec')
+########################################################################################################################
+### Begin conversion from: src/compiler/isaspec/meson.build
+########################################################################################################################
+prog_isaspec_decode=find_program('decode.py')
+idep_isaspec_decode=declare_dependency(include_directories=include_directories('.'))
+
+prog_isaspec_encode=find_program('encode.py')
+
+isaspec_py_deps=files('isa.py')
+
+libisaspec=static_library('isaspec',['isaspec.c'],dependencies=[idep_mesautil],gnu_symbol_visibility='hidden',)
+
+########################################################################################################################
+### End conversion from: src/compiler/isaspec/meson.build
+########################################################################################################################
+set_relative_dir('src/compiler')
+
+########################################################################################################################
+### End conversion from: src/compiler/meson.build
+########################################################################################################################
+set_relative_dir('src')
+if with_tools.count('drm-shim') > 0:
+  subdir('drm-shim')
+
+if with_imgui:
+  set_relative_dir('src/imgui')
+  ########################################################################################################################
+  ### Begin conversion from: src/imgui/meson.build
+  ########################################################################################################################
+  libimgui_core=static_library('imgui_core',files('imgui.cpp','imgui_draw.cpp','imgui_widgets.cpp'),cpp_args=['-w'],install=False)
+  
+  libimgui_core_dep=declare_dependency(link_with=libimgui_core,include_directories=include_directories('.'))
+  
+  ########################################################################################################################
+  ### End conversion from: src/imgui/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_platform_wayland:
+  subdir('egl/wayland/wayland-drm')
+
+if with_any_vk or with_gallium_zink:
+  set_relative_dir('src/vulkan')
+  ########################################################################################################################
+  ### Begin conversion from: src/vulkan/meson.build
+  ########################################################################################################################
+  vk_api_xml=files('registry/vk.xml')
+  
+  vulkan_icd_link_args=[]
+  vulkan_icd_link_depends=[]
+  
+  if with_platform_android:
+    vulkan_icd_symbols=files('vulkan-icd-android-symbols.txt')
+    if with_ld_version_script:
+      vulkan_icd_link_args+=['-Wl,--version-script',join_paths(meson.current_source_dir(),'vulkan-android.sym')]
+      vulkan_icd_link_depends+=files('vulkan-android.sym')
+  
+  else:
+    vulkan_icd_symbols=files('vulkan-icd-symbols.txt')
+    if with_ld_version_script:
+      vulkan_icd_link_args+=['-Wl,--version-script',join_paths(meson.current_source_dir(),'vulkan.sym')]
+      vulkan_icd_link_depends+=files('vulkan.sym')
+  
+  
+  
+  inc_vulkan_util=include_directories('util')
+  
+  vulkan_wsi_deps=[]
+  vulkan_wsi_list=[]
+  
+  vulkan_api_def=custom_target('vulkan_api.def',input='vulkan_api.def.in',output='vulkan_api.def',command=gen_vs_module_defs_normal_command,)
+  
+  if with_platform_x11:
+    vulkan_wsi_deps+=[dep_xcb,dep_x11_xcb,dep_xcb_dri3,dep_xcb_present,dep_xcb_xfixes,dep_xcb_sync,dep_xcb_xrandr,dep_xcb_shm,dep_xshmfence,]
+    vulkan_wsi_list += ['-DVK_USE_PLATFORM_XCB_KHR'] if isinstance(vulkan_wsi_list, list) else '-DVK_USE_PLATFORM_XCB_KHR'
+    vulkan_wsi_list += ['-DVK_USE_PLATFORM_XLIB_KHR'] if isinstance(vulkan_wsi_list, list) else '-DVK_USE_PLATFORM_XLIB_KHR'
+    if with_xcb_keysyms:
+      vulkan_wsi_deps+=dep_xcb_keysyms
+  
+  
+  if with_platform_wayland:
+    vulkan_wsi_deps+=dep_wayland_client
+    vulkan_wsi_list += ['-DVK_USE_PLATFORM_WAYLAND_KHR'] if isinstance(vulkan_wsi_list, list) else '-DVK_USE_PLATFORM_WAYLAND_KHR'
+  
+  if system_has_kms_drm and not with_platform_android:
+    vulkan_wsi_deps+=[dep_libdrm]
+    vulkan_wsi_list += ['-DVK_USE_PLATFORM_DISPLAY_KHR'] if isinstance(vulkan_wsi_list, list) else '-DVK_USE_PLATFORM_DISPLAY_KHR'
+  
+  if with_xlib_lease:
+    vulkan_wsi_deps+=[dep_xlib_xrandr]
+    vulkan_wsi_list += ['-DVK_USE_PLATFORM_XLIB_XRANDR_EXT'] if isinstance(vulkan_wsi_list, list) else '-DVK_USE_PLATFORM_XLIB_XRANDR_EXT'
+  
+  if with_platform_android:
+    vulkan_wsi_list += ['-DVK_USE_PLATFORM_ANDROID_KHR'] if isinstance(vulkan_wsi_list, list) else '-DVK_USE_PLATFORM_ANDROID_KHR'
+  
+  if with_platform_windows:
+    vulkan_wsi_list += ['-DVK_USE_PLATFORM_WIN32_KHR'] if isinstance(vulkan_wsi_list, list) else '-DVK_USE_PLATFORM_WIN32_KHR'
+  
+  if host_machine.system()=='darwin':
+    vulkan_wsi_list += ['-DVK_USE_PLATFORM_MACOS_MVK'] if isinstance(vulkan_wsi_list, list) else '-DVK_USE_PLATFORM_MACOS_MVK'
+    vulkan_wsi_list += ['-DVK_USE_PLATFORM_METAL_EXT'] if isinstance(vulkan_wsi_list, list) else '-DVK_USE_PLATFORM_METAL_EXT'
+  
+  
+  idep_vulkan_wsi_defines=declare_dependency(compile_args=vulkan_wsi_list,dependencies=vulkan_wsi_deps,)
+  vulkan_wsi_deps+=idep_vulkan_wsi_defines
+  
+  set_relative_dir('src/vulkan/util')
+  ########################################################################################################################
+  ### Begin conversion from: src/vulkan/util/meson.build
+  ########################################################################################################################
+  vk_extensions_depend_files=[]
+  vk_entrypoints_depend_files=[files('vk_extensions.py'),vk_extensions_depend_files,]
+  vk_extensions_gen_depend_files=[files('vk_extensions.py'),vk_extensions_depend_files,]
+  vk_dispatch_table_gen_depend_files=[files('vk_entrypoints.py'),vk_entrypoints_depend_files,]
+  vk_dispatch_trampolines_gen_depend_files=[files('vk_entrypoints.py'),vk_entrypoints_depend_files,]
+  vk_entrypoints_gen_depend_files=[files('vk_entrypoints.py'),vk_entrypoints_depend_files,]
+  vk_cmd_queue_gen_depend_files=[files('vk_entrypoints.py'),vk_entrypoints_depend_files,]
+  vk_physical_device_features_gen_depend_files=[files('vk_extensions.py'),]
+  vk_physical_device_properties_gen_depend_files=[files('vk_extensions.py'),]
+  vk_physical_device_spirv_caps_gen_depend_files=[files('vk_extensions.py'),files('vk_physical_device_features_gen.py'),]
+  vk_synchronization_helpers_gen_depend_files=[files('vk_extensions.py'),]
+  
+  vk_entrypoints_gen=files('vk_entrypoints_gen.py')
+  vk_extensions_gen=files('vk_extensions_gen.py')
+  vk_icd_gen=files('vk_icd_gen.py')
+  vk_cmd_queue_gen=files('vk_cmd_queue_gen.py')
+  vk_dispatch_trampolines_gen=files('vk_dispatch_trampolines_gen.py')
+  vk_physical_device_features_gen=files('vk_physical_device_features_gen.py')
+  vk_physical_device_properties_gen=files('vk_physical_device_properties_gen.py')
+  vk_physical_device_spirv_caps_gen=files('vk_physical_device_spirv_caps_gen.py')
+  vk_synchronization_helpers_gen=files('vk_synchronization_helpers_gen.py')
+  
+  files_vulkan_util=files('vk_alloc.c','vk_format.c','vk_util.c',)
+  
+  vk_dispatch_table=custom_target('vk_dispatch_table',input=['vk_dispatch_table_gen.py',vk_api_xml],output=['vk_dispatch_table.c','vk_dispatch_table.h'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--out-c','@OUTPUT0@','--out-h','@OUTPUT1@','--beta',str(with_vulkan_beta)],depend_files=vk_dispatch_table_gen_depend_files,)
+  
+  vk_enum_to_str=custom_target('vk_enum_to_str',input=['gen_enum_to_str.py',vk_api_xml],output=['vk_enum_to_str.c','vk_enum_to_str.h','vk_enum_defines.h'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--outdir',meson.current_build_dir(),'--beta',str(with_vulkan_beta)],)
+  
+  vk_struct_type_cast=custom_target('vk_struct_type_cast',input=['vk_struct_type_cast_gen.py',vk_api_xml],output=['vk_struct_type_cast.h'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--outdir',meson.current_build_dir(),'--beta',str(with_vulkan_beta)],)
+  
+  vk_extensions=custom_target('vk_extensions',input=['vk_extensions_gen.py',vk_api_xml],output=['vk_extensions.c','vk_extensions.h'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--out-c','@OUTPUT0@','--out-h','@OUTPUT1@'],depend_files=vk_extensions_gen_depend_files,)
+  
+  libvulkan_util=static_library('vulkan_util',[files_vulkan_util,vk_dispatch_table,vk_enum_to_str,vk_struct_type_cast,vk_extensions],include_directories=[inc_include,inc_src],dependencies=[vulkan_wsi_deps,idep_mesautil,idep_nir_headers],c_args=[c_msvc_compat_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  idep_vulkan_util_headers=declare_dependency(sources=[vk_dispatch_table[1],vk_enum_to_str[1],vk_struct_type_cast[0],vk_extensions[1]],include_directories=include_directories('.'))
+  
+  idep_vulkan_util=declare_dependency(link_with=libvulkan_util,dependencies=idep_vulkan_util_headers)
+  
+  ########################################################################################################################
+  ### End conversion from: src/vulkan/util/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/vulkan')
+  set_relative_dir('src/vulkan/runtime')
+  ########################################################################################################################
+  ### Begin conversion from: src/vulkan/runtime/meson.build
+  ########################################################################################################################
+  vulkan_lite_runtime_files=files('rmv/vk_rmv_common.c','rmv/vk_rmv_exporter.c','vk_acceleration_structure.c','vk_blend.c','vk_buffer.c','vk_buffer_view.c','vk_cmd_copy.c','vk_cmd_enqueue.c','vk_command_buffer.c','vk_command_pool.c','vk_debug_report.c','vk_debug_utils.c','vk_deferred_operation.c','vk_descriptor_set_layout.c','vk_descriptors.c','vk_descriptor_update_template.c','vk_device.c','vk_device_memory.c','vk_fence.c','vk_framebuffer.c','vk_graphics_state.c','vk_image.c','vk_log.c','vk_object.c','vk_physical_device.c','vk_pipeline_layout.c','vk_query_pool.c','vk_queue.c','vk_render_pass.c','vk_sampler.c','vk_semaphore.c','vk_standard_sample_locations.c','vk_sync.c','vk_sync_binary.c','vk_sync_dummy.c','vk_sync_timeline.c','vk_synchronization.c','vk_video.c','vk_ycbcr_conversion.c',)
+  
+  vulkan_lite_runtime_deps=[vulkan_wsi_deps,idep_mesautil,idep_nir_headers,idep_vulkan_util,]
+  
+  if dep_libdrm.found():
+    vulkan_lite_runtime_files+=files('vk_drm_syncobj.c')
+    vulkan_lite_runtime_deps+=dep_libdrm
+  
+  
+  if with_platform_android:
+    vulkan_lite_runtime_files+=files('vk_android.c')
+    vulkan_lite_runtime_deps+=[dep_android,idep_u_gralloc]
+  
+  
+  vk_common_entrypoints=custom_target('vk_common_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['vk_common_entrypoints.h','vk_common_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','vk_common','--beta',str(with_vulkan_beta)],depend_files=vk_entrypoints_gen_depend_files,)
+  
+  vk_cmd_queue=custom_target('vk_cmd_queue',input=[vk_cmd_queue_gen,vk_api_xml],output=['vk_cmd_queue.c','vk_cmd_queue.h'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--out-c','@OUTPUT0@','--out-h','@OUTPUT1@','--beta',str(with_vulkan_beta)],depend_files=vk_cmd_queue_gen_depend_files,)
+  
+  vk_cmd_enqueue_entrypoints=custom_target('vk_cmd_enqueue_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['vk_cmd_enqueue_entrypoints.h','vk_cmd_enqueue_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','vk_cmd_enqueue','--prefix','vk_cmd_enqueue_unless_primary','--beta',str(with_vulkan_beta)],depend_files=vk_entrypoints_gen_depend_files,)
+  
+  vk_dispatch_trampolines=custom_target('vk_dispatch_trampolines',input=[vk_dispatch_trampolines_gen,vk_api_xml],output=['vk_dispatch_trampolines.c','vk_dispatch_trampolines.h'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--out-c','@OUTPUT0@','--out-h','@OUTPUT1@','--beta',str(with_vulkan_beta)],depend_files=vk_dispatch_trampolines_gen_depend_files,)
+  
+  vk_physical_device_features=custom_target('vk_physical_device_features',input=[vk_physical_device_features_gen,vk_api_xml],output=['vk_physical_device_features.c','vk_physical_device_features.h'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--out-c','@OUTPUT0@','--out-h','@OUTPUT1@','--beta',str(with_vulkan_beta)],depend_files=vk_physical_device_features_gen_depend_files,)
+  
+  vk_physical_device_properties=custom_target('vk_physical_device_properties',input=[vk_physical_device_properties_gen,vk_api_xml],output=['vk_physical_device_properties.c','vk_physical_device_properties.h'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--out-c','@OUTPUT0@','--out-h','@OUTPUT1@','--beta',str(with_vulkan_beta)],depend_files=vk_physical_device_properties_gen_depend_files,)
+  
+  vk_physical_device_spirv_caps=custom_target('vk_physical_device_spirv_caps',input=[vk_physical_device_spirv_caps_gen,vk_api_xml],output='vk_physical_device_spirv_caps.c',command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--out-c','@OUTPUT0@','--beta',str(with_vulkan_beta)],depend_files=vk_physical_device_spirv_caps_gen_depend_files,)
+  
+  vk_synchronization_helpers=custom_target('vk_synchronization_helpers',input=[vk_synchronization_helpers_gen,vk_api_xml],output='vk_synchronization_helpers.c',command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--out-c','@OUTPUT0@','--beta',str(with_vulkan_beta)],depend_files=vk_synchronization_helpers_gen_depend_files,)
+  
+  vk_format_info=custom_target('vk_format_info',input=['vk_format_info_gen.py',vk_api_xml],output=['vk_format_info.c','vk_format_info.h'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--out-c','@OUTPUT0@','--out-h','@OUTPUT1@'],)
+  
+  vulkan_lite_runtime_files+=[vk_cmd_enqueue_entrypoints,vk_cmd_queue,vk_common_entrypoints,vk_dispatch_trampolines,vk_format_info,vk_physical_device_features,vk_physical_device_properties,vk_physical_device_spirv_caps,vk_synchronization_helpers,]# as a runtime library dep to ensure header gen order
+  vulkan_lite_runtime_header_gen_deps=declare_dependency(sources=[vk_cmd_enqueue_entrypoints[0],vk_cmd_queue[1],vk_common_entrypoints[0],vk_dispatch_trampolines[1],vk_format_info[1],vk_physical_device_features[1],vk_physical_device_properties[1],],)
+  
+  vulkan_lite_runtime_deps+=vulkan_lite_runtime_header_gen_deps
+  
+  libvulkan_lite_runtime=static_library('vulkan_lite_runtime',vulkan_lite_runtime_files,include_directories=[inc_include,inc_src],dependencies=vulkan_lite_runtime_deps,c_args=c_msvc_compat_args,gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  libvulkan_lite_instance=static_library('vulkan_lite_instance',['vk_instance.c'],include_directories=[inc_include,inc_src],dependencies=vulkan_lite_runtime_deps,c_args=['-DVK_LITE_RUNTIME_INSTANCE=1',c_msvc_compat_args],gnu_symbol_visibility='hidden',build_by_default=False,)# indeed generated before being compiled with, as long as either one of below
+  # is included as a dependency:
+  # - idep_vulkan_lite_runtime_headers
+  # - idep_vulkan_lite_runtime
+  # - idep_vulkan_runtime_headers
+  # - idep_vulkan_runtime
+  idep_vulkan_lite_runtime_headers=declare_dependency(sources=[spirv_info_h,vk_cmd_enqueue_entrypoints[0],vk_cmd_queue[1],vk_common_entrypoints[0],vk_physical_device_features[1],vk_physical_device_properties[1],],include_directories=include_directories('.'),)# https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/10506
+  if get_option('backend').startswith('vs'):
+    idep_vulkan_lite_runtime=declare_dependency(link_with=[libvulkan_lite_runtime,libvulkan_lite_instance],dependencies=idep_vulkan_lite_runtime_headers)
+  else:
+    idep_vulkan_lite_runtime=declare_dependency(link_whole=[libvulkan_lite_runtime,libvulkan_lite_instance],dependencies=idep_vulkan_lite_runtime_headers)
+  
+  
+  vulkan_runtime_files=files('vk_meta.c','vk_meta_blit_resolve.c','vk_meta_clear.c','vk_meta_draw_rects.c','vk_nir.c','vk_nir_convert_ycbcr.c','vk_pipeline.c','vk_pipeline_cache.c','vk_shader.c','vk_shader_module.c','vk_texcompress_etc2.c',)
+  
+  vulkan_runtime_deps=[vulkan_lite_runtime_deps,idep_nir,idep_vtn,]
+  
+  if prog_glslang.found():
+    vulkan_runtime_files+=files('vk_texcompress_astc.c')
+    vulkan_runtime_files+=custom_target('astc_spv.h',input=astc_decoder_glsl_file,output='astc_spv.h',command=[prog_glslang,'-V','-S','comp','-x','-o','@OUTPUT@','@INPUT@',glslang_quiet,glslang_depfile,],depfile='astc_spv.h.d',)
+  
+  
+  libvulkan_runtime=static_library('vulkan_runtime',[vulkan_runtime_files],include_directories=[inc_include,inc_src],dependencies=vulkan_runtime_deps,c_args=c_msvc_compat_args,gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  libvulkan_instance=static_library('vulkan_instance',['vk_instance.c'],include_directories=[inc_include,inc_src],dependencies=vulkan_runtime_deps,c_args=['-DVK_LITE_RUNTIME_INSTANCE=0',c_msvc_compat_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  if get_option('backend').startswith('vs'):
+    idep_vulkan_runtime_body=declare_dependency(link_with=[libvulkan_lite_runtime,libvulkan_runtime,libvulkan_instance],)
+  else:
+    idep_vulkan_runtime_body=declare_dependency(link_whole=[libvulkan_lite_runtime,libvulkan_runtime,libvulkan_instance],)
+  
+  
+  idep_vulkan_runtime_headers=idep_vulkan_lite_runtime_headers
+  
+  idep_vulkan_runtime=declare_dependency(dependencies=[idep_vulkan_runtime_headers,idep_vulkan_runtime_body,])
+  
+  ########################################################################################################################
+  ### End conversion from: src/vulkan/runtime/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/vulkan')
+  set_relative_dir('src/vulkan/wsi')
+  ########################################################################################################################
+  ### Begin conversion from: src/vulkan/wsi/meson.build
+  ########################################################################################################################
+  files_vulkan_wsi=files('wsi_common.c')
+  links_vulkan_wsi=[]
+  platform_deps=[]
+  
+  if dep_libdrm.found():
+    files_vulkan_wsi+=files('wsi_common_drm.c')
+  
+  
+  if with_platform_x11:
+    files_vulkan_wsi+=files('wsi_common_x11.c')
+  
+  
+  if with_platform_wayland:
+    files_vulkan_wsi+=files('wsi_common_wayland.c')
+    files_vulkan_wsi+=wp_files['linux-dmabuf-unstable-v1']
+    files_vulkan_wsi+=wp_files['presentation-time']
+    files_vulkan_wsi+=wp_files['tearing-control-v1']
+    links_vulkan_wsi+=libloader_wayland_helper
+    files_vulkan_wsi+=wp_files['linux-drm-syncobj-v1']
+  
+  
+  if with_platform_windows:
+    files_vulkan_wsi+=files('wsi_common_win32.cpp')
+    platform_deps+=dep_dxheaders
+  else:
+    files_vulkan_wsi+=files('wsi_common_headless.c')
+  
+  
+  if system_has_kms_drm and not with_platform_android:
+    files_vulkan_wsi+=files('wsi_common_display.c')
+  
+  
+  wsi_entrypoints=custom_target('wsi_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['wsi_common_entrypoints.h','wsi_common_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','wsi','--beta',str(with_vulkan_beta)],depend_files=vk_entrypoints_gen_depend_files,)
+  
+  libvulkan_wsi=static_library('vulkan_wsi',[files_vulkan_wsi,wsi_entrypoints],include_directories=[inc_include,inc_src],dependencies=[vulkan_wsi_deps,dep_libdrm,dep_libudev,idep_vulkan_util_headers,idep_vulkan_runtime_headers,idep_xmlconfig,idep_mesautil,platform_deps,idep_blake3],link_with=links_vulkan_wsi,gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  idep_vulkan_wsi_headers=declare_dependency(sources=wsi_entrypoints[0],dependencies=idep_vulkan_wsi_defines,include_directories=include_directories('.'))# See this discussion here:
+  # https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/10506
+  if get_option('backend').startswith('vs'):
+    idep_vulkan_wsi=declare_dependency(link_with=libvulkan_wsi,dependencies=idep_vulkan_wsi_headers)
+  else:
+    idep_vulkan_wsi=declare_dependency(link_whole=libvulkan_wsi,dependencies=[idep_vulkan_wsi_headers,dep_libudev])
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/vulkan/wsi/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/vulkan')
+  if with_vulkan_overlay_layer:
+    subdir('overlay-layer')
+  
+  if with_vulkan_device_select_layer:
+    subdir('device-select-layer')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/vulkan/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_any_intel:
+  set_relative_dir('src/intel')
+  ########################################################################################################################
+  ### Begin conversion from: src/intel/meson.build
+  ########################################################################################################################
+  inc_intel=include_directories('.')
+  
+  set_relative_dir('src/intel/genxml')
+  ########################################################################################################################
+  ### Begin conversion from: src/intel/genxml/meson.build
+  ########################################################################################################################
+  gen_xml_files=['gen4.xml','gen45.xml','gen5.xml','gen6.xml','gen7.xml','gen75.xml','gen8.xml','gen9.xml','gen11.xml','gen12.xml','gen125.xml','gen20.xml',]
+  
+  gen_xml_rt_files=['gen125_rt.xml','gen20_rt.xml',]
+  
+  gen_pack_header_deps=files('intel_genxml.py','util.py')
+  for f in gen_xml_files+gen_xml_rt_files:
+    gen_pack_header_deps+=files(f)
+  
+  
+  genX_xml_h=custom_target('genX_xml.h',input=['../../util/gen_zipped_xml_file.py',gen_xml_files],output='genX_xml.h',command=[prog_python,'@INPUT@'],capture=True,)
+  
+  genX_bits_included_symbols=['MI_BATCH_BUFFER_START::Batch Buffer Start Address','MI_REPORT_PERF_COUNT::Memory Address','MI_STORE_DATA_IMM::Address','MI_STORE_DATA_IMM::Immediate Data','MI_STORE_REGISTER_MEM::Memory Address','3DSTATE_DEPTH_BUFFER::Surface Base Address','3DSTATE_DEPTH_BUFFER::Surface Pitch','3DSTATE_STENCIL_BUFFER::Surface Base Address','3DSTATE_STENCIL_BUFFER::Surface Pitch','3DSTATE_HIER_DEPTH_BUFFER::Surface Base Address','3DSTATE_HIER_DEPTH_BUFFER::Surface Pitch','3DSTATE_CLEAR_PARAMS','3DSTATE_SO_BUFFER::Surface Base Address','3DSTATE_SO_BUFFER::Stream Offset','3DSTATE_CPSIZE_CONTROL_BUFFER::Surface Base Address','3DSTATE_CPSIZE_CONTROL_BUFFER::Surface Pitch','RENDER_SURFACE_STATE::Surface Base Address','RENDER_SURFACE_STATE::Surface Pitch','RENDER_SURFACE_STATE::Auxiliary Surface Base Address','RENDER_SURFACE_STATE::Auxiliary Surface Pitch','RENDER_SURFACE_STATE::Clear Value Address','RENDER_SURFACE_STATE::Red Clear Color','RENDER_SURFACE_STATE::Green Clear Color','RENDER_SURFACE_STATE::Blue Clear Color','RENDER_SURFACE_STATE::Alpha Clear Color','RENDER_SURFACE_STATE::Width','RENDER_SURFACE_STATE::Height','RENDER_SURFACE_STATE::Depth','RENDER_SURFACE_STATE::Surface Type','RENDER_SURFACE_STATE::Render Target View Extent','CLEAR_COLOR','VERTEX_BUFFER_STATE::Buffer Starting Address','CPS_STATE','RT_DISPATCH_GLOBALS::Hit Group Table','RT_DISPATCH_GLOBALS::Miss Group Table','RT_DISPATCH_GLOBALS::Callable Group Table','RT_DISPATCH_GLOBALS::Launch Width','RT_DISPATCH_GLOBALS::Launch Height','RT_DISPATCH_GLOBALS::Launch Depth',]
+  
+  genX_bits_h=custom_target('genX_bits.h',input=['gen_bits_header.py',gen_xml_files,gen_xml_rt_files],output='genX_bits.h',command=[prog_python,'@INPUT@','-o','@OUTPUT@','--include-symbols',','.join(genX_bits_included_symbols)],depend_files=gen_pack_header_deps)
+  
+  gen_xml_pack=[]
+  for f in gen_xml_files+gen_xml_rt_files:
+    _name='{}_pack.h'.format(f.split('.')[0])
+    gen_xml_pack+=custom_target(_name,input=['gen_pack_header.py',f],output=_name,command=[prog_python,'@INPUT@','--engines=render,blitter,video'],capture=True,depend_files=gen_pack_header_deps)
+  
+  
+  genX_cl_included_symbols=['3DSTATE_INDEX_BUFFER','3DSTATE_VERTEX_BUFFERS','3DPRIMITIVE','3DPRIMITIVE_EXTENDED','MI_ARB_CHECK','MI_BATCH_BUFFER_START','VERTEX_BUFFER_STATE',]
+  
+  gen_cl_xml_pack=[]
+  for f in gen_xml_files+gen_xml_rt_files:
+    _name='{}_cl_pack.h'.format(f.split('.')[0])
+    gen_cl_xml_pack+=custom_target(_name,input=['gen_pack_header.py',f],output=_name,command=[prog_python,'@INPUT@','--engines=render,blitter,video','--opencl','--repack','--include-symbols',','.join(genX_cl_included_symbols)],capture=True,depend_files=gen_pack_header_deps)
+  
+  
+  gen_pack_header_py=files('gen_pack_header.py')
+  
+  idep_genxml=declare_dependency(include_directories=include_directories('.'),dependencies=idep_mesautil,sources=[gen_xml_pack,gen_cl_xml_pack,genX_bits_h,genX_xml_h])
+  
+  for f in gen_xml_files+gen_xml_rt_files:
+    test('genxml sort {}'.format(f),prog_python,args=[files('gen_sort_tags.py'),files(f),'--validate','--quiet'],suite=['intel'],)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/intel/genxml/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/intel')
+  set_relative_dir('src/intel/dev')
+  ########################################################################################################################
+  ### Begin conversion from: src/intel/dev/meson.build
+  ########################################################################################################################
+  files_libintel_dev=files('i915/intel_device_info.c','i915/intel_device_info.h','xe/intel_device_info.c','xe/intel_device_info.h','intel_debug.c','intel_debug.h','intel_device_info.c','intel_device_info.h','intel_hwconfig.c','intel_hwconfig.h','intel_kmd.c','intel_kmd.h',)
+  
+  intel_dev_wa_src=custom_target('intel_wa.[ch]',input=['gen_wa_helpers.py','mesa_defs.json'],output=['intel_wa.h','intel_wa.c'],command=[prog_python,'@INPUT@','@OUTPUT@'])
+  
+  intel_dev_info_gen_src=custom_target('intel_device_info_gen.h',input='intel_device_info_gen_h.py',depend_files='intel_device_info.py',output=['intel_device_info_gen.h'],command=[prog_python,'@INPUT@','@OUTPUT@'])
+  
+  intel_dev_serialize_src=custom_target('intel_device_info_serialize_gen.c',input='intel_device_info_serialize_gen_c.py',depend_files='intel_device_info.py',output=['intel_device_info_serialize_gen.c'],command=[prog_python,'@INPUT@','@OUTPUT@'])# ensures intel_wa.h exists before implementation files are compiled
+  idep_intel_dev_wa=declare_dependency(sources=[intel_dev_wa_src[0]])
+  
+  idep_intel_dev_info_gen=declare_dependency(sources=[intel_dev_info_gen_src[0]])
+  
+  libintel_dev=static_library('intel_dev',[files_libintel_dev,sha1_h,[intel_dev_wa_src]],include_directories=[inc_include,inc_src,inc_intel],dependencies=[dep_libdrm,idep_mesautil,idep_intel_dev_wa,idep_intel_dev_info_gen],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',)
+  
+  idep_intel_dev=declare_dependency(link_with=libintel_dev,dependencies=[idep_intel_dev_wa,idep_intel_dev_info_gen],sources=[intel_dev_info_gen_src,intel_dev_wa_src[0]],)
+  
+  if with_tests:
+    test('intel_device_info_test',executable('intel_device_info_test','intel_device_info_test.c',include_directories=[inc_include,inc_src,inc_intel],dependencies=idep_intel_dev,),suite=['intel'],)
+  
+  
+  if with_tests and with_tools.count('drm-shim') > 0 and with_tools.count('intel') > 0:
+    platforms=[[70,['ivb','byt']],[75,['hsw']],[80,['bdw','chv']],[90,['skl','kbl','aml','cml','whl','bxt','glk']],[110,['icl','ehl','jsl']],[120,['tgl','rkl','adl','rpl','dg1','sg1']],[125,['dg2']],]
+    intel_devinfo_override_test=executable('intel_device_info_override_test','intel_device_info_override_test.c',dependencies=[dep_libdrm,idep_intel_dev],include_directories=[inc_include,inc_src,inc_intel],)
+    intel_drm_ld_preload=join_paths(meson.current_build_dir(),'..','tools','libintel_noop_drm_shim.so')
+    for _gens in platforms:
+      gen=_gens[0]
+      for p in _gens[1]:
+        test('intel_device_info_override_test_{}'.format(p),intel_devinfo_override_test,args='{}'.format(gen),env=['LD_PRELOAD={}'.format(intel_drm_ld_preload),'INTEL_STUB_GPU_PLATFORM={}'.format(p),'STRACEDIR=meson-logs/strace/intel_device_info_override_test_{}'.format(p),],suite=['intel'],)
+  
+  
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/intel/dev/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/intel')
+  if with_intel_hasvk or with_intel_vk or with_gallium_crocus or with_gallium_iris:
+    set_relative_dir('src/intel/blorp')
+    ########################################################################################################################
+    ### Begin conversion from: src/intel/blorp/meson.build
+    ########################################################################################################################
+    files_libblorp=files('blorp.c','blorp.h','blorp_blit.c','blorp_clear.c','blorp_nir_builder.h','blorp_priv.h',)
+    
+    files_blorp_brw=files('blorp_genX_exec_brw.h','blorp_brw.c',)
+    
+    files_blorp_elk=files('blorp_genX_exec_elk.h','blorp_elk.c',)
+    
+    libblorp=static_library('blorp',[files_libblorp,files_blorp_brw],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[idep_nir_headers,idep_genxml,idep_mesautil,idep_intel_dev],build_by_default=False,)
+    
+    idep_intel_blorp=declare_dependency(link_with=libblorp,)
+    
+    libblorp_elk=static_library('blorp_elk',[files_libblorp,files_blorp_elk],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[idep_nir_headers,idep_genxml,idep_mesautil,idep_intel_dev],build_by_default=True,)
+    
+    idep_intel_blorp_elk=declare_dependency(dependencies=[idep_intel_dev],link_with=libblorp_elk,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/intel/blorp/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/intel')
+  
+  set_relative_dir('src/intel/isl')
+  ########################################################################################################################
+  ### Begin conversion from: src/intel/isl/meson.build
+  ########################################################################################################################
+  isl_per_hw_ver_files=files('isl_emit_cpb.c','isl_emit_depth_stencil.c','isl_surface_state.c','isl_genX_helpers.h',)
+  
+  isl_gfx4_files=files('isl_gfx4.c','isl_gfx4.h',)
+  
+  isl_gfx6_files=files('isl_gfx6.c','isl_gfx6.h',)
+  
+  isl_gfx7_files=files('isl_gfx7.c','isl_gfx7.h',)
+  
+  isl_gfx8_files=files('isl_gfx8.c','isl_gfx8.h',)
+  
+  isl_gfx9_files=files('isl_gfx9.c','isl_gfx9.h',)
+  
+  isl_gfx12_files=files('isl_gfx12.c','isl_gfx12.h',)
+  
+  isl_gfx125_files=files('isl_gfx12.c','isl_gfx12.h',)
+  
+  isl_gfx20_files=files('isl_gfx20.c','isl_gfx20.h',)
+  
+  isl_per_hw_ver_libs=[]
+  for g in [['40',isl_gfx4_files],['50',[]],['60',isl_gfx6_files],['70',isl_gfx7_files],['75',[]],['80',isl_gfx8_files],['90',isl_gfx9_files],['110',[]],['120',isl_gfx12_files],['125',isl_gfx12_files],['200',isl_gfx20_files]]:
+    _gfx_ver=g[0]
+    isl_per_hw_ver_libs+=static_library('isl_per_hw_ver{}'.format(_gfx_ver),[g[1],isl_per_hw_ver_files],include_directories=[inc_include,inc_src,inc_intel],dependencies=[idep_mesautil,idep_intel_dev,idep_genxml],c_args=[no_override_init_args,'-DGFX_VERx10={}'.format(_gfx_ver)],gnu_symbol_visibility='hidden',)
+  
+  
+  isl_format_layout_c=custom_target('isl_format_layout.c',input=['gen_format_layout.py','isl_format_layout.csv'],output='isl_format_layout.c',command=[prog_python,'@INPUT0@','--csv','@INPUT1@','--out','@OUTPUT@'],)
+  
+  files_isl_tiled_memcpy=files('isl_tiled_memcpy_normal.c')
+  
+  files_isl_tiled_memcpy_sse41=files('isl_tiled_memcpy_sse41.c',)
+  
+  isl_tiled_memcpy=static_library('isl_tiled_memcpy',[files_isl_tiled_memcpy],include_directories=[inc_include,inc_src,inc_intel,],dependencies=[idep_mesautil,idep_intel_dev],c_args=[no_override_init_args,sse2_arg],gnu_symbol_visibility='hidden',extra_files=['isl_tiled_memcpy.c'])
+  
+  if with_sse41:
+    isl_tiled_memcpy_sse41=static_library('isl_tiled_memcpy_sse41',[files_isl_tiled_memcpy_sse41],include_directories=[inc_include,inc_src,inc_intel,],dependencies=[idep_mesautil,idep_intel_dev],link_args=['-Wl,--exclude-libs=ALL'],c_args=[no_override_init_args,sse2_arg,sse41_args],gnu_symbol_visibility='hidden',extra_files=['isl_tiled_memcpy.c'])
+  else:
+    isl_tiled_memcpy_sse41=[]
+  
+  
+  libisl_files=files('isl.c','isl.h','isl_aux_info.c','isl_drm.c','isl_genX_priv.h','isl_format.c','isl_priv.h','isl_storage_image.c',)
+  
+  libisl=static_library('isl',[libisl_files,isl_format_layout_c,genX_bits_h],include_directories=[inc_include,inc_src,inc_intel],link_with=[isl_per_hw_ver_libs,isl_tiled_memcpy,isl_tiled_memcpy_sse41],dependencies=[idep_mesautil,idep_intel_dev],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',)
+  
+  if with_intel_tools:
+    isl_query=executable('isl_query',files('isl_query.c'),dependencies=[idep_mesautil,dep_m,idep_intel_dev],include_directories=[inc_include,inc_src,inc_intel],link_with=[libisl],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=False)
+  
+  
+  if with_tests:
+    test('isl_surf_get_image_offset',executable('isl_surf_get_image_offset_test','tests/isl_surf_get_image_offset_test.c',dependencies=[dep_m,idep_mesautil,idep_intel_dev],link_with=libisl,include_directories=[inc_include,inc_src,inc_intel],),suite=['intel'],)
+    test('isl_aux_info',executable('isl_aux_info_test',['tests/isl_aux_info_test.cpp','isl_aux_info.c',],dependencies=[dep_m,idep_gtest,idep_mesautil,idep_intel_dev],include_directories=[inc_include,inc_src,inc_intel],c_args='-DIN_UNIT_TEST',cpp_args='-DIN_UNIT_TEST',),suite=['intel'],protocol='gtest',)
+    test('isl_tile_std_y',executable('isl_tile_std_y_test','tests/isl_tile_std_y_test.c',dependencies=dep_m,include_directories=[inc_include,inc_src,inc_intel],link_with=[libisl,libintel_dev],),suite=['intel'],)
+    test('isl_tilememcpy',executable('isl_tilememcpy_test',['tests/isl_tilememcpy_tiled_unittest.cpp',],dependencies=[dep_m,idep_gtest,idep_mesautil,idep_intel_dev],include_directories=[inc_include,inc_src,inc_intel],link_with=libisl,c_args='-DIN_UNIT_TEST',cpp_args=['-std=c++17','-DIN_UNIT_TEST'],),suite=['intel'],)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/intel/isl/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/intel')
+  set_relative_dir('src/intel/common')
+  ########################################################################################################################
+  ### Begin conversion from: src/intel/common/meson.build
+  ########################################################################################################################
+  fs=module_import('fs')
+  
+  files_libintel_common=files('i915/intel_engine.c','i915/intel_engine.h','i915/intel_gem.c','i915/intel_gem.h','xe/intel_device_query.c','xe/intel_device_query.h','xe/intel_engine.c','xe/intel_engine.h','xe/intel_gem.c','xe/intel_gem.h','intel_aux_map.c','intel_aux_map.h','intel_bind_timeline.c','intel_bind_timeline.h','intel_buffer_alloc.h','intel_common.c','intel_common.h','intel_compute_slm.c','intel_compute_slm.h','intel_debug_identifier.h','intel_debug_identifier.c','intel_engine.c','intel_engine.h','intel_gem.c','intel_gem.h','intel_genX_state_brw.h','intel_genX_state_elk.h','intel_guardband.h','intel_l3_config.c','intel_l3_config.h','intel_tiled_render.h','intel_urb_config.c','intel_sample_positions.c','intel_sample_positions.h','intel_uuid.c','intel_uuid.h','intel_measure.c','intel_measure.h','intel_mem.c','intel_mem.h','intel_pixel_hash.h')
+  
+  libintel_common_links=[libisl]
+  
+  if with_clflushopt:
+    libintel_clflushopt=static_library('intel_clflushopt',['intel_clflushopt.c'],include_directories=[inc_include,inc_src],c_args=[no_override_init_args]+clflushopt_args,gnu_symbol_visibility='hidden',)
+    libintel_common_links+=libintel_clflushopt
+  
+  
+  libintel_common=static_library('intel_common',[files_libintel_common,genX_xml_h,sha1_h],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args,sse2_args],gnu_symbol_visibility='hidden',link_with=libintel_common_links,dependencies=[dep_libdrm,dep_thread,idep_genxml,idep_mesautil,idep_intel_dev],)
+  
+  libintel_extra_dependencies=[]
+  if with_platform_android:
+    libintel_extra_dependencies+=dep_android
+  
+  
+  idep_libintel_common=declare_dependency(link_with=[libintel_common],dependencies=[libintel_extra_dependencies],)
+  
+  install_intel_gpu_tests=get_option('install-intel-gpu-tests')
+  if install_intel_gpu_tests and not with_tests:
+    error('`install-intel-gpu-tests` requires `build-tests`')
+  
+  
+  if with_tests and not with_platform_android:
+    for g in [['70','gfx7'],['75','hsw'],['80','gfx8'],['90','gfx9'],['110','gfx11'],['120','gfx12'],['125','gfx125']]:
+      executable('intel_{}_mi_builder_test'.format(g[1]),files('tests/mi_builder_test.cpp'),cpp_args=[cpp_msvc_compat_args,'-DGFX_VERx10={}'.format(g[0])],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_intel],link_with=[libintel_common],dependencies=[dep_libdrm,idep_gtest,idep_genxml,idep_mesautil,idep_intel_dev],install=install_intel_gpu_tests,)
+  
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/intel/common/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/intel')
+  set_relative_dir('src/intel/compiler')
+  ########################################################################################################################
+  ### Begin conversion from: src/intel/compiler/meson.build
+  ########################################################################################################################
+  intel_nir_files=files('intel_nir.h','intel_nir.c','intel_nir_blockify_uniform_loads.c','intel_nir_clamp_image_1d_2d_array_sizes.c','intel_nir_clamp_per_vertex_loads.c','intel_nir_lower_conversions.c','intel_nir_lower_non_uniform_barycentric_at_sample.c','intel_nir_lower_non_uniform_resource_intel.c','intel_nir_lower_printf.c','intel_nir_lower_shading_rate_output.c','intel_nir_lower_sparse.c','intel_nir_lower_texture.c','intel_nir_opt_peephole_ffma.c','intel_nir_opt_peephole_imul32x16.c','intel_nir_tcs_workarounds.c',)
+  
+  libintel_compiler_brw_files=files('brw_cfg.cpp','brw_cfg.h','brw_compile_gs.cpp','brw_compile_tcs.cpp','brw_compile_vs.cpp','brw_compiler.c','brw_compiler.h','brw_dead_control_flow.cpp','brw_debug_recompile.c','brw_def_analysis.cpp','brw_disasm.c','brw_disasm_info.cpp','brw_disasm_info.h','brw_eu.c','brw_eu_compact.c','brw_eu_defines.h','brw_eu_emit.c','brw_eu.h','brw_eu_validate.c','brw_fs_bank_conflicts.cpp','brw_fs_builder.h','brw_fs_cmod_propagation.cpp','brw_fs_combine_constants.cpp','brw_fs_copy_propagation.cpp','brw_fs.cpp','brw_fs_cse.cpp','brw_fs_dead_code_eliminate.cpp','brw_fs_generator.cpp','brw_fs.h','brw_fs_live_variables.cpp','brw_fs_live_variables.h','brw_fs_lower.cpp','brw_fs_lower_dpas.cpp','brw_fs_lower_integer_multiplication.cpp','brw_fs_lower_pack.cpp','brw_fs_lower_regioning.cpp','brw_fs_lower_simd_width.cpp','brw_fs_nir.cpp','brw_fs_opt.cpp','brw_fs_opt_algebraic.cpp','brw_fs_opt_virtual_grfs.cpp','brw_fs_reg_allocate.cpp','brw_fs_register_coalesce.cpp','brw_fs_saturate_propagation.cpp','brw_fs_scoreboard.cpp','brw_fs_sel_peephole.cpp','brw_fs_thread_payload.cpp','brw_fs_validate.cpp','brw_fs_visitor.cpp','brw_fs_workaround.cpp','brw_inst.h','brw_ir.h','brw_ir_allocator.h','brw_ir_analysis.h','brw_ir_fs.h','brw_ir_performance.h','brw_ir_performance.cpp','brw_isa_info.h','brw_lower_logical_sends.cpp','brw_mesh.cpp','brw_nir.h','brw_nir.c','brw_nir_analyze_ubo_ranges.c','brw_nir_lower_cooperative_matrix.c','brw_nir_lower_cs_intrinsics.c','brw_nir_lower_alpha_to_coverage.c','brw_nir_lower_intersection_shader.c','brw_nir_lower_ray_queries.c','brw_nir_lower_rt_intrinsics.c','brw_nir_lower_shader_calls.c','brw_nir_lower_storage_image.c','brw_nir_rt.h','brw_nir_rt.c','brw_nir_rt_builder.h','brw_packed_float.c','brw_predicated_break.cpp','brw_prim.h','brw_private.h','brw_reg.h','brw_reg_type.c','brw_reg_type.h','brw_rt.h','brw_schedule_instructions.cpp','brw_shader.cpp','brw_simd_selection.cpp','brw_vue_map.c',)
+  
+  brw_device_sha1_gen_src=custom_target('brw_device_sha1_gen.c',input=['brw_device_sha1_gen_c.py','../dev/intel_device_info.py'],output=['brw_device_sha1_gen.c'],command=[prog_python,'@INPUT0@','--outdir',meson.current_build_dir()])
+  
+  
+  brw_nir_lower_fsign=custom_target('brw_nir_lower_fsign.c',input='brw_nir_lower_fsign.py',output='brw_nir_lower_fsign.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],depend_files=nir_algebraic_depends,capture=True,)
+  
+  brw_nir_trig=custom_target('brw_nir_trig_workarounds.c',input='brw_nir_trig_workarounds.py',output='brw_nir_trig_workarounds.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],depend_files=nir_algebraic_depends,capture=True,)
+  
+  libintel_compiler_brw=static_library('intel_compiler',[libintel_compiler_brw_files,intel_nir_files,brw_nir_lower_fsign,brw_nir_trig,ir_expression_operation_h,[brw_device_sha1_gen_src]],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[idep_nir_headers,idep_mesautil,idep_intel_dev],build_by_default=False,)
+  
+  idep_intel_compiler_brw=declare_dependency(link_with=[libintel_compiler_brw],dependencies=[idep_nir,],)
+  
+  # For now this tool is only going to be used by Anv
+  if get_option('intel-clc')=='system':
+    prog_intel_clc=find_program('intel_clc',native=True)
+    dep_prog_intel_clc=[]
+  elif with_intel_clc:
+    prog_intel_clc=executable('intel_clc',['intel_clc.c','brw_kernel.c','elk/elk_nir_options.h','elk/elk_nir_options.c',],link_with=[libisl],include_directories=[inc_include,inc_src,inc_intel],c_args=[pre_args,no_override_init_args],link_args=[ld_args_build_id],dependencies=[idep_nir,idep_vtn,idep_mesaclc,idep_mesautil,idep_intel_dev,idep_intel_compiler_brw],native=not meson.can_run_host_binaries(),install=get_option('install-intel-clc'),)
+    dep_prog_intel_clc=[prog_intel_clc]
+  
+  
+  if with_tests:
+    test('intel_compiler_brw_tests',executable('intel_compiler_brw_tests',files('test_predicated_break.cpp','test_eu_compact.cpp','test_eu_validate.cpp','test_fs_cmod_propagation.cpp','test_fs_combine_constants.cpp','test_fs_copy_propagation.cpp','test_fs_cse.cpp','test_fs_saturate_propagation.cpp','test_fs_scoreboard.cpp','test_simd_selection.cpp','test_vf_float_conversions.cpp',),ir_expression_operation_h,include_directories=[inc_include,inc_src,inc_intel],link_with=libisl,dependencies=[idep_gtest,idep_nir,idep_mesautil,idep_intel_dev,idep_intel_compiler_brw],),suite=['intel'],protocol='gtest',)
+  
+  
+  if with_intel_tools:
+    bison_command=[]
+    if yacc_is_bison:
+      bison_command=[prog_bison,'@INPUT@','--defines=@OUTPUT1@','--output=@OUTPUT0@']
+    else:
+      bison_command=[prog_bison,'-H','@OUTPUT1@','-o','@OUTPUT0@','@INPUT@']
+  
+  
+    brw_gram_tab=custom_target('brw_gram.tab.[ch]',input='brw_gram.y',output=['brw_gram.tab.c','brw_gram.tab.h'],command=bison_command)
+  
+    brw_lex_yy_c=custom_target('brw_lex.yy.c',input='brw_lex.l',output='brw_lex.yy.c',command=[prog_flex,'-o','@OUTPUT@','@INPUT@'])
+  
+    brw_asm_tool=executable('brw_asm',['brw_asm_tool.c',brw_gram_tab[0],brw_gram_tab[1],brw_lex_yy_c],dependencies=[idep_mesautil,dep_thread,idep_intel_dev,idep_intel_compiler_brw],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=True)
+  
+    asm_testcases=[['skl','gfx9'],['icl','gfx11'],['tgl','gfx12'],['dg2','gfx12.5'],]
+  
+    test_runner=find_program('tests/run-test.py')
+    for testcase in asm_testcases:
+      _gen_name=testcase[0]
+      _gen_num=testcase[1]
+      _gen_folder=join_paths(meson.current_source_dir(),'tests',_gen_num.replace('gfx','gen'))
+      test('brw_asm_'+_gen_num,test_runner,args=['--brw_asm',brw_asm_tool,'--gen_name',_gen_name,'--gen_folder',_gen_folder,],suite='intel',)
+  
+  
+    brw_disasm_tool=executable('brw_disasm',files('brw_disasm_tool.c'),dependencies=[idep_mesautil,dep_thread,idep_intel_dev,idep_intel_compiler_brw],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=True)
+  
+  
+  
+  set_relative_dir('src/intel/compiler/elk')
+  ########################################################################################################################
+  ### Begin conversion from: src/intel/compiler/elk/meson.build
+  ########################################################################################################################
+  libintel_compiler_elk_files=files('elk_cfg.cpp','elk_cfg.h','elk_clip.h','elk_clip_line.c','elk_clip_point.c','elk_clip_tri.c','elk_clip_unfilled.c','elk_clip_util.c','elk_compile_clip.c','elk_compile_ff_gs.c','elk_compile_sf.c','elk_compiler.c','elk_compiler.h','elk_dead_control_flow.cpp','elk_dead_control_flow.h','elk_debug_recompile.c','elk_disasm.c','elk_disasm.h','elk_disasm_info.c','elk_disasm_info.h','elk_eu.c','elk_eu_compact.c','elk_eu_defines.h','elk_eu_emit.c','elk_eu_opcodes.h','elk_eu.h','elk_eu_util.c','elk_eu_validate.c','elk_fs_bank_conflicts.cpp','elk_fs_builder.h','elk_fs_cmod_propagation.cpp','elk_fs_combine_constants.cpp','elk_fs_copy_propagation.cpp','elk_fs.cpp','elk_fs_cse.cpp','elk_fs_dead_code_eliminate.cpp','elk_fs_generator.cpp','elk_fs.h','elk_fs_live_variables.cpp','elk_fs_live_variables.h','elk_fs_lower_pack.cpp','elk_fs_lower_regioning.cpp','elk_fs_nir.cpp','elk_fs_reg_allocate.cpp','elk_fs_register_coalesce.cpp','elk_fs_saturate_propagation.cpp','elk_fs_sel_peephole.cpp','elk_fs_thread_payload.cpp','elk_fs_validate.cpp','elk_fs_visitor.cpp','elk_inst.h','elk_interpolation_map.c','elk_ir.h','elk_ir_allocator.h','elk_ir_analysis.h','elk_ir_fs.h','elk_ir_performance.h','elk_ir_performance.cpp','elk_ir_vec4.h','elk_isa_info.h','elk_lower_logical_sends.cpp','elk_nir.h','elk_nir.c','elk_nir_analyze_boolean_resolves.c','elk_nir_analyze_ubo_ranges.c','elk_nir_attribute_workarounds.c','elk_nir_lower_alpha_to_coverage.c','elk_nir_lower_cs_intrinsics.c','elk_nir_lower_storage_image.c','elk_nir_options.h','elk_nir_options.c','elk_nir_private.h','elk_packed_float.c','elk_predicated_break.cpp','elk_prim.h','elk_private.h','elk_reg.h','elk_reg_type.c','elk_reg_type.h','elk_schedule_instructions.cpp','elk_shader.cpp','elk_shader.h','elk_simd_selection.cpp','elk_vec4_builder.h','elk_vec4_cmod_propagation.cpp','elk_vec4_copy_propagation.cpp','elk_vec4.cpp','elk_vec4_cse.cpp','elk_vec4_dead_code_eliminate.cpp','elk_vec4_generator.cpp','elk_vec4_gs_visitor.cpp','elk_vec4_gs_visitor.h','elk_vec4.h','elk_vec4_live_variables.cpp','elk_vec4_live_variables.h','elk_vec4_nir.cpp','elk_vec4_gs_nir.cpp','elk_vec4_reg_allocate.cpp','elk_vec4_surface_builder.cpp','elk_vec4_surface_builder.h','elk_vec4_tcs.cpp','elk_vec4_tcs.h','elk_vec4_tes.cpp','elk_vec4_tes.h','elk_vec4_visitor.cpp','elk_vec4_vs_visitor.cpp','elk_vec4_vs.h','elk_vue_map.c','elk_gfx6_gs_visitor.cpp','elk_gfx6_gs_visitor.h',)
+  
+  elk_nir_trig=custom_target('elk_nir_trig_workarounds.c',input='elk_nir_trig_workarounds.py',output='elk_nir_trig_workarounds.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],depend_files=nir_algebraic_depends,capture=True,)
+  
+  libintel_compiler_elk=static_library('intel_compiler_elk',[libintel_compiler_elk_files,intel_nir_files,elk_nir_trig,ir_expression_operation_h],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[idep_nir_headers,idep_mesautil,idep_intel_dev],build_by_default=False,)
+  
+  idep_intel_compiler_elk=declare_dependency(link_with=[libintel_compiler_elk],dependencies=[idep_nir,],)
+  
+  if with_tests:
+    test('intel_compiler_elk_tests',executable('intel_compiler_elk_tests',files('elk_test_predicated_break.cpp','elk_test_eu_compact.cpp','elk_test_eu_validate.cpp','elk_test_fs_cmod_propagation.cpp','elk_test_fs_combine_constants.cpp','elk_test_fs_copy_propagation.cpp','elk_test_fs_saturate_propagation.cpp','elk_test_simd_selection.cpp','elk_test_vec4_cmod_propagation.cpp','elk_test_vec4_copy_propagation.cpp','elk_test_vec4_dead_code_eliminate.cpp','elk_test_vec4_register_coalesce.cpp','elk_test_vf_float_conversions.cpp',),ir_expression_operation_h,include_directories=[inc_include,inc_src,inc_intel],link_with=[libintel_common,libisl],dependencies=[idep_gtest,idep_nir,idep_mesautil,idep_intel_dev,idep_intel_compiler_elk],),suite=['intel'],protocol='gtest',)
+  
+  
+  if with_intel_tools:
+    elk_gram_tab=custom_target('elk_gram.tab.[ch]',input='elk_gram.y',output=['elk_gram.tab.c','elk_gram.tab.h'],command=bison_command)
+  
+    elk_lex_yy_c=custom_target('elk_lex.yy.c',input='elk_lex.l',output='elk_lex.yy.c',command=[prog_flex,'-o','@OUTPUT@','@INPUT@'])
+  
+    elk_asm_tool=executable('elk_asm',['elk_asm_tool.c',elk_gram_tab[0],elk_gram_tab[1],elk_lex_yy_c],dependencies=[idep_mesautil,dep_thread,idep_intel_dev,idep_intel_compiler_elk],include_directories=[inc_include,inc_src,inc_intel],link_with=[libintel_common],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=True)
+  
+    asm_testcases=[['brw','gfx4'],['g4x','gfx4.5'],['ilk','gfx5'],['snb','gfx6'],['ivb','gfx7'],['hsw','gfx7.5'],['bdw','gfx8'],]
+  
+    test_runner=find_program('tests/run-test.py')
+    for testcase in asm_testcases:
+      _gen_name=testcase[0]
+      _gen_num=testcase[1]
+      _gen_folder=join_paths(meson.current_source_dir(),'tests',_gen_num.replace('gfx','gen'))
+      test('elk_asm_'+_gen_num,test_runner,args=['--elk_asm',elk_asm_tool,'--gen_name',_gen_name,'--gen_folder',_gen_folder,],suite='intel',)
+  
+  
+    elk_disasm_tool=executable('elk_disasm',files('elk_disasm_tool.c'),dependencies=[idep_mesautil,dep_thread,idep_intel_dev,idep_intel_compiler_elk],include_directories=[inc_include,inc_src,inc_intel],link_with=[libintel_common],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=True)
+  
+  
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/intel/compiler/elk/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/intel/compiler')
+  
+  ########################################################################################################################
+  ### End conversion from: src/intel/compiler/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/intel')
+  set_relative_dir('src/intel/decoder')
+  ########################################################################################################################
+  ### Begin conversion from: src/intel/decoder/meson.build
+  ########################################################################################################################
+  libintel_decoder_files=files('intel_decoder.h',)
+  
+  libintel_decoder_deps=[idep_intel_dev]
+  
+  if not dep_expat.found():
+    libintel_decoder_files+=files('intel_batch_decoder_stub.c',)
+  else:
+    libintel_decoder_deps+=dep_expat
+    libintel_decoder_files+=files('intel_decoder.c','intel_batch_decoder.c',)
+  
+  
+  libintel_decoder_brw=static_library('intel_decoder_brw',[libintel_decoder_files,'intel_batch_decoder_brw.c',genX_xml_h,sha1_h],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args,sse2_args],gnu_symbol_visibility='hidden',dependencies=libintel_decoder_deps,build_by_default=False,)
+  
+  idep_intel_decoder_brw=declare_dependency(link_with=[libintel_decoder_brw],dependencies=libintel_decoder_deps,)
+  
+  libintel_decoder_elk=static_library('intel_decoder_elk',[libintel_decoder_files,'intel_batch_decoder_elk.c',genX_xml_h,sha1_h],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args,sse2_args],gnu_symbol_visibility='hidden',dependencies=libintel_decoder_deps,build_by_default=False,)
+  
+  idep_intel_decoder_elk=declare_dependency(link_with=[libintel_decoder_elk],dependencies=libintel_decoder_deps,)
+  
+  if with_tests and not with_platform_android:
+    gentest_xml='tests/gentest.xml'
+    _name='gentest_pack.h'
+    gentest_pack=custom_target(_name,input=[gen_pack_header_py,gentest_xml],output=_name,command=[prog_python,'@INPUT@'],capture=True,depend_files=gen_pack_header_deps)
+  
+    genxml_path=join_paths(meson.current_source_dir(),'{}'.format(gentest_xml))
+  
+    test('genxml_test',executable('genxml_test',['tests/genxml_test.c',gentest_pack],include_directories=[inc_include,inc_src,inc_intel],dependencies=[idep_libintel_common,idep_intel_decoder_brw,idep_intel_decoder_elk,idep_mesautil,idep_intel_dev,idep_genxml,],c_args=['-DGENXML_DIR="{}"'.format(fs.parent(genxml_path)),'-DGENXML_FILE="{}"'.format(fs.name(genxml_path)),],),args=['-quiet'],suite=['intel'],)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/intel/decoder/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/intel')
+  if with_intel_vk or with_gallium_iris:
+    set_relative_dir('src/intel/shaders')
+    ########################################################################################################################
+    ### Begin conversion from: src/intel/shaders/meson.build
+    ########################################################################################################################
+    if with_intel_vk:
+      intel_float64_spv_h=custom_target('float64_spv.h',input=[glsl2spirv,float64_glsl_file],output='float64_spv.h',command=[prog_python,'@INPUT@','@OUTPUT@',prog_glslang,'--create-entry','main','--vn','float64_spv_source','--glsl-version','450','-Olib',glslang_depfile,],depfile='float64_spv.h.d',)
+    
+    
+    intel_shader_files=files('libintel_shaders.h','generate.cl','generate_draws.cl','generate_draws_iris.cl','memcpy.cl','query_copy.cl',)
+    
+    prepended_input_args=[]
+    for input_arg in intel_shader_files:
+      prepended_input_args+=['--in',input_arg]
+    
+    
+    intel_shaders_clc_wa_args=[]
+    if with_intel_clc:
+      if chosen_llvm_version_major>=17:
+        intel_shaders_clc_wa_args+=['--llvm17-wa']
+    
+    else:
+      _intel_clc_llvm_version=run_command(prog_intel_clc,'-M')
+      if _intel_clc_llvm_version.stdout().strip().version_compare('>= 17.0'):
+        intel_shaders_clc_wa_args+=['--llvm17-wa']
+    
+    
+    
+    intel_shaders_gens=[[80,8],[90,9],[110,11],[120,12],[125,125],[200,20]]
+    intel_shaders=[]
+    for gen in intel_shaders_gens:
+      intel_shaders+=custom_target('intel_gfx{}_shaders_code.h'.format(gen[1]),input=intel_shader_files,output='intel_gfx{}_shaders_code.h'.format(gen[1]),command=[prog_intel_clc,intel_shaders_clc_wa_args,'--nir','--gfx-version={}'.format((gen[0] + 10) if isinstance(gen[0], str) else (gen[0] / 10)),'--prefix','gfx{}_intel_shaders'.format(gen[1]),prepended_input_args,'-o','@OUTPUT@','--','-cl-std=cl2.0','-D__OPENCL_VERSION__=200','-DGFX_VERx10={}'.format(gen[0]),'-I'+join_paths(meson.current_source_dir(),'.'),'-I'+join_paths(dir_source_root,'src'),'-I'+join_paths(dir_source_root,'src/intel'),'-I'+join_paths(meson.project_build_root(),'src/intel'),'-I'+join_paths(dir_source_root,'src/intel/genxml'),],env=['MESA_SHADER_CACHE_DISABLE=true'],depends=[dep_prog_intel_clc,gen_cl_xml_pack],)
+    
+    
+    idep_intel_shaders=declare_dependency(sources=intel_shaders,include_directories=include_directories('.'),)
+    
+    ########################################################################################################################
+    ### End conversion from: src/intel/shaders/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/intel')
+  
+  if with_intel_hasvk or with_intel_vk or with_gallium_crocus or with_gallium_iris or with_intel_tools:
+    set_relative_dir('src/intel/perf')
+    ########################################################################################################################
+    ### Begin conversion from: src/intel/perf/meson.build
+    ########################################################################################################################
+    intel_hw_metrics=['hsw','bdw','chv','sklgt2','sklgt3','sklgt4','kblgt2','kblgt3','cflgt2','cflgt3','bxt','glk','icl','ehl','tglgt1','tglgt2','rkl','dg1','adl','acmgt1','acmgt2','acmgt3','mtlgt2','mtlgt3','lnl',]
+    
+    intel_hw_metrics_xml_files=[]
+    for hw in intel_hw_metrics:
+      intel_hw_metrics_xml_files += ['oa-{}.xml'.format(hw)] if isinstance(intel_hw_metrics_xml_files, list) else 'oa-{}.xml'.format(hw)
+    
+    
+    intel_perf_sources=['i915/intel_perf.c','i915/intel_perf.h','xe/intel_perf.c','xe/intel_perf.h','intel_perf_common.c','intel_perf_common.h','intel_perf.c','intel_perf_query.c','intel_perf_mdapi.c',]
+    
+    intel_perf_sources+=custom_target('intel-perf-sources',input=intel_hw_metrics_xml_files,output=['intel_perf_metrics.c','intel_perf_metrics.h'],command=[prog_python,files('gen_perf.py'),'--code','@OUTPUT0@','--header','@OUTPUT1@','@INPUT@',],)
+    
+    libintel_perf=static_library('intel_perf',intel_perf_sources,include_directories=[inc_include,inc_src,inc_intel,],c_args=[no_override_init_args,sse2_arg],cpp_args=[sse2_arg],gnu_symbol_visibility='hidden',dependencies=[idep_intel_dev],)
+    
+    if with_intel_tools:
+      intel_perf_query_layout=executable('intel_perf_query_layout',files('intel_perf_query_layout.c'),dependencies=[idep_mesautil,dep_dl,dep_thread,dep_m,idep_intel_dev],include_directories=[inc_include,inc_src,inc_intel],link_with=[libintel_common,libintel_perf],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=False)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/intel/perf/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/intel')
+  
+  if with_intel_hasvk or with_intel_vk or with_gallium_iris:
+    set_relative_dir('src/intel/ds')
+    ########################################################################################################################
+    ### Begin conversion from: src/intel/ds/meson.build
+    ########################################################################################################################
+    intel_tracepoint_files=custom_target('intel_tracepoints.[ch]',input='intel_tracepoints.py',output=['intel_tracepoints.h','intel_tracepoints_perfetto.h','intel_tracepoints.c'],command=[prog_python,'@INPUT@','-p',join_paths(dir_source_root,'src/util/perf/'),'--utrace-hdr','@OUTPUT0@','--perfetto-hdr','@OUTPUT1@','--utrace-src','@OUTPUT2@',],depend_files=u_trace_py,)
+    
+    libintel_driver_ds_deps=[idep_mesautil,idep_nir_headers,]
+    
+    if with_perfetto:
+      libintel_driver_ds_deps+=dep_perfetto
+    
+    
+    idep_intel_driver_ds_headers=declare_dependency(sources=intel_tracepoint_files[0],dependencies=[idep_intel_dev_wa,idep_intel_dev_info_gen],include_directories=[inc_include,inc_intel],)
+    
+    libintel_driver_ds=static_library('intel-driver-ds',sources=['intel_driver_ds.cc',intel_tracepoint_files],include_directories=[inc_src,inc_include,inc_intel],link_with=[libintel_perf,libintel_common],dependencies=[libintel_driver_ds_deps,idep_intel_dev,idep_intel_blorp],gnu_symbol_visibility='hidden',)
+    
+    idep_intel_driver_ds=declare_dependency(link_with=libintel_driver_ds,include_directories=[inc_include,inc_intel],dependencies=idep_intel_driver_ds_headers,)
+    
+    if with_perfetto and (with_datasources.count('intel') > 0 or with_datasources.count('auto') > 0):
+      pps_intel_sources=files('intel_pps_perf.cc','intel_pps_driver.cc',)
+    
+      pps_intel_lib=static_library('pps-intel',sources=pps_intel_sources,include_directories=[inc_tool,inc_src,inc_include,inc_intel],link_with=[libintel_perf,libintel_common],dependencies=[dep_perfetto,dep_libdrm,idep_mesautil,idep_intel_dev],)
+    
+      compile_args_pps_intel=['-DPPS_INTEL']
+    
+      pps_intel_dep=declare_dependency(link_with=pps_intel_lib,include_directories=[inc_tool,inc_include],compile_args=compile_args_pps_intel,)
+    
+      pps_datasources+=pps_intel_dep
+      if not with_datasources.count('intel') > 0:
+        with_datasources += ['intel'] if isinstance(with_datasources, list) else 'intel'
+    
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/intel/ds/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/intel')
+  
+  if with_intel_tools:
+    set_relative_dir('src/intel/tools')
+    ########################################################################################################################
+    ### Begin conversion from: src/intel/tools/meson.build
+    ########################################################################################################################
+    libaub=static_library('aub',files('aub_read.c','aub_mem.c'),include_directories=[inc_include,inc_src,inc_intel],dependencies=[idep_mesautil,idep_intel_dev,idep_intel_decoder_brw,idep_intel_decoder_elk],link_with=[libintel_common],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=False)
+    
+    aubinator=executable('aubinator',files('aubinator.c'),dependencies=[idep_mesautil,dep_expat,dep_zlib,dep_dl,dep_thread,dep_m,idep_intel_dev,idep_intel_decoder_brw,idep_intel_decoder_elk,idep_intel_compiler_brw,idep_intel_compiler_elk],include_directories=[inc_include,inc_src,inc_intel],link_with=[libintel_common,libaub],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=True)
+    
+    aubinator_error_decode=executable('aubinator_error_decode',files('aubinator_error_decode.c','aubinator_error_decode_lib.c','aubinator_error_decode_lib.h','aubinator_error_decode_xe.c','aubinator_error_decode_xe.h','error_decode_lib.c','error_decode_lib.h','error_decode_xe_lib.c','error_decode_xe_lib.h'),dependencies=[idep_mesautil,dep_zlib,dep_thread,idep_intel_dev,idep_intel_decoder_brw,idep_intel_decoder_elk,idep_intel_compiler_brw,idep_intel_compiler_elk],include_directories=[inc_include,inc_src,inc_intel],link_with=[libintel_common],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=True)
+    
+    error2aub=executable('intel_error2aub',files('aub_write.h','aub_write.c','error2aub.c','error_decode_lib.c','error_decode_lib.h'),dependencies=[dep_zlib,dep_dl,dep_thread,dep_m,idep_intel_dev],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=True)
+    
+    error2hangdump=executable('intel_error2hangdump',files('error2hangdump.c','error2hangdump_lib.c','error2hangdump_lib.h','error2hangdump_xe.c','error2hangdump_xe.h','error_decode_lib.c','error_decode_lib.h','error_decode_xe_lib.c','error_decode_xe_lib.h'),dependencies=[dep_zlib,dep_dl,dep_thread,dep_m,idep_intel_dev],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=True)
+    
+    intel_hang_replay=executable('intel_hang_replay',files('intel_hang_replay.c'),dependencies=[idep_intel_dev,idep_libintel_common,dep_libdrm,dep_dl,dep_thread,dep_m,idep_intel_compiler_brw,idep_intel_compiler_elk],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=True)
+    
+    sanitize_data=configuration_data()
+    sanitize_data.set('install_libexecdir',join_paths(get_option('prefix'),get_option('libexecdir')))
+    sanitize_data.set('install_libdir',join_paths(get_option('prefix'),get_option('libdir')))
+    configure_file(input='intel_sanitize_gpu.in',output='@BASENAME@',install_dir=get_option('bindir'),install=True,configuration=sanitize_data)
+    
+    libintel_sanitize_gpu=shared_library('intel_sanitize_gpu',files('intel_sanitize_gpu.c'),dependencies=[idep_mesautil,dep_dl,dep_thread,idep_intel_dev],include_directories=[inc_include,inc_src,inc_intel],link_with=libintel_common,c_args=[no_override_init_args,sse2_args],gnu_symbol_visibility='hidden',install_dir=get_option('libexecdir'),install=True)
+    
+    configure_file(input='intel_dump_gpu.in',output='@BASENAME@',install_dir=get_option('bindir'),configuration=sanitize_data,install=True)
+    
+    libintel_dump_gpu=shared_library('intel_dump_gpu',files('intel_context.h','gfx8_context.h','gfx10_context.h','intel_aub.h','aub_write.h','aub_write.c','intel_dump_gpu.c',),dependencies=[dep_dl,idep_mesautil,idep_intel_dev],include_directories=[inc_include,inc_src,inc_intel],link_with=[libintel_common],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install_dir=get_option('libexecdir'),install=True)
+    
+    if with_tools.count('drm-shim') > 0:
+      configure_file(input='intel_stub_gpu.in',output='@BASENAME@',install_dir=get_option('bindir'),configuration=sanitize_data,install=True)
+    
+      libintel_stub_gpu=shared_library('intel_noop_drm_shim',['intel_noop_drm_shim.c',intel_dev_serialize_src],include_directories=[inc_include,inc_src,inc_intel],dependencies=[dep_libdrm,dep_drm_shim,idep_mesautil,idep_libintel_common,idep_intel_dev,idep_parson],gnu_symbol_visibility='hidden',install=True,)
+    
+    
+    if with_tools.count('intel-ui') > 0:
+      set_relative_dir('src/intel/tools/imgui')
+      ########################################################################################################################
+      ### Begin conversion from: src/intel/tools/imgui/meson.build
+      ########################################################################################################################
+      libintel_imgui_gtk_deps=[dependency('epoxy'),dependency('gtk+-3.0'),]
+      
+      libintel_imgui_gtk=static_library('intel_imgui_gtk',files('imgui_impl_gtk3.cpp','imgui_impl_opengl3.cpp'),include_directories=inc_src,dependencies=libintel_imgui_gtk_deps,cpp_args=['-w'],install=False)
+      
+      libintel_imgui_gtk_dep=declare_dependency(link_with=libintel_imgui_gtk,dependencies=[libimgui_core_dep,libintel_imgui_gtk_deps],include_directories=include_directories('.'))
+      
+      ########################################################################################################################
+      ### End conversion from: src/intel/tools/imgui/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/intel/tools')
+    
+      aubinator_viewer=executable('aubinator_viewer',files('aubinator_viewer.cpp','aubinator_viewer_decoder.cpp'),dependencies=[idep_mesautil,dep_zlib,dep_dl,dep_thread,dep_m,libintel_imgui_gtk_dep,idep_intel_dev,idep_intel_compiler_brw,idep_intel_compiler_elk],include_directories=[inc_include,inc_src,inc_intel],link_with=[libintel_common,libaub],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',cpp_args=['-fpermissive','-Wno-parentheses'],install=True)
+    
+      intel_hang_viewer=executable('intel_hang_viewer',files('intel_hang_viewer.cpp','aubinator_viewer_decoder.cpp'),dependencies=[idep_mesautil,dep_zlib,dep_dl,dep_thread,dep_m,libintel_imgui_gtk_dep,idep_intel_dev,idep_libintel_common,idep_intel_compiler_brw,idep_intel_compiler_elk,idep_intel_decoder_brw,idep_intel_decoder_elk,],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',cpp_args=['-fpermissive','-Wno-parentheses'],install=True)
+    
+    
+    if with_intel_tools:
+      intel_dev_info=executable('intel_dev_info',[files('intel_dev_info.c'),[intel_dev_serialize_src]],dependencies=[dep_libdrm,dep_dl,dep_thread,dep_m,idep_intel_dev,idep_parson,idep_nir,idep_intel_compiler_brw],include_directories=[inc_include,inc_src,inc_intel],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',install=True)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/intel/tools/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/intel')
+  
+  if get_option('vulkan-layers').count('intel-nullhw') > 0:
+    subdir('nullhw-layer')
+  
+  if with_intel_vk:
+    set_relative_dir('src/intel/vulkan')
+    ########################################################################################################################
+    ### Begin conversion from: src/intel/vulkan/meson.build
+    ########################################################################################################################
+    inc_anv=include_directories('.')
+    
+    anv_flags=[no_override_init_args,sse2_args,]
+    
+    anv_cpp_flags=[]
+    
+    anv_entrypoints=custom_target('anv_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['anv_entrypoints.h','anv_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','anv','--beta',str(with_vulkan_beta),'--device-prefix','gfx9','--device-prefix','gfx11','--device-prefix','gfx12','--device-prefix','gfx125','--device-prefix','gfx20','--device-prefix','anv_doom64','--device-prefix','anv_hitman3','--device-prefix','anv_android','--device-prefix','anv_rmv',],depend_files=vk_entrypoints_gen_depend_files,)
+    
+    idep_anv_headers=declare_dependency(sources=[anv_entrypoints[0]],include_directories=inc_anv,)
+    
+    if with_intel_vk_rt:
+      set_relative_dir('src/intel/vulkan/grl')
+      ########################################################################################################################
+      ### Begin conversion from: src/intel/vulkan/grl/meson.build
+      ########################################################################################################################
+      fs=module_import('fs')
+      
+      grl_lib_files=['gpu/libs/libraries.grl',]
+      
+      grl_grl_files=['gpu/build_leaf.grl','gpu/build_primref.grl','gpu/copy.grl','gpu/misc.grl','gpu/new_sah_builder.grl','gpu/postbuild_info.grl',]
+      
+      grl_lib_args=[]
+      for libfile in grl_lib_files:
+        grl_lib_args += ['--library'] if isinstance(grl_lib_args, list) else '--library'
+        grl_lib_args+=files(libfile)
+      
+      
+      grl_genX_files=['genX_grl_dispatch.c','genX_grl_uuid.cpp',]
+      
+      grl_lib_args=[]
+      for libfile in grl_lib_files:
+        grl_lib_args += ['--library'] if isinstance(grl_lib_args, list) else '--library'
+        grl_lib_args+=files(libfile)
+      
+      
+      grl_cl_kernel_h=custom_target('grl_cl_kernel.h',input=['grl_cl_kernel_gen.py',grl_grl_files,grl_lib_files],output='grl_cl_kernel.h',command=[prog_python,'@INPUT0@','--out-h','@OUTPUT@',grl_lib_args,files(grl_grl_files),],)
+      
+      has_ply=run_command(prog_python,'-c','''
+      import ply
+        ''',check=False)
+      if has_ply.returncode()!=0:
+        error('Python (3.x) ply module required to build GRL kernels.')
+      
+      
+      r=run_command(prog_python,'grl_cl_kernel_gen.py',grl_lib_args,'--ls-kernels',grl_grl_files,check=False)
+      assert(r.returncode()==0,'Failed to fetch GRL CL kernels')
+      grl_kernels=r.stdout().strip().split()
+      
+      grl_metakernel_c=[]
+      grl_metakernel_h=[]
+      for grl_file in grl_grl_files:
+        base_outfile='grl_metakernel_'+fs.replace_suffix(fs.name(grl_file),'')
+        outfiles=custom_target(base_outfile,input=['grl_metakernel_gen.py',grl_file,grl_lib_files],output=[base_outfile+'.h',base_outfile+'.c'],command=[prog_python,'@INPUT0@','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@',grl_lib_args,'@INPUT1@',],)
+        grl_metakernel_h+=outfiles[0]
+        grl_metakernel_c+=outfiles[1]
+      
+      
+      grl_genX_libs=[]
+      for t in [['125','gfx125','dg2'],['200','gfx20','lnl'],]:
+        verX10=t[0]
+        genX_prefix=t[1]
+        platform=t[2]
+      
+        grl_compiled_cl_kernels=[]
+        for k in grl_kernels:
+          cl_file=k.split(':')[0]
+          entrypoint=k.split(':')[1]
+          library_files=k.split(':')[2]
+          kernel_prefix='_'.join([genX_prefix,fs.replace_suffix(cl_file,'').replace('gpu/','').replace('/','_'),entrypoint])
+          input_args=[files(cl_file),]
+          if library_files!='':
+            for lib_file in library_files.split(','):
+              input_args+=[lib_file]
+      
+      
+          prepended_input_args=[]
+          for input_arg in input_args:
+            prepended_input_args+=['--in',input_arg]
+      
+          outfile=kernel_prefix+'.h'
+          grl_compiled_cl_kernels+=custom_target(outfile,input=cl_file,output=outfile,command=[prog_intel_clc,'-p',platform,'--prefix',kernel_prefix,'-e',entrypoint,prepended_input_args,'-o','@OUTPUT@','--','-cl-std=cl2.0','-D__OPENCL_VERSION__=200','-DMAX_HW_SIMD_WIDTH=16','-DMAX_WORKGROUP_SIZE=16','-I'+join_paths(meson.current_source_dir(),'gpu'),'-I'+join_paths(meson.current_source_dir(),'include'),],env=['MESA_SHADER_CACHE_DISABLE=true','MESA_SPIRV_LOG_LEVEL=error'],depends=dep_prog_intel_clc)
+      
+      
+        grl_cl_kernel_c=custom_target('grl_{}_cl_kernel.c'.format(genX_prefix),input=['grl_cl_kernel_gen.py',grl_grl_files,grl_lib_files],output='grl_{}_cl_kernel.c'.format(genX_prefix),command=[prog_python,'@INPUT0@','--out-c','@OUTPUT@',grl_lib_args,'--prefix',genX_prefix,files(grl_grl_files),],)
+      
+        grl_genX_libs+=static_library('grl_{}'.format(genX_prefix),[grl_cl_kernel_h,grl_compiled_cl_kernels,grl_cl_kernel_c,grl_genX_files,grl_metakernel_c,grl_metakernel_h],include_directories=[inc_include,inc_src,inc_intel,],c_args=[no_override_init_args,sse2_args,'-DGFX_VERx10={}'.format(verX10),],cpp_args=[sse2_args,'-DGFX_VERx10={}'.format(verX10),],dependencies=[dep_valgrind,idep_nir_headers,idep_vulkan_util_headers,idep_vulkan_wsi_headers,idep_vulkan_runtime_headers,idep_anv_headers,idep_genxml,],gnu_symbol_visibility='hidden',)
+      
+      
+      libgrl_deps=[dep_valgrind,idep_nir_headers,idep_vulkan_util_headers,idep_vulkan_wsi_headers,]
+      
+      libgrl=static_library('grl',[grl_cl_kernel_h],include_directories=[inc_include,inc_src,inc_intel,],link_whole=[grl_genX_libs],dependencies=[libgrl_deps,idep_anv_headers],)
+      idep_grl=declare_dependency(link_with=libgrl,dependencies=libgrl_deps,sources=[grl_metakernel_h,grl_cl_kernel_h],include_directories=include_directories('include','gpu'),)
+      
+      ########################################################################################################################
+      ### End conversion from: src/intel/vulkan/grl/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/intel/vulkan')
+      optional_libgrl=[libgrl]
+      anv_flags += ['-DANV_SUPPORT_RT=1'] if isinstance(anv_flags, list) else '-DANV_SUPPORT_RT=1'
+    else:
+      idep_grl=null_dep
+      optional_libgrl=[]
+      anv_flags += ['-DANV_SUPPORT_RT=0'] if isinstance(anv_flags, list) else '-DANV_SUPPORT_RT=0'
+    
+    
+    intel_icd=custom_target('intel_icd',input=[vk_icd_gen,vk_api_xml],output='intel_icd.{}.json'.format(host_machine.cpu()),command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',join_paths(get_option('prefix'),get_option('libdir'),'libvulkan_intel.so'),'--out','@OUTPUT@',],build_by_default=True,install_dir=with_vulkan_icd_dir,install_tag='runtime',install=True,)
+    
+    _dev_icdname='intel_devenv_icd.{}.json'.format(host_machine.cpu())
+    _dev_icd=custom_target('intel_devenv_icd',input=[vk_icd_gen,vk_api_xml],output=_dev_icdname,command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',(meson.current_build_dir() + 'libvulkan_intel.so') if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / 'libvulkan_intel.so'),'--out','@OUTPUT@',],build_by_default=True,)
+    
+    devenv.append('VK_DRIVER_FILES',_dev_icd.full_path())# Deprecated: replaced by VK_DRIVER_FILES above
+    devenv.append('VK_ICD_FILENAMES',_dev_icd.full_path())
+    
+    libanv_per_hw_ver_libs=[]
+    anv_per_hw_ver_files=files('genX_blorp_exec.c','genX_cmd_buffer.c','genX_cmd_compute.c','genX_cmd_draw.c','genX_cmd_draw_generated_flush.h','genX_cmd_draw_generated_indirect.h','genX_cmd_video.c','genX_gfx_state.c','genX_gpu_memcpy.c','genX_init_state.c','genX_internal_kernels.c','genX_pipeline.c','genX_query.c','genX_simple_shader.c',)
+    if with_intel_vk_rt:
+      anv_per_hw_ver_files+=files('genX_acceleration_structure.c',)
+    
+    
+    for _gfx_ver in ['90','110','120','125','200']:
+      libanv_per_hw_ver_libs+=static_library('anv_per_hw_ver{}'.format(_gfx_ver),[anv_per_hw_ver_files,anv_entrypoints[0]],include_directories=[inc_include,inc_src,inc_intel,],c_args=anv_flags+['-DGFX_VERx10={}'.format(_gfx_ver)],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,idep_nir_headers,idep_genxml,idep_vulkan_util_headers,idep_vulkan_wsi_headers,idep_vulkan_runtime_headers,idep_intel_driver_ds_headers,idep_grl,idep_intel_shaders,idep_intel_blorp,],)
+    
+    
+    libanv_files=files('i915/anv_batch_chain.c','i915/anv_batch_chain.h','i915/anv_device.c','i915/anv_device.h','i915/anv_gem.c','i915/anv_gem.h','i915/anv_kmd_backend.c','i915/anv_queue.c','i915/anv_queue.h','layers/anv_android_layer.c','layers/anv_doom64.c','layers/anv_hitman3.c','layers/anv_rmv_layer.c','xe/anv_batch_chain.c','xe/anv_batch_chain.h','xe/anv_kmd_backend.c','xe/anv_device.c','xe/anv_device.h','xe/anv_queue.c','xe/anv_queue.h','anv_allocator.c','anv_android.h','anv_astc_emu.c','anv_batch_chain.c','anv_blorp.c','anv_bo_sync.c','anv_cmd_buffer.c','anv_descriptor_set.c','anv_device.c','anv_formats.c','anv_genX.h','anv_image.c','anv_internal_kernels.c','anv_internal_kernels.h','anv_kmd_backend.c','anv_kmd_backend.h','anv_measure.c','anv_measure.h','anv_mesh_perprim_wa.c','anv_nir.h','anv_nir_apply_pipeline_layout.c','anv_nir_compute_push_layout.c','anv_nir_lower_multiview.c','anv_nir_lower_load_patch_vertices_in.c','anv_nir_lower_ubo_loads.c','anv_nir_lower_resource_intel.c','anv_nir_push_descriptor_analysis.c','anv_perf.c','anv_pipeline.c','anv_pipeline_cache.c','anv_private.h','anv_queue.c','anv_rmv.c','anv_rmv.h','anv_sparse.c','anv_util.c','anv_utrace.c','anv_va.c','anv_video.c','anv_wsi.c',)
+    
+    anv_deps=[dep_libdrm,dep_valgrind,idep_genxml,idep_nir_headers,idep_vulkan_util_headers,idep_vulkan_runtime_headers,idep_vulkan_wsi_headers,idep_intel_shaders,idep_intel_blorp,]
+    
+    if with_platform_x11:
+      anv_deps+=dep_xcb_dri3
+    
+    
+    if with_platform_wayland:
+      anv_deps+=dep_wayland_client
+    
+    
+    if with_xlib_lease:
+      anv_deps+=[dep_xlib_xrandr]
+    
+    
+    if with_platform_android:
+      anv_deps+=idep_u_gralloc
+      libanv_files+=files('anv_android.c')
+    else:
+      libanv_files+=files('anv_android_stubs.c')
+    
+    
+    anv_deps+=idep_intel_driver_ds_headers
+    
+    libanv_common=static_library('anv_common',[libanv_files,anv_entrypoints,sha1_h,gen_xml_pack,intel_float64_spv_h,],include_directories=[inc_include,inc_src,inc_intel,inc_util,],c_args=anv_flags,cpp_args=anv_cpp_flags,gnu_symbol_visibility='hidden',dependencies=anv_deps)
+    
+    libvulkan_intel=shared_library('vulkan_intel',[files('anv_gem.c'),anv_entrypoints[0]],include_directories=[inc_include,inc_src,inc_intel,],link_whole=[libanv_common,libanv_per_hw_ver_libs]+optional_libgrl,link_with=[libisl,libintel_perf,],dependencies=[dep_thread,dep_dl,dep_m,anv_deps,idep_libintel_common,idep_nir,idep_genxml,idep_vulkan_util,idep_vulkan_wsi,idep_vulkan_runtime,idep_mesautil,idep_xmlconfig,idep_intel_driver_ds,idep_intel_dev,idep_intel_blorp,idep_intel_compiler_brw,idep_intel_decoder_brw,],c_args=anv_flags,gnu_symbol_visibility='hidden',link_args=[vulkan_icd_link_args,ld_args_build_id,ld_args_bsymbolic,ld_args_gc_sections],link_depends=vulkan_icd_link_depends,install=True,)
+    
+    if with_symbols_check:
+      test('anv symbols check',symbols_check,args=['--lib',libvulkan_intel,'--symbols-file',vulkan_icd_symbols,symbols_check_args,],suite=['intel'],)
+    
+    
+    if with_tests:
+      libvulkan_intel_test=static_library('vulkan_intel_test',[files('anv_gem_stubs.c'),anv_entrypoints[0]],include_directories=[inc_include,inc_src,inc_intel,],link_whole=libanv_common,link_with=[libanv_per_hw_ver_libs,libintel_common,libisl,libintel_perf,]+optional_libgrl,dependencies=[dep_thread,dep_dl,dep_m,anv_deps,idep_nir,idep_vulkan_util,idep_vulkan_wsi,idep_vulkan_runtime,idep_mesautil,idep_intel_dev,idep_intel_shaders,idep_intel_blorp,idep_intel_compiler_brw,idep_intel_decoder_brw,],c_args=anv_flags,gnu_symbol_visibility='hidden',)
+    
+      files_anv_tests=files('tests/anv_tests.cpp','tests/state_pool.c','tests/state_pool_free_list_only.c','tests/state_pool_max_size.c','tests/state_pool_no_free.c','tests/state_pool_padding.c','tests/block_pool_no_free.c','tests/block_pool_grow_first.c','tests/block_pool_max_size.c',)
+    
+      test('anv_tests',executable('anv_tests',[files_anv_tests,anv_entrypoints[0]],c_args=[sse2_args],link_with=libvulkan_intel_test,dependencies=[idep_gtest,dep_libdrm,dep_thread,dep_m,dep_valgrind,idep_vulkan_util,idep_vulkan_wsi_headers,idep_vulkan_runtime,idep_intel_driver_ds,idep_intel_dev,idep_intel_shaders,],include_directories=[inc_include,inc_src,inc_intel,],),suite=['intel'],protocol='gtest',)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/intel/vulkan/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/intel')
+  
+  if with_intel_hasvk:
+    set_relative_dir('src/intel/vulkan_hasvk')
+    ########################################################################################################################
+    ### Begin conversion from: src/intel/vulkan_hasvk/meson.build
+    ########################################################################################################################
+    anv_hasvk_entrypoints=custom_target('anv_hasvk_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['anv_entrypoints.h','anv_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','anv','--beta',str(with_vulkan_beta),'--device-prefix','gfx7','--device-prefix','gfx75','--device-prefix','gfx8','--device-prefix','doom64',],depend_files=vk_entrypoints_gen_depend_files,)
+    
+    intel_hasvk_icd=custom_target('intel_hasvk_icd',input=[vk_icd_gen,vk_api_xml],output='intel_hasvk_icd.{}.json'.format(host_machine.cpu()),command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',join_paths(get_option('prefix'),get_option('libdir'),'libvulkan_intel_hasvk.so'),'--out','@OUTPUT@',],build_by_default=True,install_dir=with_vulkan_icd_dir,install_tag='runtime',install=True,)
+    
+    _dev_icdname='intel_hasvk_devenv_icd.{}.json'.format(host_machine.cpu())
+    _dev_icd=custom_target('intel_hasvk_devenv_icd',input=[vk_icd_gen,vk_api_xml],output=_dev_icdname,command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',(meson.current_build_dir() + 'libvulkan_intel_hasvk.so') if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / 'libvulkan_intel_hasvk.so'),'--out','@OUTPUT@',],build_by_default=True,)
+    
+    devenv.append('VK_DRIVER_FILES',_dev_icd.full_path())
+    # Deprecated: replaced by VK_DRIVER_FILES above
+    devenv.append('VK_ICD_FILENAMES',_dev_icd.full_path())
+    
+    libanv_per_hw_ver_libs=[]
+    anv_per_hw_ver_files=files('genX_blorp_exec.c','genX_cmd_buffer.c','genX_gpu_memcpy.c','genX_pipeline.c','genX_query.c','genX_state.c',)
+    for g in [['70',['gfx7_cmd_buffer.c']],['75',['gfx7_cmd_buffer.c']],['80',['gfx8_cmd_buffer.c']]]:
+      _gfx_ver=g[0]
+      libanv_per_hw_ver_libs+=static_library('anv_per_hw_ver{}'.format(_gfx_ver),[anv_per_hw_ver_files,g[1],anv_hasvk_entrypoints[0]],include_directories=[inc_include,inc_src,inc_intel,],c_args=[no_override_init_args,sse2_args,'-DGFX_VERx10={}'.format(_gfx_ver),],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,idep_nir_headers,idep_genxml,idep_vulkan_util_headers,idep_vulkan_wsi_headers,idep_vulkan_runtime_headers,idep_intel_driver_ds_headers,idep_intel_blorp_elk,],)
+    
+    
+    libanv_files=files('layers/anv_doom64.c','anv_allocator.c','anv_android.h','anv_batch_chain.c','anv_blorp.c','anv_bo_sync.c','anv_cmd_buffer.c','anv_descriptor_set.c','anv_device.c','anv_formats.c','anv_genX.h','anv_image.c','anv_measure.c','anv_measure.h','anv_nir.h','anv_nir_apply_pipeline_layout.c','anv_nir_compute_push_layout.c','anv_nir_lower_multiview.c','anv_nir_lower_ubo_loads.c','anv_nir_lower_ycbcr_textures.c','anv_perf.c','anv_pipeline.c','anv_pipeline_cache.c','anv_private.h','anv_queue.c','anv_util.c','anv_utrace.c','anv_wsi.c',)
+    
+    anv_deps=[dep_libdrm,dep_valgrind,idep_genxml,idep_nir_headers,idep_vulkan_util_headers,idep_vulkan_runtime_headers,idep_vulkan_wsi_headers,]
+    anv_flags=[no_override_init_args,sse2_args,]
+    
+    anv_cpp_flags=[]
+    
+    if with_platform_x11:
+      anv_deps+=dep_xcb_dri3
+    
+    
+    if with_platform_wayland:
+      anv_deps+=dep_wayland_client
+    
+    
+    if with_xlib_lease:
+      anv_deps+=[dep_xlib_xrandr]
+    
+    
+    if with_platform_android:
+      libanv_files+=files('anv_android.c')
+    else:
+      libanv_files+=files('anv_android_stubs.c')
+    
+    
+    anv_deps+=idep_intel_driver_ds_headers
+    
+    libanv_hasvk_common=static_library('anv_hasvk_common',[libanv_files,anv_hasvk_entrypoints,sha1_h,gen_xml_pack,],include_directories=[inc_include,inc_src,inc_intel,inc_util,],c_args=anv_flags,cpp_args=anv_cpp_flags,gnu_symbol_visibility='hidden',dependencies=anv_deps,)
+    
+    libvulkan_intel_hasvk=shared_library('vulkan_intel_hasvk',[files('anv_gem.c'),anv_hasvk_entrypoints[0]],include_directories=[inc_include,inc_src,inc_intel,],link_whole=[libanv_hasvk_common,libanv_per_hw_ver_libs],link_with=[libisl,libintel_perf,],dependencies=[dep_thread,dep_dl,dep_m,anv_deps,idep_libintel_common,idep_nir,idep_genxml,idep_vulkan_util,idep_vulkan_wsi,idep_vulkan_runtime,idep_mesautil,idep_xmlconfig,idep_intel_driver_ds,idep_intel_dev,idep_intel_blorp_elk,idep_intel_decoder_elk,idep_intel_compiler_elk,],c_args=anv_flags,gnu_symbol_visibility='hidden',link_args=[vulkan_icd_link_args,ld_args_build_id,ld_args_bsymbolic,ld_args_gc_sections],link_depends=vulkan_icd_link_depends,install=True,)
+    
+    if with_symbols_check:
+      test('anv symbols check',symbols_check,args=['--lib',libvulkan_intel_hasvk,'--symbols-file',vulkan_icd_symbols,symbols_check_args,],suite=['intel'],)
+    
+    
+    if with_tests:
+      libvulkan_intel_hasvk_test=static_library('vulkan_intel_hasvk_test',[files('anv_gem_stubs.c'),anv_hasvk_entrypoints[0]],include_directories=[inc_include,inc_src,inc_intel,],link_whole=libanv_hasvk_common,link_with=[libanv_per_hw_ver_libs,libintel_common,libisl,libintel_perf,],dependencies=[dep_thread,dep_dl,dep_m,anv_deps,idep_nir,idep_vulkan_util,idep_vulkan_wsi,idep_vulkan_runtime,idep_mesautil,idep_intel_dev,idep_intel_blorp_elk,idep_intel_decoder_elk,idep_intel_compiler_elk,],c_args=anv_flags,gnu_symbol_visibility='hidden',)
+    
+      files_hasvk_tests=files('tests/hasvk_tests.cpp','tests/state_pool.c','tests/state_pool_free_list_only.c','tests/state_pool_no_free.c','tests/state_pool_padding.c','tests/block_pool_no_free.c','tests/block_pool_grow_first.c',)
+    
+      test('hasvk_tests',executable('hasvk_tests',[files_hasvk_tests,anv_hasvk_entrypoints[0]],c_args=[sse2_args],link_with=libvulkan_intel_hasvk_test,dependencies=[idep_gtest,dep_libdrm,dep_thread,dep_m,dep_valgrind,idep_vulkan_util,idep_vulkan_wsi_headers,idep_vulkan_runtime,idep_intel_driver_ds,idep_intel_dev,],include_directories=[inc_include,inc_src,inc_intel,],),suite=['intel'],protocol='gtest',)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/intel/vulkan_hasvk/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/intel')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/intel/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_gallium_radeonsi or with_amd_vk or with_gallium_r300 or with_gallium_r600:
+  set_relative_dir('src/amd')
+  ########################################################################################################################
+  ### Begin conversion from: src/amd/meson.build
+  ########################################################################################################################
+  inc_amd=include_directories('.')
+  
+  if with_amd_vk or with_gallium_radeonsi:
+    set_relative_dir('src/amd/addrlib')
+    ########################################################################################################################
+    ### Begin conversion from: src/amd/addrlib/meson.build
+    ########################################################################################################################
+    files_addrlib=files('inc/addrinterface.h','inc/addrtypes.h','src/addrinterface.cpp','src/core/addrcommon.h','src/core/addrelemlib.cpp','src/core/addrelemlib.h','src/core/addrlib.cpp','src/core/addrlib.h','src/core/addrlib1.cpp','src/core/addrlib1.h','src/core/addrlib2.cpp','src/core/addrlib2.h','src/core/addrlib3.cpp','src/core/addrlib3.h','src/core/addrobject.cpp','src/core/addrobject.h','src/core/coord.cpp','src/core/coord.h','src/gfx9/gfx9addrlib.cpp','src/gfx9/gfx9addrlib.h','src/gfx10/gfx10addrlib.cpp','src/gfx10/gfx10addrlib.h','src/gfx10/gfx10SwizzlePattern.h','src/gfx11/gfx11addrlib.cpp','src/gfx11/gfx11addrlib.h','src/gfx11/gfx11SwizzlePattern.h','src/gfx12/gfx12addrlib.cpp','src/gfx12/gfx12addrlib.h','src/gfx12/gfx12SwizzlePattern.h','src/amdgpu_asic_addr.h','src/chip/gfx10/gfx10_gb_reg.h','src/chip/gfx11/gfx11_gb_reg.h','src/chip/gfx12/gfx12_gb_reg.h','src/chip/gfx9/gfx9_gb_reg.h','src/chip/r800/si_gb_reg.h','src/r800/ciaddrlib.cpp','src/r800/ciaddrlib.h','src/r800/egbaddrlib.cpp','src/r800/egbaddrlib.h','src/r800/siaddrlib.cpp','src/r800/siaddrlib.h',)# Skip the addrlib definition of ADDR_FASTCALL so as not to use regparm.
+    cpp_args_addrlib=['-DADDR_FASTCALL=']
+    
+    if host_machine.endian()=='little':
+      cpp_args_addrlib += ['-DLITTLEENDIAN_CPU'] if isinstance(cpp_args_addrlib, list) else '-DLITTLEENDIAN_CPU'
+    else:
+      cpp_args_addrlib += ['-DBIGENDIAN_CPU'] if isinstance(cpp_args_addrlib, list) else '-DBIGENDIAN_CPU'
+    
+    
+    cpp_args_addrlib+=cpp.get_supported_arguments(['-Wno-unused-variable','-Wno-unused-local-typedefs','-Wno-unused-but-set-variable','-Wno-maybe-uninitialized','-Wno-self-assign','/wd4189'])
+    
+    libamdgpu_addrlib=static_library('addrlib',files_addrlib,include_directories=[include_directories('inc','src','src/core','src/chip/gfx9','src/chip/r800','src/chip/gfx10','src/chip/gfx11','src/chip/gfx12',),inc_amd_common,inc_include,inc_src],cpp_args=cpp_args_addrlib,gnu_symbol_visibility='hidden',)
+    
+    ########################################################################################################################
+    ### End conversion from: src/amd/addrlib/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/amd')
+    set_relative_dir('src/amd/common')
+    ########################################################################################################################
+    ### Begin conversion from: src/amd/common/meson.build
+    ########################################################################################################################
+    amd_json_files=['../registers/gfx6.json','../registers/gfx7.json','../registers/gfx8.json','../registers/gfx81.json','../registers/gfx9.json','../registers/gfx940.json','../registers/gfx10.json','../registers/gfx103.json','../registers/gfx11.json','../registers/gfx115.json','../registers/gfx12.json','../registers/pkt3.json','../registers/gfx10-rsrc.json','../registers/gfx11-rsrc.json','../registers/gfx12-rsrc.json','../registers/registers-manually-defined.json',]
+    
+    sid_tables_h=custom_target('sid_tables_h',input=['sid_tables.py','sid.h']+amd_json_files,output='sid_tables.h',command=[prog_python,'@INPUT@'],capture=True,)
+    
+    amdgfxregs_h=custom_target('amdgfxregs_h',input=['../registers/makeregheader.py']+amd_json_files,output='amdgfxregs.h',command=[prog_python,'@INPUT@','--sort','address','--guard','AMDGFXREGS_H'],capture=True,)
+    
+    gfx10_format_table_c=custom_target('gfx10_format_table.c',input=files('gfx10_format_table.py','../../util/format/u_format.csv','../registers/gfx10-rsrc.json','../registers/gfx11-rsrc.json'),output='gfx10_format_table.c',command=[prog_python,'@INPUT@'],capture=True,depend_files=['../registers/regdb.py'])
+    
+    amd_common_files=files('ac_binary.c','ac_binary.h','ac_cmdbuf.c','ac_cmdbuf.h','ac_shader_args.c','ac_shader_args.h','ac_shader_util.c','ac_shader_util.h','ac_gather_context_rolls.c','ac_gpu_info.c','ac_gpu_info.h','ac_surface.c','ac_surface.h','ac_debug.c','ac_debug.h','ac_descriptors.c','ac_descriptors.h','ac_formats.c','ac_formats.h','ac_shadowed_regs.c','ac_shadowed_regs.h','ac_spm.c','ac_spm.h','ac_sqtt.c','ac_sqtt.h','ac_rgp.c','ac_rgp.h','ac_msgpack.c','ac_msgpack.h','ac_nir.c','ac_nir.h','ac_nir_helpers.h','ac_nir_opt_outputs.c','ac_nir_cull.c','ac_nir_lower_esgs_io_to_mem.c','ac_nir_lower_global_access.c','ac_nir_lower_image_opcodes_cdna.c','ac_nir_lower_resinfo.c','ac_nir_lower_subdword_loads.c','ac_nir_lower_taskmesh_io_to_mem.c','ac_nir_lower_tess_io_to_mem.c','ac_nir_lower_tex.c','ac_nir_lower_ngg.c','ac_nir_lower_ps.c','ac_nir_meta.h','ac_nir_meta_cs_blit.c','ac_nir_meta_ps_resolve.c','amd_family.c','ac_parse_ib.c','ac_perfcounter.c','ac_perfcounter.h','ac_pm4.c','ac_pm4.h','ac_vcn_av1_default.h','ac_vcn_dec.c',)
+    
+    if dep_elf.found():
+      amd_common_files+=files('ac_rtld.c','ac_rtld.h','ac_rgp_elf_object_pack.c',)
+    
+    
+    libamd_common=static_library('amd_common',[amd_common_files,sid_tables_h,amdgfxregs_h,gfx10_format_table_c],include_directories=[inc_include,inc_src,inc_amd,],dependencies=[dep_thread,dep_elf,dep_libdrm_amdgpu,dep_valgrind,idep_mesautil,idep_nir_headers,idep_nir],gnu_symbol_visibility='hidden',c_args=['-DADDR_FASTCALL='])
+    
+    idep_amdgfxregs_h=declare_dependency(sources=[amdgfxregs_h])
+    
+    executable('ac_ib_parser',['ac_ib_parser.c'],link_with=[libamd_common],include_directories=[inc_amd,inc_include,inc_src,],dependencies=[idep_amdgfxregs_h,idep_mesautil,idep_nir_headers],)
+    
+    if with_tests and not with_platform_windows:
+      test('ac_surface_modifier_test',executable('ac_surface_modifier_test',['ac_surface_modifier_test.c'],link_with=[libamd_common,libamdgpu_addrlib],include_directories=[inc_amd,inc_include,inc_src,],dependencies=[idep_amdgfxregs_h,dep_libdrm_amdgpu,idep_mesautil],),suite=['amd'])# Limit this to only a few architectures for the Gitlab CI.
+      if ['x86','x86_64','aarch64'].count(host_machine.cpu_family()) > 0:
+        test('ac_surface_meta_address_test',executable('ac_surface_meta_address_test',['ac_surface_meta_address_test.c'],link_with=[libamd_common,libamdgpu_addrlib],include_directories=[inc_amd,inc_include,inc_src,],dependencies=[idep_amdgfxregs_h,dep_libdrm_amdgpu,idep_mesautil,dep_openmp],),suite=['amd'])
+    
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/amd/common/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/amd')
+    if amd_with_llvm:
+      set_relative_dir('src/amd/llvm')
+      ########################################################################################################################
+      ### Begin conversion from: src/amd/llvm/meson.build
+      ########################################################################################################################
+      amd_common_llvm_files=files('ac_llvm_build.c','ac_llvm_build.h','ac_llvm_helper.cpp','ac_llvm_util.c','ac_llvm_util.h','ac_nir_to_llvm.c','ac_nir_to_llvm.h','ac_shader_abi.h',)
+      
+      libamd_common_llvm=static_library('amd_common_llvm',[amd_common_llvm_files],include_directories=[inc_include,inc_src,inc_amd,inc_amd_common],link_with=[libamd_common],dependencies=[dep_llvm,dep_thread,dep_elf,dep_libdrm_amdgpu,dep_valgrind,idep_nir_headers,idep_amdgfxregs_h,],gnu_symbol_visibility='hidden',)
+      
+      
+      ########################################################################################################################
+      ### End conversion from: src/amd/llvm/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/amd')
+    else:
+      libamd_common_llvm=[]
+  
+    set_relative_dir('src/amd/compiler')
+    ########################################################################################################################
+    ### Begin conversion from: src/amd/compiler/meson.build
+    ########################################################################################################################
+    aco_depends=files('aco_opcodes.py')
+    
+    aco_opcodes_h=custom_target('aco_opcodes.h',input='aco_opcodes_h.py',output='aco_opcodes.h',command=[prog_python,'@INPUT@'],capture=True,depend_files=aco_depends,)
+    
+    aco_opcodes_c=custom_target('aco_opcodes.cpp',input='aco_opcodes_cpp.py',output='aco_opcodes.cpp',command=[prog_python,'@INPUT@'],capture=True,depend_files=aco_depends,)
+    
+    aco_builder_h=custom_target('aco_builder.h',input='aco_builder_h.py',output='aco_builder.h',command=[prog_python,'@INPUT@'],capture=True,depend_files=aco_depends,)
+    
+    libaco_files=files('aco_dead_code_analysis.cpp','aco_dominance.cpp','aco_instruction_selection.cpp','aco_instruction_selection.h','aco_instruction_selection_setup.cpp','aco_interface.cpp','aco_interface.h','aco_ir.cpp','aco_ir.h','aco_assembler.cpp','aco_form_hard_clauses.cpp','aco_insert_exec_mask.cpp','aco_insert_NOPs.cpp','aco_insert_waitcnt.cpp','aco_reduce_assign.cpp','aco_register_allocation.cpp','aco_live_var_analysis.cpp','aco_lower_phis.cpp','aco_lower_subdword.cpp','aco_lower_to_cssa.cpp','aco_lower_to_hw_instr.cpp','aco_optimizer.cpp','aco_optimizer_postRA.cpp','aco_opt_value_numbering.cpp','aco_print_asm.cpp','aco_print_ir.cpp','aco_reindex_ssa.cpp','aco_scheduler.cpp','aco_scheduler_ilp.cpp','aco_spill.cpp','aco_ssa_elimination.cpp','aco_statistics.cpp','aco_util.h','aco_validate.cpp',)
+    
+    cpp_args_aco=cpp.get_supported_arguments(['-fno-exceptions','-fno-rtti','-Wimplicit-fallthrough','-Wshadow'])
+    
+    _libaco=static_library('aco',[libaco_files,aco_opcodes_c,aco_opcodes_h,aco_builder_h],include_directories=[inc_include,inc_src,inc_amd,inc_amd_common,],dependencies=[dep_llvm,dep_thread,dep_valgrind,idep_nir_headers,idep_amdgfxregs_h,idep_mesautil,],gnu_symbol_visibility='hidden',build_by_default=True,cpp_args=[cpp_args_aco,cpp_msvc_compat_args],)# Also link with aco
+    idep_aco=declare_dependency(include_directories=include_directories('.'),link_with=_libaco,sources=[aco_opcodes_h,aco_builder_h],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/amd/compiler/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/amd')
+  
+  
+  if with_amd_vk:
+    set_relative_dir('src/amd/vulkan')
+    ########################################################################################################################
+    ### Begin conversion from: src/amd/vulkan/meson.build
+    ########################################################################################################################
+    radv_entrypoints_gen_command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--beta',str(with_vulkan_beta)]
+    
+    radv_entrypoints_gen_command+=['--prefix','radv','--device-prefix','sqtt','--device-prefix','rra','--device-prefix','rmv','--device-prefix','ctx_roll','--device-prefix','metro_exodus','--device-prefix','rage2','--device-prefix','quantic_dream','--device-prefix','annotate',]
+    
+    radv_entrypoints=custom_target('radv_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['radv_entrypoints.h','radv_entrypoints.c'],command=radv_entrypoints_gen_command,depend_files=vk_entrypoints_gen_depend_files,)
+    
+    libradv_files=files('bvh/bvh.h','layers/radv_ctx_roll_layer.c','layers/radv_metro_exodus.c','layers/radv_rage2.c','layers/radv_quantic_dream.c','layers/radv_rmv_layer.c','layers/radv_rra_layer.c','layers/radv_sqtt_layer.c','meta/radv_meta.c','meta/radv_meta.h','meta/radv_meta_astc_decode.c','meta/radv_meta_blit.c','meta/radv_meta_blit2d.c','meta/radv_meta_buffer.c','meta/radv_meta_bufimage.c','meta/radv_meta_clear.c','meta/radv_meta_copy.c','meta/radv_meta_copy_vrs_htile.c','meta/radv_meta_dcc_retile.c','meta/radv_meta_decompress.c','meta/radv_meta_etc_decode.c','meta/radv_meta_fast_clear.c','meta/radv_meta_fmask_copy.c','meta/radv_meta_fmask_expand.c','meta/radv_meta_resolve.c','meta/radv_meta_resolve_cs.c','meta/radv_meta_resolve_fs.c','nir/radv_nir.h','nir/radv_nir_apply_pipeline_layout.c','nir/radv_nir_export_multiview.c','nir/radv_nir_lower_abi.c','nir/radv_nir_lower_cooperative_matrix.c','nir/radv_nir_lower_fs_barycentric.c','nir/radv_nir_lower_fs_intrinsics.c','nir/radv_nir_lower_hit_attrib_derefs.c','nir/radv_nir_lower_intrinsics_early.c','nir/radv_nir_lower_io.c','nir/radv_nir_lower_poly_line_smooth.c','nir/radv_nir_lower_primitive_shading_rate.c','nir/radv_nir_lower_ray_queries.c','nir/radv_nir_lower_view_index.c','nir/radv_nir_lower_viewport_to_zero.c','nir/radv_nir_lower_vs_inputs.c','nir/radv_nir_remap_color_attachment.c','nir/radv_nir_rt_common.c','nir/radv_nir_rt_shader.c','winsys/null/radv_null_bo.c','winsys/null/radv_null_bo.h','winsys/null/radv_null_cs.c','winsys/null/radv_null_cs.h','winsys/null/radv_null_winsys.c','winsys/null/radv_null_winsys_public.h','radv_acceleration_structure.c','radv_android.c','radv_android.h','radv_buffer.c','radv_buffer.h','radv_buffer_view.c','radv_buffer_view.h','radv_cmd_buffer.c','radv_cmd_buffer.h','radv_cp_dma.c','radv_cp_dma.h','radv_cp_reg_shadowing.c','radv_cp_reg_shadowing.h','radv_cs.c','radv_cs.h','radv_debug.c','radv_debug.h','radv_device.c','radv_device.h','radv_device_memory.c','radv_device_memory.h','radv_descriptor_set.c','radv_descriptor_set.h','radv_device_generated_commands.c','radv_device_generated_commands.h','radv_event.c','radv_event.h','radv_formats.c','radv_formats.h','radv_image.c','radv_image.h','radv_image_view.c','radv_image_view.h','radv_instance.c','radv_instance.h','radv_perfcounter.c','radv_physical_device.c','radv_pipeline.c','radv_pipeline.h','radv_pipeline_cache.c','radv_pipeline_cache.h','radv_pipeline_compute.c','radv_pipeline_compute.h','radv_pipeline_graphics.c','radv_pipeline_rt.c','radv_pipeline_rt.h','radv_printf.c','radv_printf.h','radv_queue.c','radv_queue.h','radv_radeon_winsys.h','radv_rmv.c','radv_rmv.h','radv_rra.c','radv_rra.h','radv_sampler.c','radv_sampler.h','radv_sdma.c','radv_sdma.h','radv_shader.c','radv_shader.h','radv_shader_args.c','radv_shader_args.h','radv_shader_info.c','radv_shader_info.h','radv_shader_object.c','radv_shader_object.h','radv_spm.c','radv_spm.h','radv_sqtt.c','radv_sqtt.h','radv_query.c','radv_query.h','radv_video.c','radv_video.h','radv_video_enc.c','radv_wsi.c','radv_wsi.h',)
+    
+    if not with_platform_windows:
+      libradv_files+=files('winsys/amdgpu/radv_amdgpu_bo.c','winsys/amdgpu/radv_amdgpu_bo.h','winsys/amdgpu/radv_amdgpu_cs.c','winsys/amdgpu/radv_amdgpu_cs.h','winsys/amdgpu/radv_amdgpu_surface.c','winsys/amdgpu/radv_amdgpu_surface.h','winsys/amdgpu/radv_amdgpu_winsys.c','winsys/amdgpu/radv_amdgpu_winsys.h','winsys/amdgpu/radv_amdgpu_winsys_public.h',)
+    
+    
+    if amd_with_llvm:
+      libradv_files+=files('radv_llvm_helper.cpp','radv_llvm_helper.h','radv_nir_to_llvm.c','radv_nir_to_llvm.h',)
+    
+    
+    set_relative_dir('src/amd/vulkan/radix_sort')
+    ########################################################################################################################
+    ### Begin conversion from: src/amd/vulkan/radix_sort/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/amd/vulkan/radix_sort/shaders')
+    ########################################################################################################################
+    ### Begin conversion from: src/amd/vulkan/radix_sort/shaders/meson.build
+    ########################################################################################################################
+    radix_sort_shaders=['init.comp','fill.comp','histogram.comp','prefix.comp','scatter_0_even.comp','scatter_0_odd.comp','scatter_1_even.comp','scatter_1_odd.comp']
+    
+    shader_include_dir=dir_source_root+'/src/amd/vulkan/radix_sort/targets/u64'
+    
+    shader_include_files=files('bufref.h','prefix_limits.h','prefix.h','push.h','scatter.glsl',dir_source_root+'/src/amd/vulkan/radix_sort/targets/u64/config.h')
+    
+    radix_sort_spv=[]
+    for s in radix_sort_shaders:
+      _name=f'{s}.spv.h'
+      radix_sort_spv+=custom_target(_name,input=s,output=_name,command=[prog_glslang,'-V','-I'+shader_include_dir,'--target-env','spirv1.3','-x','-o','@OUTPUT@','@INPUT@',glslang_quiet,glslang_depfile,],depfile=f'{_name}.d',depend_files=shader_include_files,)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/amd/vulkan/radix_sort/shaders/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/amd/vulkan/radix_sort')
+    
+    radix_sort_files=files('common/vk/barrier.c','common/vk/barrier.h','common/macros.h','common/util.c','common/util.h','shaders/push.h','targets/u64/config.h','radix_sort_vk_devaddr.h','radix_sort_vk_ext.h','radix_sort_vk.c','radix_sort_vk.h','radv_radix_sort.c','radv_radix_sort.h','target.h')
+    
+    ########################################################################################################################
+    ### End conversion from: src/amd/vulkan/radix_sort/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/amd/vulkan')
+    libradv_files+=radix_sort_files
+    
+    set_relative_dir('src/amd/vulkan/bvh')
+    ########################################################################################################################
+    ### Begin conversion from: src/amd/vulkan/bvh/meson.build
+    ########################################################################################################################
+    bvh_shaders=[['copy.comp','copy',[],],['encode.comp','encode',['COMPACT=0'],],['encode.comp','encode_compact',['COMPACT=1'],],['header.comp','header',[],],['lbvh_generate_ir.comp','lbvh_generate_ir',[],],['lbvh_main.comp','lbvh_main',[],],['leaf.comp','leaf',['ALWAYS_ACTIVE=0'],],['leaf.comp','leaf_always_active',['ALWAYS_ACTIVE=1'],],['morton.comp','morton',[],],['ploc_internal.comp','ploc_internal',[],],['update.comp','update',[],],]
+    
+    bvh_include_dir=dir_source_root+'/src/amd/vulkan/bvh'
+    
+    bvh_includes=files('build_helpers.h','build_interface.h','bvh.h',)
+    
+    bvh_spv=[]
+    for s in bvh_shaders:
+      command=[prog_glslang,'-V','-I'+bvh_include_dir,'--target-env','spirv1.5','-x','-o','@OUTPUT@','@INPUT@',glslang_depfile,glslang_quiet,]
+    
+      for define in s[2]:
+        command += ['-D'+define] if isinstance(command, list) else '-D'+define
+    
+    
+      _bvh_name='{}.spv.h'.format(s[1])
+      bvh_spv+=custom_target(_bvh_name,input=s[0],output=_bvh_name,command=command,depfile=f'{_bvh_name}.d',depend_files=bvh_includes)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/amd/vulkan/bvh/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/amd/vulkan')
+    
+    set_relative_dir('src/amd/vulkan/layers')
+    ########################################################################################################################
+    ### Begin conversion from: src/amd/vulkan/layers/meson.build
+    ########################################################################################################################
+    radv_annotate_layer=custom_target('radv_annotate',input=[files('radv_annotate_layer_gen.py'),vk_api_xml],output=['radv_annotate_layer.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--out-c','@OUTPUT0@','--beta',str(with_vulkan_beta),],depend_files=[files('radv_annotate_layer_gen.py'),vk_dispatch_table_gen_depend_files],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/amd/vulkan/layers/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/amd/vulkan')
+    
+    radv_deps=[]
+    radv_flags=cc.get_supported_arguments(['-Wimplicit-fallthrough','-Wshadow'])
+    
+    if with_platform_x11:
+      radv_deps+=dep_xcb_dri3
+    
+    
+    if with_platform_wayland:
+      radv_deps+=dep_wayland_client
+    
+    
+    if with_xlib_lease:
+      radv_deps+=[dep_xlib_xrandr]
+    
+    
+    if with_platform_android:
+      radv_deps+=dep_android
+    
+    
+    radv_build_id=get_option('radv-build-id')
+    if radv_build_id!='':
+      radv_flags += ['-DRADV_BUILD_ID_OVERRIDE="'+radv_build_id+'"'] if isinstance(radv_flags, list) else '-DRADV_BUILD_ID_OVERRIDE="'+radv_build_id+'"'
+    
+    
+    libvulkan_radeon=shared_library('vulkan_radeon',[libradv_files,radv_entrypoints,sha1_h,radix_sort_spv,bvh_spv,radv_annotate_layer],vs_module_defs=vulkan_api_def,include_directories=[inc_include,inc_src,inc_amd,inc_amd_common,inc_amd_common_llvm,inc_util,],link_with=[libamd_common,libamd_common_llvm,libamdgpu_addrlib,],dependencies=[dep_llvm,dep_libdrm_amdgpu,dep_thread,dep_elf,dep_dl,dep_m,dep_valgrind,radv_deps,idep_aco,idep_mesautil,idep_nir,idep_vulkan_util,idep_vulkan_wsi,idep_vulkan_runtime,idep_amdgfxregs_h,idep_xmlconfig,],c_args=[no_override_init_args,radv_flags,c_msvc_compat_args],cpp_args=[radv_flags,cpp_msvc_compat_args],link_args=[ld_args_build_id,ld_args_bsymbolic,ld_args_gc_sections,vulkan_icd_link_args,],link_depends=vulkan_icd_link_depends,gnu_symbol_visibility='hidden',name_prefix='' if host_machine.system()=='windows' else [],install=True,)
+    
+    if with_symbols_check:
+      test('radv symbols check',symbols_check,args=['--lib',libvulkan_radeon,'--symbols-file',vulkan_icd_symbols,'--ignore-symbol','ac_init_shared_llvm_once',symbols_check_args,],suite=['amd'],)
+    
+    
+    icd_lib_path=join_paths(get_option('prefix'),get_option('libdir'))
+    icd_file_name='libvulkan_radeon.so'
+    if with_platform_windows:
+      icd_lib_path=module_import('fs').relative_to(get_option('bindir'),with_vulkan_icd_dir)
+      icd_file_name='vulkan_radeon.dll'
+    
+    
+    icd_command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',join_paths(icd_lib_path,icd_file_name),'--out','@OUTPUT@',]
+    if with_platform_windows:
+      icd_command += ['--use-backslash'] if isinstance(icd_command, list) else '--use-backslash'
+    
+    
+    radeon_icd=custom_target('radeon_icd',input=[vk_icd_gen,vk_api_xml],output='radeon_icd.{}.json'.format(host_machine.cpu()),command=icd_command,build_by_default=True,install_dir=with_vulkan_icd_dir,install_tag='runtime',install=True,)
+    
+    _dev_icdname='radeon_devenv_icd.{}.json'.format(host_machine.cpu())
+    _dev_icd=custom_target('radeon_devenv_icd',input=[vk_icd_gen,vk_api_xml],output=_dev_icdname,command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',(meson.current_build_dir() + icd_file_name) if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / icd_file_name),'--out','@OUTPUT@',],build_by_default=True,)
+    
+    devenv.append('VK_DRIVER_FILES',_dev_icd.full_path())# Deprecated: replaced by VK_DRIVER_FILES above
+    devenv.append('VK_ICD_FILENAMES',_dev_icd.full_path())
+    
+    if with_tests:
+      test('radv_tests',executable('radv_tests',files('nir/radv_nir_lower_hit_attrib_derefs.c','tests/radv_nir_lower_hit_attrib_derefs_tests.cpp',),cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_amd,inc_amd_common,inc_compiler,inc_util,include_directories('.'),],dependencies=[dep_thread,idep_gtest,idep_nir,idep_mesautil],),suite=['compiler','nir'],protocol='gtest',)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/amd/vulkan/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/amd')
+    if with_aco_tests:
+      set_relative_dir('src/amd/compiler/tests')
+      ########################################################################################################################
+      ### Begin conversion from: src/amd/compiler/tests/meson.build
+      ########################################################################################################################
+      aco_tests_files=files('framework.h','helpers.cpp','helpers.h','main.cpp','test_assembler.cpp','test_builder.cpp','test_d3d11_derivs.cpp','test_hard_clause.cpp','test_insert_nops.cpp','test_insert_waitcnt.cpp','test_isel.cpp','test_lower_subdword.cpp','test_optimizer.cpp','test_reduce_assign.cpp','test_regalloc.cpp','test_optimizer_postRA.cpp','test_scheduler.cpp','test_sdwa.cpp','test_to_hw_instr.cpp','test_tests.cpp',)
+      
+      spirv_files=files('test_isel.cpp','test_d3d11_derivs.cpp',)
+      
+      gen_spirv=generator(prog_python,output='@BASENAME@-spirv.h',arguments=[join_paths(meson.current_source_dir(),'glsl_scraper.py'),'@INPUT@','--with-glslang',prog_glslang.full_path(),'-o','@OUTPUT@',],)
+      gen_spirv_files=gen_spirv.process(spirv_files)
+      
+      test('aco_tests',executable('aco_tests',[aco_tests_files,gen_spirv_files],cpp_args=['-DACO_TEST_SOURCE_DIR="{}"'.format(meson.current_source_dir()),'-DACO_TEST_BUILD_ROOT="{}"'.format(meson.project_build_root()),'-DACO_TEST_PYTHON_BIN="{}"'.format(prog_python.full_path())]+cpp_args_aco,include_directories=[inc_include,inc_src,inc_amd,inc_amd_common,inc_amd_common_llvm,],link_with=[libamd_common,libamd_common_llvm,libvulkan_radeon,],dependencies=[dep_llvm,dep_thread,idep_aco,idep_nir,idep_mesautil,idep_vulkan_util_headers,idep_amdgfxregs_h,],gnu_symbol_visibility='hidden',build_by_default=True,),suite=['amd','compiler'],)
+      
+      ########################################################################################################################
+      ### End conversion from: src/amd/compiler/tests/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/amd')
+  
+  
+  
+  if with_tools.count('drm-shim') > 0:
+    subdir('drm-shim')
+  
+  
+  if with_gallium_radeonsi:
+    set_relative_dir('src/amd/vpelib')
+    ########################################################################################################################
+    ### Begin conversion from: src/amd/vpelib/meson.build
+    ########################################################################################################################
+    c_args_vpe=cc.get_supported_arguments(['-Wall','-Wextra','-Wno-unused','-Wno-unused-parameter','-Wno-unused-command-line-argument','-Wno-ignored-qualifiers','-Wno-missing-field-initializers','-Wno-self-assign','-Wno-implicit-fallthrough','-Werror=comment','-Werror=missing-braces','-Werror=override-init','-Werror=enum-conversion','-Werror=enum-compare','-Werror=maybe-uninitialized',])
+    
+    c_args_vpe+=['-DLITTLEENDIAN_CPU','-DVPE_BUILD_1_0','-DVPE_BUILD_1_X','-DVPE_BUILD_1_1',]
+    
+    vpe_files=files('src/core/inc/reg_helper.h','src/core/inc/vpe_priv.h','src/core/inc/vpe_command.h','src/core/inc/color_gamut.h','src/core/inc/vpe_assert.h','src/core/inc/vpec.h','src/core/inc/plane_desc_writer.h','src/core/inc/color_table.h','src/core/inc/hw_shared.h','src/core/inc/cdc.h','src/core/inc/dpp.h','src/core/inc/color_test_values.h','src/core/inc/vpe_visual_confirm.h','src/core/inc/color_cs.h','src/core/inc/shaper_builder.h','src/core/inc/color_bg.h','src/core/inc/transform.h','src/core/inc/common.h','src/core/inc/color.h','src/core/inc/mpc.h','src/core/inc/3dlut_builder.h','src/core/inc/geometric_scaling.h','src/core/inc/cmd_builder.h','src/core/inc/background.h','src/core/inc/color_gamma.h','src/core/inc/opp.h','src/core/inc/resource.h','src/core/inc/vpe_desc_writer.h','src/core/inc/config_writer.h','src/core/color_gamma.c','src/core/color_bg.c','src/core/vpe_scl_filters.c','src/core/background.c','src/core/vpe_visual_confirm.c','src/core/mpc.c','src/core/config_writer.c','src/core/plane_desc_writer.c','src/core/color_gamut.c','src/core/vpelib.c','src/core/vpe_desc_writer.c','src/core/3dlut_builder.c','src/core/geometric_scaling.c','src/core/color_test_values.c','src/core/resource.c','src/core/color_table.c','src/core/color.c','src/core/color_cs.c','src/core/common.c','src/core/shaper_builder.c','src/utils/inc/custom_fp16.h','src/utils/inc/custom_float.h','src/utils/inc/fixed31_32.h','src/utils/inc/conversion.h','src/utils/inc/calc_u64.h','src/utils/custom_fp16.c','src/utils/custom_float.c','src/utils/conversion.c','src/utils/fixpt31_32.c','src/chip/vpe10/inc/vpe10_background.h','src/chip/vpe10/inc/vpe10_cm_common.h','src/chip/vpe10/inc/vpe10_vpec.h','src/chip/vpe10/inc/vpe10_mpc.h','src/chip/vpe10/inc/vpe10_cmd_builder.h','src/chip/vpe10/inc/vpe10_opp.h','src/chip/vpe10/inc/asic/bringup_vpe_6_1_0_default.h','src/chip/vpe10/inc/asic/bringup_vpe_6_1_0_offset.h','src/chip/vpe10/inc/asic/bringup_vpe_6_1_0_sh_mask.h','src/chip/vpe10/inc/asic/vpe_1_0_offset.h','src/chip/vpe10/inc/vpe10_resource.h','src/chip/vpe10/inc/vpe10_cdc.h','src/chip/vpe10/inc/vpe10_dpp.h','src/chip/vpe10/vpe10_cm_common.c','src/chip/vpe10/vpe10_dpp.c','src/chip/vpe10/vpe10_resource.c','src/chip/vpe10/vpe10_mpc.c','src/chip/vpe10/vpe10_cmd_builder.c','src/chip/vpe10/vpe10_dpp_dscl.c','src/chip/vpe10/vpe10_dpp_cm.c','src/chip/vpe10/vpe10_opp.c','src/chip/vpe10/vpe10_background.c','src/chip/vpe10/vpe10_cdc.c','src/chip/vpe10/vpe10_vpec.c','src/chip/vpe11/inc/vpe11_cmd_builder.h','src/chip/vpe11/inc/vpe11_resource.h','src/chip/vpe11/vpe11_cmd_builder.c','src/chip/vpe11/vpe11_resource.c',)
+    
+    inc_amd_vpe=include_directories('inc','src','src/core/inc','src/chip','src/utils/inc','src/chip/vpe10/inc','src/chip/vpe11/inc',)
+    
+    libvpe=static_library('libvpe.a',vpe_files,install=False,c_args=c_args_vpe,include_directories=inc_amd_vpe)
+    
+    ########################################################################################################################
+    ### End conversion from: src/amd/vpelib/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/amd')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/amd/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_any_broadcom:
+  set_relative_dir('src/broadcom')
+  ########################################################################################################################
+  ### Begin conversion from: src/broadcom/meson.build
+  ########################################################################################################################
+  inc_broadcom=include_directories('.','cle')
+  
+  set_relative_dir('src/broadcom/cle')
+  ########################################################################################################################
+  ### Begin conversion from: src/broadcom/cle/meson.build
+  ########################################################################################################################
+  v3d_versions=[[21,'vc4_packet.xml'],[42,'v3d_packet.xml'],[71,'v3d_packet.xml']]
+  
+  v3d_xml_files=[]
+  v3d_xml_pack=[]
+  for _v in v3d_versions:
+    v=_v[0]
+    xmlfile=_v[1]
+    _name='v3d_packet_v{}_pack.h'.format(v)
+    if not v3d_xml_files.count(xmlfile) > 0:
+      v3d_xml_files+=xmlfile
+  
+    v3d_xml_pack+=custom_target(_name,input=['gen_pack_header.py',xmlfile],output=_name,command=[prog_python,'@INPUT@','{}'.format(v)],capture=True,)
+  
+  
+  v3d_xml_h=custom_target('v3d_xml.h',input=['../../util/gen_zipped_xml_file.py',v3d_xml_files],output='v3d_xml.h',command=[prog_python,'@INPUT@'],capture=True,)
+  
+  expat_args=[]
+  if dep_expat.found():
+    expat_args += ['-DWITH_LIBEXPAT=1'] if isinstance(expat_args, list) else '-DWITH_LIBEXPAT=1'
+  
+  
+  libbroadcom_cle=static_library('broadcom_cle',['v3d_decoder.c',v3d_xml_h],include_directories=[inc_include,inc_src,inc_broadcom],c_args=[no_override_init_args,expat_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,dep_expat,dep_zlib],build_by_default=False,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/broadcom/cle/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/broadcom')
+  
+  v3d_versions=['42','71']
+  v3d_libs=[]
+  
+  if with_gallium_v3d or with_broadcom_vk:
+    set_relative_dir('src/broadcom/compiler')
+    ########################################################################################################################
+    ### Begin conversion from: src/broadcom/compiler/meson.build
+    ########################################################################################################################
+    libbroadcom_compiler_files=files('nir_to_vir.c','vir.c','vir_dump.c','vir_live_variables.c','vir_opt_constant_alu.c','vir_opt_copy_propagate.c','vir_opt_dead_code.c','vir_opt_redundant_flags.c','vir_opt_small_immediates.c','vir_register_allocate.c','vir_to_qpu.c','qpu_schedule.c','qpu_validate.c','v3d_tex.c','v3d_compiler.h','v3d_nir_lower_io.c','v3d_nir_lower_image_load_store.c','v3d_nir_lower_line_smooth.c','v3d_nir_lower_load_store_bitsize.c','v3d_nir_lower_logic_ops.c','v3d_nir_lower_scratch.c','v3d_nir_lower_txf_ms.c','v3d_packing.c',)
+    
+    v3d_nir_lower_algebraic_c=custom_target('v3d_nir_lower_algebraic.c',input='v3d_nir_lower_algebraic.py',output='v3d_nir_lower_algebraic.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],capture=True,depend_files=nir_algebraic_depends,)
+    
+    libbroadcom_compiler=static_library('broadcom_compiler',[libbroadcom_compiler_files,v3d_xml_pack,v3d_nir_lower_algebraic_c],include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_broadcom],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,idep_nir_headers],build_by_default=False,)
+    
+    v3d_libs+=libbroadcom_compiler
+    
+    ########################################################################################################################
+    ### End conversion from: src/broadcom/compiler/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/broadcom')
+    set_relative_dir('src/broadcom/qpu')
+    ########################################################################################################################
+    ### Begin conversion from: src/broadcom/qpu/meson.build
+    ########################################################################################################################
+    libbroadcom_qpu_files=files('qpu_disasm.c','qpu_instr.c','qpu_pack.c',)
+    
+    libbroadcom_qpu=static_library('broadcom_qpu',[libbroadcom_qpu_files,v3d_xml_pack],include_directories=[inc_include,inc_src,inc_broadcom],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind],build_by_default=False,)
+    
+    v3d_libs+=libbroadcom_qpu
+    
+    test('qpu_disasm',executable('qpu_disasm','tests/qpu_disasm.c',link_with=libbroadcom_qpu,dependencies=idep_mesautil,include_directories=[inc_include,inc_src]),suite=['broadcom'],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/broadcom/qpu/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/broadcom')
+    set_relative_dir('src/broadcom/simulator')
+    ########################################################################################################################
+    ### Begin conversion from: src/broadcom/simulator/meson.build
+    ########################################################################################################################
+    inc_simulator=include_directories('.')
+    
+    libbroadcom_simulator_files=files('v3d_simulator.c','v3d_simulator_wrapper.cpp',)
+    
+    files_per_version=files('v3dx_simulator.c',)
+    
+    v3d_args=[]
+    dep_v3d_hw=dependency('v3d_hw',required=False)
+    if dep_v3d_hw.found():
+      v3d_args += ['-DUSE_V3D_SIMULATOR'] if isinstance(v3d_args, list) else '-DUSE_V3D_SIMULATOR'
+    
+    
+    per_version_libs=[]
+    for ver in v3d_versions:
+      per_version_libs+=static_library('v3d-simulator-v'+ver,[files_per_version,v3d_xml_pack],include_directories=[inc_src,inc_include,inc_broadcom,],c_args=[v3d_args,'-DV3D_VERSION='+ver],gnu_symbol_visibility='hidden',dependencies=[dep_v3d_hw,dep_libdrm,dep_valgrind],)
+    
+    
+    libbroadcom_simulator=static_library('broadcom_simulator',[libbroadcom_simulator_files],include_directories=[inc_src,inc_include],c_args=[v3d_args,no_override_init_args],cpp_args=[v3d_args],gnu_symbol_visibility='hidden',dependencies=[dep_v3d_hw,dep_libdrm,dep_valgrind],link_with=[per_version_libs],build_by_default=False,)
+    
+    v3d_libs+=libbroadcom_simulator
+    
+    ########################################################################################################################
+    ### End conversion from: src/broadcom/simulator/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/broadcom')
+  
+  
+  if with_tools.count('drm-shim') > 0:
+    subdir('drm-shim')
+  
+  
+  per_version_libs=[]
+  for ver in v3d_versions:
+    per_version_libs+=static_library('broadcom-v'+ver,[files('clif/v3dx_dump.c'),v3d_xml_pack],include_directories=[inc_include,inc_src,inc_broadcom],c_args=[no_override_init_args,'-DV3D_VERSION='+ver],gnu_symbol_visibility='hidden',dependencies=[dep_valgrind,dep_thread],)
+  
+  
+  v3d_args=['-DV3D_BUILD_NEON']
+  
+  v3d_neon_c_args=[]
+  if host_machine.cpu_family()=='arm':
+    v3d_neon_c_args='-mfpu=neon'
+  
+  
+  libv3d_neon=static_library('v3d_neon','common/v3d_tiling.c',include_directories=[inc_src,inc_include,inc_broadcom,],c_args=[v3d_args,v3d_neon_c_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,idep_nir_headers],)
+  
+  libbroadcom_v3d=static_library('broadcom_v3d',[files('common/v3d_debug.c','common/v3d_device_info.c','clif/clif_dump.c','common/v3d_util.c'),v3d_xml_pack,],include_directories=[inc_include,inc_src,inc_broadcom],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',link_whole=v3d_libs+per_version_libs,link_with=[libv3d_neon],build_by_default=False,dependencies=[dep_valgrind,dep_thread],)
+  
+  if with_broadcom_vk:
+    set_relative_dir('src/broadcom/vulkan')
+    ########################################################################################################################
+    ### Begin conversion from: src/broadcom/vulkan/meson.build
+    ########################################################################################################################
+    v3dv_entrypoints=custom_target('v3dv_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['v3dv_entrypoints.h','v3dv_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','v3dv','--beta',str(with_vulkan_beta),'--device-prefix','ver42','--device-prefix','ver71',],depend_files=vk_entrypoints_gen_depend_files,)
+    
+    libv3dv_files=files('v3dv_bo.c','v3dv_cl.c','v3dv_cmd_buffer.c','v3dv_debug.c','v3dv_debug.h','v3dv_descriptor_set.c','v3dv_device.c','v3dv_event.c','v3dv_formats.c','v3dv_image.c','v3dv_limits.h','v3dv_meta_clear.c','v3dv_meta_copy.c','v3dv_pass.c','v3dv_pipeline.c','v3dv_pipeline_cache.c','v3dv_private.h','v3dv_query.c','v3dv_queue.c','v3dv_uniforms.c','v3dv_wsi.c',)+[v3d_xml_pack]
+    
+    files_per_version=files('v3dvx_cmd_buffer.c','v3dvx_descriptor_set.c','v3dvx_device.c','v3dvx_formats.c','v3dvx_image.c','v3dvx_pipeline.c','v3dvx_meta_common.c','v3dvx_pipeline.c','v3dvx_query.c','v3dvx_queue.c',)
+    
+    v3d_versions=['42','71']
+    
+    v3dv_flags=[]
+    
+    dep_v3d_hw=dependency('v3d_hw',required=False)
+    if dep_v3d_hw.found():
+      v3dv_flags += ['-DUSE_V3D_SIMULATOR'] if isinstance(v3dv_flags, list) else '-DUSE_V3D_SIMULATOR'
+    
+    
+    v3dv_deps=[dep_dl,dep_libdrm,dep_valgrind,dep_v3d_hw,idep_nir,idep_nir_headers,idep_vulkan_util,idep_vulkan_runtime,idep_vulkan_wsi,]
+    
+    if with_platform_x11:
+      v3dv_deps+=dep_xcb_dri3
+    
+    
+    if with_platform_wayland:
+      v3dv_deps+=dep_wayland_client
+      libv3dv_files+=[wayland_drm_client_protocol_h,wayland_drm_protocol_c]
+    
+    
+    if with_platform_android:
+      v3dv_deps+=[dep_android,idep_u_gralloc]
+      v3dv_flags += ['-DVK_USE_PLATFORM_ANDROID_KHR'] if isinstance(v3dv_flags, list) else '-DVK_USE_PLATFORM_ANDROID_KHR'
+      libv3dv_files+=files('v3dv_android.c')
+    
+    
+    per_version_libs=[]
+    for ver in v3d_versions:
+      per_version_libs+=static_library('v3dv-v'+ver,[files_per_version,v3d_xml_pack,v3dv_entrypoints[0]],include_directories=[inc_src,inc_include,inc_broadcom,inc_util,],c_args=[v3dv_flags,'-DV3D_VERSION='+ver],gnu_symbol_visibility='hidden',dependencies=[v3dv_deps],)
+    
+    
+    libvulkan_broadcom=shared_library('vulkan_broadcom',[libv3dv_files,v3dv_entrypoints,sha1_h],include_directories=[inc_include,inc_src,inc_broadcom,inc_util,],link_with=[libbroadcom_cle,libbroadcom_v3d,per_version_libs,],dependencies=v3dv_deps,c_args=v3dv_flags,link_args=[vulkan_icd_link_args,'-Wl,--build-id=sha1',ld_args_bsymbolic,ld_args_gc_sections],link_depends=vulkan_icd_link_depends,gnu_symbol_visibility='hidden',install=True,)
+    
+    if with_symbols_check:
+      test('v3dv symbols check',symbols_check,args=['--lib',libvulkan_broadcom,'--symbols-file',vulkan_icd_symbols,symbols_check_args,],suite=['broadcom'],)
+    
+    
+    broadcom_icd=custom_target('broadcom_icd',input=[vk_icd_gen,vk_api_xml],output='broadcom_icd.{}.json'.format(host_machine.cpu()),command=[prog_python,'@INPUT0@','--api-version','1.2','--xml','@INPUT1@','--lib-path',join_paths(get_option('prefix'),get_option('libdir'),'libvulkan_broadcom.so'),'--out','@OUTPUT@',],build_by_default=True,install_dir=with_vulkan_icd_dir,install_tag='runtime',install=True,)
+    
+    _dev_icdname='broadcom_devenv_icd.{}.json'.format(host_machine.cpu())
+    _dev_icd=custom_target('broadcom_devenv_icd',input=[vk_icd_gen,vk_api_xml],output=_dev_icdname,command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',(meson.current_build_dir() + 'libvulkan_broadcom.so') if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / 'libvulkan_broadcom.so'),'--out','@OUTPUT@',],build_by_default=True,)
+    
+    devenv.append('VK_DRIVER_FILES',_dev_icd.full_path())
+    # Deprecated: replaced by VK_DRIVER_FILES above
+    devenv.append('VK_ICD_FILENAMES',_dev_icd.full_path())
+    
+    ########################################################################################################################
+    ### End conversion from: src/broadcom/vulkan/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/broadcom')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/broadcom/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_gallium_etnaviv:
+  set_relative_dir('src/etnaviv')
+  ########################################################################################################################
+  ### Begin conversion from: src/etnaviv/meson.build
+  ########################################################################################################################
+  inc_etnaviv=include_directories(['.'])
+  
+  set_relative_dir('src/etnaviv/common')
+  ########################################################################################################################
+  ### Begin conversion from: src/etnaviv/common/meson.build
+  ########################################################################################################################
+  idep_etna_common=declare_dependency(include_directories=[include_directories('.'),inc_src,])
+  
+  ########################################################################################################################
+  ### End conversion from: src/etnaviv/common/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/etnaviv')
+  set_relative_dir('src/etnaviv/hwdb')
+  ########################################################################################################################
+  ### Begin conversion from: src/etnaviv/hwdb/meson.build
+  ########################################################################################################################
+  has_pycparser=run_command(prog_python,'-c','''
+  try:
+    from packaging.version import Version
+  except:
+    from distutils.version import StrictVersion as Version
+  import pycparser
+  assert Version(pycparser.__version__) >= Version("2.20")
+    ''',check=False)
+  if has_pycparser.returncode()!=0:
+    error('Python (3.x) pycparser module >= 2.20 required to build mesa.')
+  
+  
+  prog_hwdb=files('hwdb.h.py')
+  hwdb_h=custom_target('hwdb.h',input=['amlogic/gc_feature_database.h','nxp/gc_feature_database.h','st/gc_feature_database.h'],output='hwdb.h',command=[prog_python,prog_hwdb,'--output','@OUTPUT@','@INPUT@'],)
+  
+  libetnaviv_hwdb_files=[hwdb_h,'etna_hwdb.c',]
+  
+  libetnaviv_hwdb=static_library('etnaviv_hwdb',libetnaviv_hwdb_files,dependencies=idep_etna_common,c_args=[no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/etnaviv/hwdb/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/etnaviv')
+  set_relative_dir('src/etnaviv/drm')
+  ########################################################################################################################
+  ### Begin conversion from: src/etnaviv/drm/meson.build
+  ########################################################################################################################
+  libetnaviv_drm_files=files('etnaviv_device.c','etnaviv_gpu.c','etnaviv_bo.c','etnaviv_bo_cache.c','etnaviv_perfmon.c','etnaviv_pipe.c','etnaviv_cmd_stream.c','etnaviv_drmif.h','etnaviv_priv.h',)
+  
+  libetnaviv_drm=static_library('etnaviv_drm',libetnaviv_drm_files,include_directories=[inc_etnaviv,inc_include,inc_src,],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,idep_etna_common,],link_with=[libetnaviv_hwdb],build_by_default=False,)
+  
+  if with_tools.count('etnaviv') > 0:
+    set_relative_dir('src/etnaviv/drm/tests')
+    ########################################################################################################################
+    ### Begin conversion from: src/etnaviv/drm/tests/meson.build
+    ########################################################################################################################
+    etnaviv_cmd_stream_test=executable('etnaviv_cmd_stream_test','etnaviv_cmd_stream_test.c',include_directories=[inc_etnaviv,inc_include,inc_src,],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,idep_mesautil,],link_with=libetnaviv_drm,install=False,)
+    
+    etnaviv_bo_cache_test=executable('etnaviv_bo_cache_test','etnaviv_bo_cache_test.c',include_directories=[inc_etnaviv,inc_include,inc_src,],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,idep_mesautil,],link_with=libetnaviv_drm,install=False,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/etnaviv/drm/tests/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/etnaviv/drm')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/etnaviv/drm/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/etnaviv')
+  set_relative_dir('src/etnaviv/isa')
+  ########################################################################################################################
+  ### Begin conversion from: src/etnaviv/isa/meson.build
+  ########################################################################################################################
+  isa_depend_files=['etnaviv.xml',isaspec_py_deps,]
+  
+  etnaviv_isa=custom_target('etnaviv-isa',input=['etnaviv.xml'],output=['etnaviv-isa.c','etnaviv-isa.h'],command=[prog_isaspec_decode,'--xml','@INPUT@','--out-c','@OUTPUT0@','--out-h','@OUTPUT1@',],depend_files=isa_depend_files,)
+  
+  decode_files=[etnaviv_isa,'isa.h',]
+  
+  _libetnaviv_decode=static_library('etnaviv_decode',decode_files,dependencies=[idep_mesautil,idep_isaspec_decode],link_with=[libisaspec],include_directories=[inc_include,inc_src,],gnu_symbol_visibility='hidden',)
+  
+  idep_libetnaviv_decode=declare_dependency(include_directories=[include_directories('.'),inc_include,inc_src],link_with=_libetnaviv_decode,dependencies=[idep_isaspec_decode],sources=[etnaviv_isa],)
+  
+  prog_enums_h=files('enums.h.py')
+  enums_h=custom_target('enums.h',input='etnaviv.xml',output='enums.h',command=[prog_python,prog_enums_h,'--xml','@INPUT@','--output','@OUTPUT@'],depend_files=[isa_depend_files,prog_enums_h],)
+  
+  encode_h=custom_target('encode.h',input=['etnaviv.xml'],output='encode.h',command=[prog_isaspec_encode,'--xml','@INPUT@','--out-h','@OUTPUT@'],depend_files=isa_depend_files,)
+  
+  encode_files=[enums_h,encode_h,'encode.c',]
+  
+  libetnaviv_encode=static_library('etnaviv_encode',encode_files,gnu_symbol_visibility='hidden',include_directories=[inc_src,],)
+  
+  disasm=executable('etnaviv-disasm',['disasm.c'],dependencies=idep_libetnaviv_decode,build_by_default=with_tools.count('etnaviv') > 0,include_directories=[inc_src,],install=False,)
+  
+  if with_tools.count('etnaviv') > 0:
+    if meson.version().version_compare('< 1.4.0'):
+      error('etnaviv requires meson 1.4.0 or newer')
+  
+  
+    add_languages('rust',required=True)
+    rust=module_import('rust')
+  
+    isa_bindings_rs=rust.bindgen(input='bindings.h',output='isa_bindings.rs',include_directories=[inc_src],args=['--disable-header-comment','--ignore-functions','--allowlist-type','etna_asm_result','--allowlist-type','etna_inst','--allowlist-type','isa_swiz','--default-enum-style','rust','--with-derive-default',],)
+  
+    _libetnaviv_isa_bindings_gen=static_library('isa_bindings',isa_bindings_rs,gnu_symbol_visibility='hidden',rust_abi='rust',rust_args=['-Anon_camel_case_types',],)
+  
+    dep_indexmap=dependency('indexmap',version='>= 2.2.6',fallback=['indexmap','dep_indexmap'],required=True,)
+  
+    dep_roxmltree=dependency('roxmltree',version='>= 0.20.roxmltree',fallback=['roxmltree','dep_roxmltree'],required=True,)
+  
+    dep_syn=dependency('syn',version='>= 2.0.15',fallback=['syn','dep_syn'],required=True,)
+  
+    dep_pest_generator=dependency('pest_generator',version='>= 2.7.6',fallback=['pest_generator','dep_pest_generator'],required=True,)
+  
+    dep_pest=dependency('pest',version='>= 2.7.6',fallback=['pest','dep_pest'],required=True,)
+  
+    _libetnaviv_isa_proc_rs=rust.proc_macro('etnaviv_isa_proc',files('isa_proc.rs','isa.rs'),dependencies=[dep_indexmap,dep_roxmltree,dep_syn,dep_pest_generator],)
+  
+    if with_tests:
+      noop()
+  
+  
+    libetnaviv_isa_rs=static_library('etnaviv_isa_rs',files('lib.rs'),gnu_symbol_visibility='hidden',rust_abi='c',dependencies=[dep_indexmap,dep_roxmltree,dep_pest],link_with=[_libetnaviv_isa_bindings_gen,_libetnaviv_isa_proc_rs],)
+  
+    etnaviv_assembler=executable('etnaviv-assembler',['assembler.c'],gnu_symbol_visibility='hidden',dependencies=[idep_libetnaviv_decode],link_with=[libetnaviv_encode,libetnaviv_isa_rs],)
+  else:
+    pre_args += ['-DHAVE_ETNAVIV_NO_PEST'] if isinstance(pre_args, list) else '-DHAVE_ETNAVIV_NO_PEST'
+  
+    # dummy library
+    libetnaviv_isa_rs=static_library('etnaviv_isa_rs',sources=[],)
+  
+  
+  set_relative_dir('src/etnaviv/isa/tests')
+  ########################################################################################################################
+  ### Begin conversion from: src/etnaviv/isa/tests/meson.build
+  ########################################################################################################################
+  test('etnaviv_isa_disasm',executable('etnaviv_disasm','disasm.cpp',cpp_args=[pre_args,],include_directories=[inc_etnaviv,inc_src],dependencies=[idep_gtest,idep_libetnaviv_decode],link_with=[libetnaviv_isa_rs,libetnaviv_encode],))
+  
+  ########################################################################################################################
+  ### End conversion from: src/etnaviv/isa/tests/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/etnaviv/isa')
+  
+  ########################################################################################################################
+  ### End conversion from: src/etnaviv/isa/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/etnaviv')
+  
+  if with_tools.count('drm-shim') > 0:
+    subdir('drm-shim')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/etnaviv/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if system_has_kms_drm or with_gallium_virgl:
+  set_relative_dir('src/virtio')
+  ########################################################################################################################
+  ### Begin conversion from: src/virtio/meson.build
+  ########################################################################################################################
+  inc_virtio=include_directories('.')
+  inc_virtio_vdrm=include_directories('./vdrm')
+  
+  if with_virtio_vk:
+    set_relative_dir('src/virtio/vulkan')
+    ########################################################################################################################
+    ### Begin conversion from: src/virtio/vulkan/meson.build
+    ########################################################################################################################
+    vn_entrypoints=custom_target('vn_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['vn_entrypoints.h','vn_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','vn','--beta',str(with_vulkan_beta)],)
+    
+    virtio_icd=custom_target('virtio_icd',input=[vk_icd_gen,vk_api_xml],output='virtio_icd.{}.json'.format(host_machine.cpu()),command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',join_paths(get_option('prefix'),get_option('libdir'),'libvulkan_virtio.so'),'--out','@OUTPUT@',],build_by_default=True,install_dir=with_vulkan_icd_dir,install_tag='runtime',install=True,)
+    
+    _dev_icdname='virtio_devenv_icd.{}.json'.format(host_machine.cpu())
+    _dev_icd=custom_target('virtio_devenv_icd',input=[vk_icd_gen,vk_api_xml],output=_dev_icdname,command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',(meson.current_build_dir() + 'libvulkan_virtio.so') if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / 'libvulkan_virtio.so'),'--out','@OUTPUT@',],build_by_default=True,)
+    
+    devenv.append('VK_DRIVER_FILES',_dev_icd.full_path())
+    # Deprecated: replaced by VK_DRIVER_FILES above
+    devenv.append('VK_ICD_FILENAMES',_dev_icd.full_path())
+    
+    libvn_files=files('vn_buffer.c','vn_command_buffer.c','vn_common.c','vn_cs.c','vn_descriptor_set.c','vn_device.c','vn_device_memory.c','vn_feedback.c','vn_icd.c','vn_image.c','vn_instance.c','vn_physical_device.c','vn_pipeline.c','vn_query_pool.c','vn_queue.c','vn_render_pass.c','vn_ring.c','vn_renderer_internal.c','vn_renderer_util.c','vn_renderer_virtgpu.c','vn_renderer_vtest.c',)
+    
+    vn_deps=[dep_libdrm,dep_thread,idep_mesautil,idep_vulkan_util,idep_vulkan_lite_runtime,idep_vulkan_wsi,idep_xmlconfig,]
+    
+    vn_flags=[no_override_init_args,]+cc.get_supported_arguments(['-Werror=switch',])
+    
+    vn_libs=[]
+    
+    if with_platform_wayland or with_platform_x11:
+      libvn_files+=files('vn_wsi.c')
+      vn_flags += ['-DVN_USE_WSI_PLATFORM'] if isinstance(vn_flags, list) else '-DVN_USE_WSI_PLATFORM'
+    
+    
+    if with_platform_wayland:
+      vn_deps+=dep_wayland_client
+    
+    
+    if with_platform_x11:
+      vn_deps+=dep_xcb_dri3
+    
+    
+    if with_platform_android:
+      libvn_files+=files('vn_android.c')
+      vn_deps+=[dep_android,idep_u_gralloc]
+    
+    
+    libvulkan_virtio=shared_library('vulkan_virtio',[libvn_files,vn_entrypoints,sha1_h],include_directories=[inc_include,inc_src,inc_virtio,],link_with=vn_libs,dependencies=[vn_deps],c_args=[vn_flags],link_args=[vulkan_icd_link_args,ld_args_bsymbolic,ld_args_gc_sections],link_depends=vulkan_icd_link_depends,gnu_symbol_visibility='hidden',install=True,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/virtio/vulkan/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/virtio')
+  
+  set_relative_dir('src/virtio/vdrm')
+  ########################################################################################################################
+  ### Begin conversion from: src/virtio/vdrm/meson.build
+  ########################################################################################################################
+  libvdrm=static_library('libvdrm',['vdrm.c','vdrm.h','vdrm_virtgpu.c',],include_directories=[inc_include,inc_src,inc_virtio_gpu,],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,],link_with=[_libmesa_util,],build_by_default=False,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/virtio/vdrm/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/virtio')
+  
+  ########################################################################################################################
+  ### End conversion from: src/virtio/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_gallium_freedreno or with_freedreno_vk or with_tools.count('freedreno') > 0:
+  set_relative_dir('src/freedreno')
+  ########################################################################################################################
+  ### Begin conversion from: src/freedreno/meson.build
+  ########################################################################################################################
+  inc_freedreno=include_directories(['.','./registers','./registers/adreno','./common'])
+  inc_freedreno_rnn=include_directories('rnn')
+  
+  rnn_src_path=dir_source_root+'/src/freedreno/registers'
+  rnn_install_path=get_option('datadir')+'/freedreno/registers'
+  rnn_path=rnn_src_path+':'+get_option('prefix')+'/'+rnn_install_path
+  
+  dep_lua=dependency('lua54','lua53','lua52','lua',required=False,allow_fallback=True,version='>=5.2')
+  
+  dep_libarchive=dependency('libarchive',allow_fallback=True,required=False)
+  dep_libxml2=dependency('libxml-2.0',allow_fallback=True,required=False)
+  prog_gzip=find_program('gzip',required=False)
+  
+  install_fd_decode_tools=dep_libxml2.found() and prog_gzip.found() and with_tools.count('freedreno') > 0
+  
+  set_relative_dir('src/freedreno/registers')
+  ########################################################################################################################
+  ### Begin conversion from: src/freedreno/registers/meson.build
+  ########################################################################################################################
+  xml_files=['adreno.xml',]
+  
+  rules_file='rules-fd.xsd'
+  copyright_file='freedreno_copyright.xml'
+  
+  install_files=xml_files+[rules_file,copyright_file]
+  
+  gen_header_py=files('gen_header.py')
+  freedreno_schema=files(rules_file)
+  freedreno_copyright=files(copyright_file)
+  
+  freedreno_xml_header_files=[]
+  
+  for f in xml_files:
+    _name=f+'.h'
+    freedreno_xml_header_files+=custom_target(_name,input=[gen_header_py,f,freedreno_schema,freedreno_copyright],output=_name,command=[prog_python,'@INPUT0@','--rnn',rnn_src_path,'--xml','@INPUT1@','c-defines'],capture=True,)
+  
+  
+  for f in install_files:
+    _gzname=f+'.gz'
+    custom_target(_gzname,input=f,output=_gzname,command=[prog_gzip,'-kc','@INPUT@'],capture=True,install_dir=rnn_install_path,install=install_fd_decode_tools,build_by_default=install_fd_decode_tools,)
+  
+  
+  set_relative_dir('src/freedreno/registers/adreno')
+  ########################################################################################################################
+  ### Begin conversion from: src/freedreno/registers/adreno/meson.build
+  ########################################################################################################################
+  xml_reg_files=['a2xx.xml','a3xx.xml','a4xx.xml','a5xx.xml','a6xx.xml',]
+  
+  xml_files=xml_reg_files
+  xml_files+=['a6xx_gmu.xml','ocmem.xml','adreno_control_regs.xml','adreno_pipe_regs.xml','adreno_common.xml','adreno_pm4.xml',]
+  
+  freedreno_py_header_files=[]
+  
+  for f in xml_files:
+    _name=f+'.h'
+    freedreno_xml_header_files+=custom_target(_name,input=[gen_header_py,f,freedreno_schema,freedreno_copyright],output=_name,command=[prog_python,'@INPUT0@','--rnn',rnn_src_path,'--xml','@INPUT1@','c-defines'],capture=True,)
+    _gzname=f+'.gz'
+    custom_target(_gzname,input=f,output=_gzname,command=[prog_gzip,'-kc','@INPUT@'],capture=True,install_dir=rnn_install_path+'/adreno',install=install_fd_decode_tools,build_by_default=install_fd_decode_tools,)
+  
+  
+  freedreno_xml_header_files+=custom_target('a6xx-pack.xml.h',input=[gen_header_py,'a6xx.xml',freedreno_schema,freedreno_copyright],output='a6xx-pack.xml.h',command=[prog_python,'@INPUT0@','--rnn',rnn_src_path,'--xml','@INPUT1@','c-pack-structs'],capture=True,)
+  
+  freedreno_xml_header_files+=custom_target('adreno-pm4-pack.xml.h',input=[gen_header_py,'adreno_pm4.xml',freedreno_schema,freedreno_copyright],output='adreno-pm4-pack.xml.h',command=[prog_python,'@INPUT0@','--rnn',rnn_src_path,'--xml','@INPUT1@','c-pack-structs'],capture=True,)
+  
+  for f in xml_reg_files:
+    _pyname=f.split('.')[0]+'.py'
+    freedreno_py_header_files+=custom_target(_pyname,input=[gen_header_py,f,freedreno_schema,freedreno_copyright],output=_pyname,command=[prog_python,'@INPUT0@','--rnn',rnn_src_path,'--xml','@INPUT1@','py-defines'],capture=True,)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/freedreno/registers/adreno/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/freedreno/registers')
+  
+  ########################################################################################################################
+  ### End conversion from: src/freedreno/registers/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/freedreno')
+  set_relative_dir('src/freedreno/common')
+  ########################################################################################################################
+  ### Begin conversion from: src/freedreno/common/meson.build
+  ########################################################################################################################
+  freedreno_devices_h=custom_target('freedreno_devices.h',input='freedreno_devices.py',output='freedreno_devices.h',command=[prog_python,'@INPUT@','-p',join_paths(meson.project_build_root(),'src/freedreno/registers/adreno/')],depends=freedreno_py_header_files,capture=True,)
+  
+  libfreedreno_common=static_library('freedreno_common',['disasm.h','fd6_pack.h','freedreno_dev_info.c','freedreno_dev_info.h','freedreno_pm4.h','freedreno_rd_output.c','freedreno_rd_output.h','freedreno_uuid.c','freedreno_uuid.h','freedreno_guardband.h',freedreno_devices_h,sha1_h,'redump.h'],include_directories=[inc_freedreno,inc_include,inc_src],c_args=[no_override_init_args],build_by_default=True,dependencies=[idep_mesautil],gnu_symbol_visibility='hidden',)
+  
+  idep_libfreedreno_common=declare_dependency(link_with=[libfreedreno_common],include_directories=[inc_freedreno,inc_include,inc_src],)
+  
+  ########################################################################################################################
+  ### End conversion from: src/freedreno/common/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/freedreno')
+  set_relative_dir('src/freedreno/isa')
+  ########################################################################################################################
+  ### Begin conversion from: src/freedreno/isa/meson.build
+  ########################################################################################################################
+  isa_depend_files=['ir3-common.xml','ir3-cat0.xml','ir3-cat1.xml','ir3-cat2.xml','ir3-cat3.xml','ir3-cat4.xml','ir3-cat5.xml','ir3-cat6.xml','ir3-cat7.xml',isaspec_py_deps]
+  
+  ir3_isa=custom_target('ir3-isa',input=['ir3.xml'],output=['ir3-isa.c','ir3-isa.h'],command=[prog_isaspec_decode,'--xml','@INPUT@','--out-c','@OUTPUT0@','--out-h','@OUTPUT1@',],depend_files=isa_depend_files,)
+  
+  decode_files=[ir3_isa,'isa.h',]
+  
+  _libir3decode=static_library('ir3decode',decode_files,dependencies=[idep_mesautil,idep_isaspec_decode],link_with=[libisaspec],include_directories=[inc_include,inc_src,],gnu_symbol_visibility='hidden',)
+  
+  idep_libir3decode=declare_dependency(include_directories=[include_directories('.'),inc_include,inc_src],link_with=_libir3decode,dependencies=[idep_isaspec_decode],sources=[ir3_isa],)
+  
+  ir3disasm=executable('ir3-disasm',['ir3-disasm.c'],dependencies=[idep_libir3decode,idep_libfreedreno_common],build_by_default=with_tools.count('freedreno') > 0,include_directories=[inc_src,],install=False,)
+  
+  encode_h=custom_target('encode.h',input=['ir3.xml'],output='encode.h',command=[prog_isaspec_encode,'--xml','@INPUT@','--out-h','@OUTPUT@'],depend_files=isa_depend_files,)
+  
+  encode_files=[encode_h,'encode.c','isa.h',]
+  
+  libir3encode=static_library('ir3encode',encode_files,dependencies=[idep_mesautil,idep_nir],include_directories=[inc_src,inc_include,inc_freedreno,],gnu_symbol_visibility='hidden',)
+  
+  ########################################################################################################################
+  ### End conversion from: src/freedreno/isa/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/freedreno')
+  set_relative_dir('src/freedreno/ir2')
+  ########################################################################################################################
+  ### Begin conversion from: src/freedreno/ir2/meson.build
+  ########################################################################################################################
+  libfreedreno_ir2=static_library('freedreno_ir2',['disasm-a2xx.c','instr-a2xx.h',freedreno_xml_header_files,],include_directories=[inc_freedreno,inc_include,inc_src,],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[],build_by_default=False,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/freedreno/ir2/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/freedreno')
+  set_relative_dir('src/freedreno/ir3')
+  ########################################################################################################################
+  ### Begin conversion from: src/freedreno/ir3/meson.build
+  ########################################################################################################################
+  ir3_nir_trig_c=custom_target('ir3_nir_trig.c',input='ir3_nir_trig.py',output='ir3_nir_trig.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],capture=True,depend_files=nir_algebraic_depends,)
+  
+  ir3_nir_imul_c=custom_target('ir3_nir_imul.c',input='ir3_nir_imul.py',output='ir3_nir_imul.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],capture=True,depend_files=nir_algebraic_depends,)
+  
+  ir3_nir_branch_and_or_not_c=custom_target('ir3_nir_branch_and_or_not.c',input='ir3_nir_branch_and_or_not.py',output='ir3_nir_branch_and_or_not.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],capture=True,depend_files=nir_algebraic_depends,)
+  
+  ir3_parser=custom_target('ir3_parser.[ch]',input='ir3_parser.y',output=['ir3_parser.c','ir3_parser.h'],command=[prog_bison,'@INPUT@','--name-prefix=ir3_yy','--defines=@OUTPUT1@','--output=@OUTPUT0@'])
+  
+  ir3_lexer=custom_target('ir3_lexer.c',input='ir3_lexer.l',output='ir3_lexer.c',command=[prog_flex,'-o','@OUTPUT@','@INPUT@'])
+  
+  libfreedreno_ir3_files=files('disasm-a3xx.c','instr-a3xx.h','ir3.c','ir3_a4xx.c','ir3_a6xx.c','ir3_array_to_ssa.c','ir3_assembler.c','ir3_assembler.h','ir3_compiler_nir.c','ir3_compiler.c','ir3_compiler.h','ir3_context.c','ir3_context.h','ir3_cf.c','ir3_cp.c','ir3_cse.c','ir3_dce.c','ir3_delay.c','ir3_dominance.c','ir3_disk_cache.c','ir3_image.c','ir3_image.h','ir3.h','ir3_legalize.c','ir3_legalize_relative.c','ir3_liveness.c','ir3_lower_parallelcopy.c','ir3_lower_shared_phi.c','ir3_lower_spill.c','ir3_lower_subgroups.c','ir3_merge_regs.c','ir3_nir.c','ir3_nir.h','ir3_nir_analyze_ubo_ranges.c','ir3_nir_lower_64b.c','ir3_nir_lower_driver_params_to_ubo.c','ir3_nir_lower_load_barycentric_at_sample.c','ir3_nir_lower_load_barycentric_at_offset.c','ir3_nir_lower_push_consts_to_preamble.c','ir3_nir_lower_io_offsets.c','ir3_nir_lower_tess.c','ir3_nir_lower_tex_prefetch.c','ir3_nir_lower_wide_load_store.c','ir3_nir_move_varying_inputs.c','ir3_nir_lower_layer_id.c','ir3_nir_opt_preamble.c','ir3_opt_predicates.c','ir3_postsched.c','ir3_print.c','ir3_ra.c','ir3_ra.h','ir3_ra_predicates.c','ir3_ra_validate.c','ir3_reconvergence.c','ir3_remove_unreachable.c','ir3_sched.c','ir3_shader.c','ir3_shader.h','ir3_shared_folding.c','ir3_shared_ra.c','ir3_spill.c','ir3_validate.c',)
+  
+  libfreedreno_ir3=static_library('freedreno_ir3',[libfreedreno_ir3_files,ir3_nir_trig_c,ir3_nir_imul_c,ir3_nir_branch_and_or_not_c,ir3_parser[0],ir3_parser[1],ir3_lexer],include_directories=[inc_freedreno,inc_include,inc_src],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',link_with=[libir3encode,libfreedreno_common],dependencies=[idep_libir3decode,idep_nir_headers,dep_dl,idep_mesautil],build_by_default=False,)
+  
+  test('ir3_disasm',executable('ir3_disasm','tests/disasm.c',link_args=[ld_args_build_id],link_with=[libfreedreno_ir3],dependencies=[idep_libir3decode,idep_mesautil,idep_nir],include_directories=[inc_freedreno,inc_include,inc_src],),suite=['freedreno'],)
+  
+  test('ir3_delay_test',executable('ir3_delay_test','tests/delay.c',link_with=libfreedreno_ir3,link_args=ld_args_build_id,dependencies=[idep_mesautil,idep_nir],include_directories=[inc_freedreno,inc_include,inc_src],),suite=['freedreno'],)
+  
+  ########################################################################################################################
+  ### End conversion from: src/freedreno/ir3/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/freedreno')
+  set_relative_dir('src/freedreno/fdl')
+  ########################################################################################################################
+  ### Begin conversion from: src/freedreno/fdl/meson.build
+  ########################################################################################################################
+  libfreedreno_layout=static_library('freedreno_layout',['fd5_layout.c','fd6_format_table.c','fd6_layout.c','fd6_view.c','freedreno_layout.c',freedreno_xml_header_files,],include_directories=[inc_freedreno,inc_include,inc_src],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[idep_nir_headers,idep_mesautil],build_by_default=False,)
+  
+  for major in ['5','6']:
+    test('fd'+major+'_layout',executable('fd'+major+'_layout',['fd_layout_test.c','fd'+major+'_layout_test.c',freedreno_xml_header_files,],link_with=libfreedreno_layout,dependencies=idep_mesautil,include_directories=[inc_include,inc_src,inc_freedreno],),suite=['freedreno'],)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/freedreno/fdl/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/freedreno')
+  
+  if system_has_kms_drm:
+    set_relative_dir('src/freedreno/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/freedreno/drm/meson.build
+    ########################################################################################################################
+    libfreedreno_drm_files=files('freedreno_bo.c','freedreno_bo_heap.c','freedreno_bo_cache.c','freedreno_device.c','freedreno_drmif.h','freedreno_pipe.c','freedreno_priv.h','freedreno_ringbuffer.c','freedreno_ringbuffer.h','freedreno_ringbuffer_sp.c','freedreno_ringbuffer_sp.h','freedreno_ringbuffer_sp_reloc.h',)
+    libfreedreno_drm_flags=[]
+    libfreedreno_drm_includes=[inc_freedreno,inc_include,inc_src,]
+    libfreedreno_drm_deps=[dep_libdrm,dep_valgrind,idep_mesautil,]
+    
+    if with_perfetto:
+      libfreedreno_drm_deps+=dep_perfetto
+      libfreedreno_drm_files += ['freedreno_drm_perfetto.cc'] if isinstance(libfreedreno_drm_files, list) else 'freedreno_drm_perfetto.cc'
+    # in either case:
+    libfreedreno_drm_files += ['freedreno_drm_perfetto.h'] if isinstance(libfreedreno_drm_files, list) else 'freedreno_drm_perfetto.h'
+    
+    libfreedreno_drm_msm_files=files('msm/msm_bo.c','msm/msm_device.c','msm/msm_pipe.c','msm/msm_priv.h','msm/msm_ringbuffer.c','msm/msm_ringbuffer_sp.c',)
+    libfreedreno_drm_files+=libfreedreno_drm_msm_files
+    
+    libfreedreno_drm_virtio_files=files('virtio/virtio_bo.c','virtio/virtio_device.c','virtio/virtio_pipe.c','virtio/virtio_priv.h','virtio/virtio_ringbuffer.c',)
+    if freedreno_kmds.count('virtio') > 0:
+      libfreedreno_drm_files+=libfreedreno_drm_virtio_files
+      libfreedreno_drm_flags += ['-DHAVE_FREEDRENO_VIRTIO'] if isinstance(libfreedreno_drm_flags, list) else '-DHAVE_FREEDRENO_VIRTIO'
+      libfreedreno_drm_includes+=[inc_virtio_gpu,inc_virtio_vdrm,]
+    
+    
+    libfreedreno_drm=static_library('freedreno_drm',[libfreedreno_drm_files,freedreno_xml_header_files,],include_directories=libfreedreno_drm_includes,c_args=[no_override_init_args,libfreedreno_drm_flags],gnu_symbol_visibility='hidden',dependencies=libfreedreno_drm_deps,link_with=[libvdrm],build_by_default=False,)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/freedreno/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/freedreno')
+  
+  
+  set_relative_dir('src/freedreno/perfcntrs')
+  ########################################################################################################################
+  ### Begin conversion from: src/freedreno/perfcntrs/meson.build
+  ########################################################################################################################
+  libfreedreno_perfcntrs_files=files('fd2_perfcntr.c','fd5_perfcntr.c','fd6_perfcntr.c','fd7_perfcntr.c','freedreno_dt.c','freedreno_dt.h','freedreno_perfcntr.c','freedreno_perfcntr.h',)
+  
+  libfreedreno_perfcntrs=static_library('freedreno_perfcntrs',[libfreedreno_perfcntrs_files,freedreno_xml_header_files],include_directories=[inc_freedreno,inc_include,inc_src],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',link_with=[libfreedreno_common],dependencies=idep_nir_headers,build_by_default=False,)
+  
+  dep_libconfig=dependency('libconfig',required=False)
+  dep_curses=dependency('curses',required=False)
+  
+  if dep_libconfig.found() and dep_curses.found():
+    fdperf=executable('fdperf',['fdperf.c',freedreno_xml_header_files],include_directories=[inc_freedreno,inc_include,inc_src,],link_with=[libfreedreno_common,libfreedreno_drm,libfreedreno_perfcntrs,],dependencies=[dep_libconfig,dep_libdrm,dep_curses,idep_mesautil,],build_by_default=with_tools.count('freedreno') > 0,install=with_tools.count('freedreno') > 0,)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/freedreno/perfcntrs/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/freedreno')
+  
+  if system_has_kms_drm:
+    set_relative_dir('src/freedreno/computerator')
+    ########################################################################################################################
+    ### Begin conversion from: src/freedreno/computerator/meson.build
+    ########################################################################################################################
+    computerator_files=['a4xx.cc','a6xx.cc','ir3_asm.cc','main.cc',freedreno_xml_header_files,ir3_parser[1],]
+    
+    computerator_cpp_args=cpp.get_supported_arguments(['-Wno-sign-compare','-Wno-array-bounds',])
+    
+    if meson.is_cross_build():
+      computerator_cpp_args += ['-Wno-array-bounds'] if isinstance(computerator_cpp_args, list) else '-Wno-array-bounds'
+    
+    
+    computerator=executable('computerator',computerator_files,include_directories=[inc_freedreno,inc_include,inc_src,],link_with=[libfreedreno_drm,libfreedreno_ir3,libfreedreno_perfcntrs,libfreedreno_common,],dependencies=[dep_libdrm,idep_mesautil,idep_nir,],cpp_args=[computerator_cpp_args],build_by_default=with_tools.count('freedreno') > 0,install=with_tools.count('freedreno') > 0,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/freedreno/computerator/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/freedreno')
+  
+  
+  if with_perfetto and (with_datasources.count('freedreno') > 0 or with_datasources.count('auto') > 0):
+    set_relative_dir('src/freedreno/ds')
+    ########################################################################################################################
+    ### Begin conversion from: src/freedreno/ds/meson.build
+    ########################################################################################################################
+    pps_freedreno_lib=static_library('freedreno-gpu',sources=['fd_pps_driver.cc','fd_pps_driver.h',freedreno_xml_header_files,],include_directories=[inc_tool,inc_src,inc_freedreno,inc_include,],dependencies=[dep_libdrm,dep_perfetto,dep_valgrind,],)
+    
+    pps_freedreno_dep=declare_dependency(link_with=[pps_freedreno_lib,libfreedreno_common,libfreedreno_drm,libfreedreno_perfcntrs,],dependencies=[idep_mesautil,],include_directories=[inc_tool,inc_src,],compile_args=['-DPPS_FREEDRENO',],)
+    
+    pps_datasources+=pps_freedreno_dep
+    pps_includes+=[inc_include,inc_freedreno,]
+    
+    ########################################################################################################################
+    ### End conversion from: src/freedreno/ds/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/freedreno')
+  
+  
+  # Everything that depends on rnn requires (indirectly) libxml2:
+  if dep_libxml2.found() and with_tools.count('freedreno') > 0:
+    set_relative_dir('src/freedreno/rnn')
+    ########################################################################################################################
+    ### Begin conversion from: src/freedreno/rnn/meson.build
+    ########################################################################################################################
+    libfreedreno_rnn_files=files('colors.c','colors.h','path.c','rnn.c','rnn.h','rnndec.c','rnndec.h','util.h',)
+    
+    libfreedreno_rnn=static_library('freedreno_rnn',libfreedreno_rnn_files,include_directories=[inc_src,inc_include,],c_args=[no_override_init_args,'-DRNN_DEF_PATH="'+rnn_path+'"',],gnu_symbol_visibility='hidden',dependencies=[dep_libxml2,idep_mesautil],build_by_default=False,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/freedreno/rnn/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/freedreno')
+    set_relative_dir('src/freedreno/decode')
+    ########################################################################################################################
+    ### Begin conversion from: src/freedreno/decode/meson.build
+    ########################################################################################################################
+    if with_tests:
+      diff=find_program('diff')
+    # Shared cmdstream decoding:
+    libfreedreno_cffdec=static_library('freedreno_cffdec',['buffers.c','buffers.h','cffdec.c','cffdec.h','pager.c','pager.h','rnnutil.c','rnnutil.h','util.h',],include_directories=[inc_freedreno,inc_freedreno_rnn,inc_include,inc_src,],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[],link_with=[libfreedreno_rnn,libfreedreno_ir2,libfreedreno_ir3,_libmesa_util,],build_by_default=False,)
+    
+    if dep_libarchive.found():
+      libfreedreno_io=static_library('freedreno_io',['io.c','io.h',],include_directories=[],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[dep_libarchive,],build_by_default=False,)
+    
+      for kmd in freedreno_kmds:
+        if not(kmd in ['kgsl','msm','wsl']):
+          warning('replay not supported for '+kmd+' KMD')
+          continue
+    
+    
+        # Only append the KMD name if there are multiple KMDs
+        if len(freedreno_kmds)==1:
+          replay_name='replay'
+        else:
+          replay_name='replay-'+kmd
+    
+    
+        replay_flags=[]
+        replay_deps=[]
+        if kmd=='kgsl':
+          replay_flags += ['-DFD_REPLAY_KGSL'] if isinstance(replay_flags, list) else '-DFD_REPLAY_KGSL'
+        elif kmd=='msm':
+          replay_flags += ['-DFD_REPLAY_MSM'] if isinstance(replay_flags, list) else '-DFD_REPLAY_MSM'
+          replay_deps+=dep_libdrm
+        elif kmd=='wsl':
+          replay_flags += ['-DFD_REPLAY_WSL'] if isinstance(replay_flags, list) else '-DFD_REPLAY_WSL'
+    
+    
+        replay=executable(replay_name,['replay.c'],include_directories=[inc_freedreno,inc_include,inc_src,],c_args=[no_override_init_args,replay_flags],gnu_symbol_visibility='hidden',dependencies=replay_deps,link_with=[libfreedreno_cffdec,libfreedreno_io,],build_by_default=with_tools.count('freedreno') > 0,install=install_fd_decode_tools,)
+    
+    
+      rddecompiler=executable('rddecompiler',['rddecompiler.c',freedreno_xml_header_files,],include_directories=[inc_freedreno,inc_freedreno_rnn,inc_include,inc_src,],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,],link_with=[libfreedreno_cffdec,libfreedreno_io,],build_by_default=with_tools.count('freedreno') > 0,install=install_fd_decode_tools,)
+    
+      generate_rd=executable('generate_rd',['generate-rd.cc'],include_directories=[inc_freedreno,inc_freedreno_rnn,inc_include,inc_src,],link_with=[libfreedreno_cffdec,],dependencies=[idep_nir,],install=install_fd_decode_tools,)
+    else:
+      warning('libarchive not found, not building replay or rddecompiler')
+    
+    
+    if dep_lua.found() and dep_libarchive.found():
+      cffdump=executable('cffdump',['cffdump.c','script.c','script.h'],include_directories=[inc_freedreno,inc_freedreno_rnn,inc_include,inc_src,],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[dep_lua,],link_with=[libfreedreno_cffdec,libfreedreno_io,],build_by_default=with_tools.count('freedreno') > 0,install=install_fd_decode_tools,)
+    
+      if with_tests:
+        cffdump_tests=[['fd-clouds',['--frame','0','--once']],['es2gears-a320',['--frame','0','--once']],['glxgears-a420',['--frame','1','--once']],['compute-a540',['--once']],['dEQP-GLES2.functional.texture.specification.basic_teximage2d.rgba16f_2d',['--once']],['dEQP-VK.draw.indirect_draw.indexed.indirect_draw_count.triangle_list',['--frame','0','--once']],['shadow',['--script',files('scripts/parse-submits.lua')]],]
+        for cffdump_test in cffdump_tests:
+          name=cffdump_test[0]
+          args=cffdump_test[1]
+    
+          log=custom_target(name+'.log',output=name+'.log',command=[cffdump,'--unit-test',args,files('../.gitlab-ci/traces/'+name+'.rd.gz')],capture=True,)
+          test('cffdump-'+name,diff,args=['-u',files('../.gitlab-ci/reference/'+name+'.log'),log],suite='freedreno',workdir=dir_source_root)
+    
+    
+    
+    else:
+      warning('lua or libarchive not found, not building cffdump')
+    
+    
+    crashdec=executable('crashdec',['crashdec.c','crashdec.h','crashdec-hfi.c','crashdec-mempool.c','crashdec-prefetch.c',],include_directories=[inc_freedreno,inc_freedreno_rnn,inc_include,inc_src,],gnu_symbol_visibility='hidden',dependencies=[],link_with=[libfreedreno_cffdec,],build_by_default=with_tools.count('freedreno') > 0,install=install_fd_decode_tools,)
+    
+    if with_tests:
+      crashdec_tests=[['crash',['-sf']],['crash_prefetch',['-sf']],['prefetch-test',['-sf']],]
+      for crashdec_test in crashdec_tests:
+        name=crashdec_test[0]
+        args=crashdec_test[1]
+    
+        log=custom_target(name+'.log',output=name+'.log',command=[crashdec,args,files('../.gitlab-ci/traces/'+name+'.devcore')],capture=True,env={'GALLIUM_DUMP_CPU':'false'},)
+    
+        test('crashdec-'+name,diff,args=['-u',files('../.gitlab-ci/reference/'+name+'.log'),log],suite='freedreno',workdir=dir_source_root)
+    
+    
+    
+    
+    if dep_libarchive.found():
+      pgmdump=executable('pgmdump','pgmdump.c',include_directories=[inc_freedreno,inc_include,inc_src,],gnu_symbol_visibility='hidden',dependencies=[],link_with=[libfreedreno_cffdec,libfreedreno_io,libfreedreno_ir2,libfreedreno_ir3,],build_by_default=with_tools.count('freedreno') > 0,install=False,)
+      pgmdump2=executable('pgmdump2','pgmdump2.c',include_directories=[inc_freedreno,inc_include,inc_src,],gnu_symbol_visibility='hidden',dependencies=[],link_with=[libfreedreno_cffdec,libfreedreno_io,libfreedreno_ir2,libfreedreno_ir3,],build_by_default=with_tools.count('freedreno') > 0,install=False,)
+    else:
+      warning('libarchive not found, not building pgmdump')
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/freedreno/decode/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/freedreno')
+    set_relative_dir('src/freedreno/afuc')
+    ########################################################################################################################
+    ### Begin conversion from: src/freedreno/afuc/meson.build
+    ########################################################################################################################
+    if with_tests:
+      diff=find_program('diff')
+    
+    
+    afuc_parser=custom_target('parser.[ch]',input='parser.y',output=['parser.c','parser.h'],command=[prog_bison,'@INPUT@','--defines=@OUTPUT1@','--output=@OUTPUT0@'])
+    
+    afuc_lexer=custom_target('lexer.c',input='lexer.l',output='lexer.c',command=[prog_flex,'-o','@OUTPUT@','@INPUT@'])
+    
+    encode_h=custom_target('encode.h',input=['afuc.xml'],output='encode.h',command=[prog_isaspec_encode,'--xml','@INPUT@','--out-h','@OUTPUT@'],)
+    
+    asm=executable('afuc-asm',['asm.c','util.c','util.h',afuc_lexer,afuc_parser,encode_h,],include_directories=[inc_freedreno_rnn,inc_include,inc_src,inc_util,],link_with=[libfreedreno_rnn,],dependencies=[],build_by_default=with_tools.count('freedreno') > 0,install=install_fd_decode_tools,)
+    if with_tests:
+      asm_fw=custom_target('afuc_test.fw',output='afuc_test.fw',command=[asm,files('../.gitlab-ci/traces/afuc_test.asm'),'@OUTPUT@'],)
+      asm_fw_a7xx=custom_target('afuc_test_a7xx.fw',output='afuc_test_a7xx.fw',command=[asm,files('../.gitlab-ci/traces/afuc_test_a7xx.asm'),'@OUTPUT@'],)
+      test('afuc-asm',diff,args=['-u',files('../.gitlab-ci/reference/afuc_test.fw'),asm_fw],suite='freedreno',workdir=dir_source_root)
+      test('afuc-asm-a7xx',diff,args=['-u',files('../.gitlab-ci/reference/afuc_test_a7xx.fw'),asm_fw_a7xx],suite='freedreno',workdir=dir_source_root)
+    
+    
+    afuc_isa=custom_target('afuc-isa',input=['afuc.xml'],output=['afuc-isa.c','afuc-isa.h'],command=[prog_isaspec_decode,'--xml','@INPUT@','--out-c','@OUTPUT0@','--out-h','@OUTPUT1@',],)# Disasm requires mmaping >4GB
+    if cc.sizeof('size_t')>4:
+      disasm=executable('afuc-disasm',['disasm.c','emu.c','emu.h','emu-ds.c','emu-regs.c','emu-ui.c','util.c','util.h',afuc_isa,],include_directories=[inc_freedreno,inc_freedreno_rnn,inc_include,inc_src,inc_util,],link_with=[libfreedreno_rnn,libisaspec],dependencies=[idep_mesautil,idep_isaspec_decode],build_by_default=with_tools.count('freedreno') > 0,install=install_fd_decode_tools,)
+    
+      if with_tests:
+        disasm_fw=custom_target('afuc_test.asm',output='afuc_test.asm',command=[disasm,'-u',files('../.gitlab-ci/reference/afuc_test.fw')],capture=True)
+        disasm_fw_a7xx=custom_target('afuc_test_a7xx.asm',output='afuc_test_a7xx.asm',command=[disasm,'-u',files('../.gitlab-ci/reference/afuc_test_a7xx.fw')],capture=True)
+        test('afuc-disasm',diff,args=['-u',files('../.gitlab-ci/reference/afuc_test.asm'),disasm_fw],suite='freedreno',workdir=dir_source_root)
+        test('afuc-disasm-a7xx',diff,args=['-u',files('../.gitlab-ci/reference/afuc_test_a7xx.asm'),disasm_fw_a7xx],suite='freedreno',workdir=dir_source_root)
+    
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/freedreno/afuc/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/freedreno')
+  elif with_tools.count('freedreno') > 0:
+    message('libxml2 not found, skipping tools that depend on it')
+  
+  
+  if with_tools.count('drm-shim') > 0:
+    subdir('drm-shim')
+  
+  
+  if with_freedreno_vk:
+    set_relative_dir('src/freedreno/vulkan')
+    ########################################################################################################################
+    ### Begin conversion from: src/freedreno/vulkan/meson.build
+    ########################################################################################################################
+    tu_entrypoints=custom_target('tu_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['tu_entrypoints.h','tu_entrypoints.cc'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','tu','--include','adreno_common.xml.h','--tmpl-prefix','tu','--tmpl-param','chip CHIP','--tmpl-variants','<A6XX>','<A7XX>','--beta',str(with_vulkan_beta),'--device-prefix','tu_rmv',],depend_files=vk_entrypoints_gen_depend_files,)
+    
+    
+    libtu_files=files('layers/tu_rmv_layer.cc','tu_autotune.cc','tu_buffer.cc','tu_buffer_view.cc','tu_clear_blit.cc','tu_cmd_buffer.cc','tu_cs_breadcrumbs.cc','tu_cs.cc','tu_device.cc','tu_descriptor_set.cc','tu_dynamic_rendering.cc','tu_event.cc','tu_formats.cc','tu_image.cc','tu_knl.cc','tu_lrz.cc','tu_nir_lower_multiview.cc','tu_pass.cc','tu_pipeline.cc','tu_sampler.cc','tu_query_pool.cc','tu_rmv.cc','tu_shader.cc','tu_suballoc.cc','tu_util.cc',)
+    
+    libtu_includes=[inc_include,inc_src,inc_freedreno,]
+    
+    tu_link_with=[]
+    tu_deps=[]
+    tu_flags=[]
+    
+    tu_wsi=False
+    
+    if with_platform_x11:
+      tu_deps+=dep_xcb_dri3
+      tu_wsi=True
+    
+    
+    if with_platform_wayland:
+      tu_deps+=dep_wayland_client
+      tu_wsi=True
+    
+    
+    if system_has_kms_drm and not with_platform_android:
+      tu_wsi=True
+    
+    
+    if tu_wsi:
+      libtu_files += ['tu_wsi.cc'] if isinstance(libtu_files, list) else 'tu_wsi.cc'
+    
+    
+    if with_platform_android:
+      libtu_files+=files('tu_android.cc')
+      tu_deps+=[dep_android]
+    
+    
+    if with_xlib_lease:
+      tu_deps+=[dep_xlib_xrandr]
+    
+    
+    if freedreno_kmds.count('kgsl') > 0:
+      tu_flags += ['-DTU_HAS_KGSL'] if isinstance(tu_flags, list) else '-DTU_HAS_KGSL'
+      libtu_files+=files('tu_knl_kgsl.cc')
+    
+    
+    if freedreno_kmds.count('msm') > 0:
+      tu_flags += ['-DTU_HAS_MSM'] if isinstance(tu_flags, list) else '-DTU_HAS_MSM'
+      libtu_files+=files('tu_knl_drm_msm.cc','tu_knl_drm.cc')
+      tu_deps+=dep_libdrm
+    
+    
+    if freedreno_kmds.count('virtio') > 0:
+      tu_flags += ['-DTU_HAS_VIRTIO'] if isinstance(tu_flags, list) else '-DTU_HAS_VIRTIO'
+      libtu_files+=files('tu_knl_drm_virtio.cc','tu_knl_drm.cc')
+      libtu_includes+=[inc_virtio_gpu,inc_virtio_vdrm,]
+      tu_link_with+=libvdrm
+      tu_deps+=dep_libdrm
+    
+    
+    tu_tracepoints=custom_target('tu_tracepoints.[ch]',input='tu_tracepoints.py',output=['tu_tracepoints.cc','tu_tracepoints.h','tu_tracepoints_perfetto.h'],command=[prog_python,'@INPUT@','-p',join_paths(dir_source_root,'src/util/perf/'),'--utrace-src','@OUTPUT0@','--utrace-hdr','@OUTPUT1@','--perfetto-hdr','@OUTPUT2@',],depend_files=u_trace_py,)
+    
+    if with_perfetto:
+      libtu_files+=['tu_perfetto.cc']
+      tu_deps+=dep_perfetto
+    
+    
+    tu_cpp_args=[]
+    tu_cpp_args+=cpp.get_supported_arguments(['-fno-exceptions','-fno-rtti','-Wno-address-of-temporary','-Wno-array-bounds','-Wno-c99-designator','-Wno-class-memaccess','-Wno-missing-braces','-Wno-narrowing','-Wno-pointer-arith','-Wno-reorder-init-list','-Wno-sign-compare','-Wno-switch','-Wno-unused-function','-Wno-writable-strings','-Wno-write-strings',])# to be reliable for cross builds (!?!) so just jam in some args we
+    # need and hope for the best
+    if meson.is_cross_build():
+      tu_cpp_args += ['-Wno-array-bounds'] if isinstance(tu_cpp_args, list) else '-Wno-array-bounds'
+      tu_cpp_args += ['-Wno-c++11-narrowing'] if isinstance(tu_cpp_args, list) else '-Wno-c++11-narrowing'
+      tu_cpp_args += ['-Wno-missing-braces'] if isinstance(tu_cpp_args, list) else '-Wno-missing-braces'
+      tu_cpp_args += ['-Wno-unused-function'] if isinstance(tu_cpp_args, list) else '-Wno-unused-function'
+      tu_cpp_args += ['-Wno-writable-strings'] if isinstance(tu_cpp_args, list) else '-Wno-writable-strings'
+    
+    
+    libvulkan_freedreno=shared_library('vulkan_freedreno',[libtu_files,tu_entrypoints,tu_tracepoints,freedreno_xml_header_files,sha1_h,u_format_pack_h],include_directories=libtu_includes,link_with=[libfreedreno_ir3,libfreedreno_layout,libfreedreno_perfcntrs,tu_link_with,],dependencies=[idep_libfreedreno_common,dep_dl,dep_elf,dep_m,dep_thread,dep_valgrind,idep_nir,tu_deps,idep_vulkan_util,idep_vulkan_runtime,idep_vulkan_wsi,idep_mesautil,],c_args=[no_override_init_args,tu_flags],cpp_args=[tu_cpp_args,tu_flags],gnu_symbol_visibility='hidden',link_args=[vulkan_icd_link_args,ld_args_bsymbolic,ld_args_gc_sections,ld_args_build_id],link_depends=vulkan_icd_link_depends,install=True,)
+    
+    if with_symbols_check:
+      test('tu symbols check',symbols_check,args=['--lib',libvulkan_freedreno,'--symbols-file',vulkan_icd_symbols,symbols_check_args,],suite=['freedreno'],)
+    
+    
+    freedreno_icd=custom_target('freedreno_icd',input=[vk_icd_gen,vk_api_xml],output='freedreno_icd.{}.json'.format(host_machine.cpu()),command=[prog_python,'@INPUT0@','--api-version','1.1','--xml','@INPUT1@','--lib-path',join_paths(get_option('prefix'),get_option('libdir'),'libvulkan_freedreno.so'),'--out','@OUTPUT@',],build_by_default=True,install_dir=with_vulkan_icd_dir,install_tag='runtime',install=True,)
+    
+    _dev_icdname='freedreno_devenv_icd.{}.json'.format(host_machine.cpu())
+    _dev_icd=custom_target('freedreno_devenv_icd',input=[vk_icd_gen,vk_api_xml],output=_dev_icdname,command=[prog_python,'@INPUT0@','--api-version','1.1','--xml','@INPUT1@','--lib-path',(meson.current_build_dir() + 'libvulkan_freedreno.so') if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / 'libvulkan_freedreno.so'),'--out','@OUTPUT@',],build_by_default=True,)
+    
+    devenv.append('VK_DRIVER_FILES',_dev_icd.full_path())
+    # Deprecated: replaced by VK_DRIVER_FILES above
+    devenv.append('VK_ICD_FILENAMES',_dev_icd.full_path())
+    
+    ########################################################################################################################
+    ### End conversion from: src/freedreno/vulkan/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/freedreno')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/freedreno/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_imagination_vk:
+  set_relative_dir('src/imagination')
+  ########################################################################################################################
+  ### Begin conversion from: src/imagination/meson.build
+  ########################################################################################################################
+  imagination_c_args=cc.get_supported_arguments('-Werror=pointer-arith',)
+  
+  inc_imagination=include_directories(['.','common','include',])
+  
+  if with_imagination_vk:
+    set_relative_dir('src/imagination/common')
+    ########################################################################################################################
+    ### Begin conversion from: src/imagination/common/meson.build
+    ########################################################################################################################
+    libpowervr_common=static_library('powervr_common',['pvr_debug.c','pvr_device_info.c','pvr_dump.c','pvr_dump_info.c','pvr_util.c',sha1_h,],include_directories=[inc_include,inc_src,inc_imagination,],c_args=[imagination_c_args,no_override_init_args],gnu_symbol_visibility='hidden',)
+    
+    ########################################################################################################################
+    ### End conversion from: src/imagination/common/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/imagination')
+    set_relative_dir('src/imagination/csbgen')
+    ########################################################################################################################
+    ### Begin conversion from: src/imagination/csbgen/meson.build
+    ########################################################################################################################
+    pvr_xml_files=['rogue_cdm.xml','rogue_cr.xml','rogue_ipf.xml','rogue_kmd_stream.xml','rogue_lls.xml','rogue_pbestate.xml','rogue_pds.xml','rogue_ppp.xml','rogue_texstate.xml','rogue_vdm.xml',]
+    
+    pvr_xml_pack=[]
+    for f in pvr_xml_files:
+      _name='{}.h'.format(f.split('.')[0])
+      pvr_xml_pack+=custom_target(_name,input=['gen_pack_header.py',f],output=_name,command=[prog_python,'@INPUT@'],capture=True,)
+    
+    
+    dep_csbgen=declare_dependency(sources=[pvr_xml_pack])
+    
+    ########################################################################################################################
+    ### End conversion from: src/imagination/csbgen/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/imagination')
+    set_relative_dir('src/imagination/rogue')
+    ########################################################################################################################
+    ### Begin conversion from: src/imagination/rogue/meson.build
+    ########################################################################################################################
+    with_imagination_tools=with_tools.count('imagination') > 0
+    
+    inc_rogue=include_directories(['.',])
+    
+    libpowervr_rogue_files=files('nir/rogue_nir_lower_io.c','nir/rogue_nir_pfo.c','rogue.c','rogue_build_data.c','rogue_builder.c','rogue_compile.c','rogue_constreg.c','rogue_debug.c','rogue_encode.c','rogue_info.c','rogue_nir.c','rogue_print.c','rogue_validate.c','passes/rogue_constreg.c','passes/rogue_copy_prop.c','passes/rogue_dce.c','passes/rogue_lower_late_ops.c','passes/rogue_lower_pseudo_ops.c','passes/rogue_regalloc.c','passes/rogue_schedule_instr_groups.c','passes/rogue_schedule_uvsw.c','passes/rogue_schedule_wdf.c','passes/rogue_trim.c',)
+    
+    # FIXME: Remove idep_vulkan_runtime once
+    # the compiler/driver interface is finalised.
+    libpowervr_rogue=shared_library('powervr_rogue',libpowervr_rogue_files,include_directories=[inc_imagination,inc_include,inc_src,],c_args=[imagination_c_args,no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[idep_mesautil,idep_nir,idep_vulkan_runtime,dep_csbgen],install=True,)
+    
+    set_relative_dir('src/imagination/rogue/tools')
+    ########################################################################################################################
+    ### Begin conversion from: src/imagination/rogue/tools/meson.build
+    ########################################################################################################################
+    rogue_compiler=executable('rogue_vk_compiler','vk_compiler.c',link_with=[libpowervr_rogue],dependencies=[idep_mesautil,idep_nir,idep_vulkan_runtime,dep_csbgen],include_directories=[inc_imagination,inc_include,inc_src,inc_rogue,],c_args=[imagination_c_args],build_by_default=with_imagination_tools,install=False,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/imagination/rogue/tools/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/imagination/rogue')
+    
+    ########################################################################################################################
+    ### End conversion from: src/imagination/rogue/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/imagination')
+    set_relative_dir('src/imagination/vulkan')
+    ########################################################################################################################
+    ### Begin conversion from: src/imagination/vulkan/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/imagination/vulkan/pds')
+    ########################################################################################################################
+    ### Begin conversion from: src/imagination/vulkan/pds/meson.build
+    ########################################################################################################################
+    libpowervr_pds_files=files('pvr_pds.c','pvr_pds_disasm.c','pvr_pds_printer.c','pvr_pipeline_pds.c',)
+    
+    libpowervr_pds_includes=include_directories('..','.','pvr_pds_programs',)
+    
+    libpowervr_pds=static_library('pvr_pds',[libpowervr_pds_files],include_directories=[libpowervr_pds_includes,inc_include,inc_src,inc_imagination,],c_args=[imagination_c_args,no_override_init_args,],gnu_symbol_visibility='hidden',pic=True,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/imagination/vulkan/pds/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/imagination/vulkan')
+    
+    pvr_entrypoints=custom_target('pvr_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['pvr_entrypoints.h','pvr_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','pvr','--beta',str(with_vulkan_beta)],depend_files=vk_entrypoints_gen_depend_files,)
+    
+    pvr_files=files('winsys/powervr/pvr_drm.c','winsys/powervr/pvr_drm_bo.c','winsys/powervr/pvr_drm_job_compute.c','winsys/powervr/pvr_drm_job_null.c','winsys/powervr/pvr_drm_job_render.c','winsys/powervr/pvr_drm_job_transfer.c','winsys/pvr_winsys.c','winsys/pvr_winsys_helper.c','pvr_blit.c','pvr_bo.c','pvr_border.c','pvr_clear.c','pvr_cmd_buffer.c','pvr_csb.c','pvr_descriptor_set.c','pvr_device.c','pvr_dump_bo.c','pvr_dump_csb.c','pvr_formats.c','pvr_hardcode.c','pvr_hw_pass.c','pvr_image.c','pvr_job_common.c','pvr_job_compute.c','pvr_job_context.c','pvr_job_render.c','pvr_job_transfer.c','pvr_pass.c','pvr_pipeline.c','pvr_transfer_frag_store.c','pvr_query.c','pvr_query_compute.c','pvr_queue.c','pvr_robustness.c','pvr_shader.c','pvr_spm.c','pvr_tex_state.c','pvr_wsi.c','usc/pvr_uscgen.c','usc/pvr_uscgen_tq.c',)
+    
+    pvr_includes=[include_directories('usc/programs'),include_directories('usc'),include_directories('winsys'),libpowervr_pds_includes,]
+    
+    pvr_deps=[dep_csbgen,dep_libdrm,dep_valgrind,idep_mesautil,idep_vulkan_runtime,idep_vulkan_util,idep_vulkan_wsi,]
+    
+    pvr_flags=[imagination_c_args,no_override_init_args,]
+    
+    if with_imagination_srv:
+      pvr_files+=files('winsys/pvrsrvkm/pvr_srv.c','winsys/pvrsrvkm/pvr_srv_bo.c','winsys/pvrsrvkm/pvr_srv_bridge.c','winsys/pvrsrvkm/pvr_srv_job_common.c','winsys/pvrsrvkm/pvr_srv_job_compute.c','winsys/pvrsrvkm/pvr_srv_job_null.c','winsys/pvrsrvkm/pvr_srv_job_render.c','winsys/pvrsrvkm/pvr_srv_job_transfer.c','winsys/pvrsrvkm/pvr_srv_sync.c','winsys/pvrsrvkm/pvr_srv_sync_prim.c',)
+      pvr_flags += ['-DPVR_SUPPORT_SERVICES_DRIVER'] if isinstance(pvr_flags, list) else '-DPVR_SUPPORT_SERVICES_DRIVER'
+    
+    
+    libvulkan_powervr_mesa=shared_library('vulkan_powervr_mesa',[pvr_files,pvr_entrypoints,sha1_h,u_format_pack_h],include_directories=[pvr_includes,inc_imagination,inc_include,inc_src,],link_with=[libpowervr_common,libpowervr_pds,libpowervr_rogue,libvulkan_wsi,],dependencies=[pvr_deps,idep_nir,],c_args=pvr_flags,link_args=[ld_args_build_id,ld_args_bsymbolic,ld_args_gc_sections],gnu_symbol_visibility='hidden',install=True,)
+    
+    if with_symbols_check:
+      test('pvr symbols check',symbols_check,args=['--lib',libvulkan_powervr_mesa,'--symbols-file',vulkan_icd_symbols,symbols_check_args,],suite=['imagination'],)
+    
+    
+    powervr_mesa_icd=custom_target('powervr_mesa_icd',input=[vk_icd_gen,vk_api_xml],output='powervr_mesa_icd.{}.json'.format(host_machine.cpu()),command=[prog_python,'@INPUT0@','--api-version','1.0','--xml','@INPUT1@','--lib-path',((get_option('prefix') + get_option('libdir')) if isinstance(get_option('prefix'), str) else (get_option('prefix') / get_option('libdir')) + 'libvulkan_powervr_mesa.so') if isinstance((get_option('prefix') + get_option('libdir')) if isinstance(get_option('prefix'), str) else (get_option('prefix') / get_option('libdir')), str) else ((get_option('prefix') + get_option('libdir')) if isinstance(get_option('prefix'), str) else (get_option('prefix') / get_option('libdir')) / 'libvulkan_powervr_mesa.so'),'--out','@OUTPUT@',],build_by_default=True,install_dir=with_vulkan_icd_dir,install_tag='runtime',install=True,)
+    
+    _dev_icd=custom_target('powervr_mesa_devenv_icd',input=[vk_icd_gen,vk_api_xml],output='powervr_mesa_devenv_icd.{}.json'.format(host_machine.cpu()),command=[prog_python,'@INPUT0@','--api-version','1.0','--xml','@INPUT1@','--lib-path',(meson.current_build_dir() + 'libvulkan_powervr_mesa.so') if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / 'libvulkan_powervr_mesa.so'),'--out','@OUTPUT@',],build_by_default=True,)
+    
+    devenv.append('VK_DRIVER_FILES',_dev_icd.full_path())
+    # Deprecated: replaced by VK_DRIVER_FILES above
+    devenv.append('VK_ICD_FILENAMES',_dev_icd.full_path())
+    
+    ########################################################################################################################
+    ### End conversion from: src/imagination/vulkan/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/imagination')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/imagination/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_gallium_panfrost or with_gallium_lima or with_panfrost_vk or with_tools.count('panfrost') > 0:
+  set_relative_dir('src/panfrost')
+  ########################################################################################################################
+  ### Begin conversion from: src/panfrost/meson.build
+  ########################################################################################################################
+  inc_panfrost_hw=include_directories(['include'])
+  
+  inc_panfrost=include_directories(['.','include','shared','midgard','compiler','lib'])
+  
+  compile_args_panfrost=['-Wno-pointer-arith']
+  
+  set_relative_dir('src/panfrost/shared')
+  ########################################################################################################################
+  ### Begin conversion from: src/panfrost/shared/meson.build
+  ########################################################################################################################
+  libpanfrost_shared_files=files('pan_minmax_cache.c','pan_tiling.c','pan_minmax_cache.h','pan_tiling.h',)
+  
+  libpanfrost_shared=static_library('panfrost_shared',[libpanfrost_shared_files],include_directories=[inc_include,inc_src],dependencies=idep_mesautil,c_args=[no_override_init_args,'-O3'],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  if with_tests:
+    test('panfrost_tiling',executable('panfrost_tiling',files('test/test-tiling.cpp',),c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_panfrost],dependencies=[idep_gtest],link_with=[libpanfrost_shared],),suite=['panfrost'],protocol='gtest',)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/panfrost/shared/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/panfrost')
+  set_relative_dir('src/panfrost/util')
+  ########################################################################################################################
+  ### Begin conversion from: src/panfrost/util/meson.build
+  ########################################################################################################################
+  libpanfrost_util_files=files('lcra.c','lcra.h','pan_collect_varyings.c','pan_ir.c','pan_ir.h','pan_liveness.c','pan_lower_framebuffer.c','pan_lower_helper_invocation.c','pan_lower_image_ms.c','pan_lower_image_index.c','pan_lower_sample_position.c','pan_lower_store_component.c','pan_lower_writeout.c','pan_lower_xfb.c',)
+  
+  libpanfrost_util=static_library('panfrost_util',[libpanfrost_util_files],include_directories=[inc_include,inc_src,inc_panfrost_hw],dependencies=[idep_nir],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/panfrost/util/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/panfrost')
+  set_relative_dir('src/panfrost/midgard')
+  ########################################################################################################################
+  ### Begin conversion from: src/panfrost/midgard/meson.build
+  ########################################################################################################################
+  libpanfrost_midgard_files=files('midgard_compile.c','mir.c','midgard_address.c','midgard_print.c','midgard_schedule.c','midgard_derivatives.c','midgard_emit.c','midgard_helper_invocations.c','midgard_ra.c','midgard_ra_pipeline.c','midgard_liveness.c','midgard_ops.c','mir_promote_uniforms.c','mir_squeeze.c','midgard_nir_lower_image_bitsize.c','midgard_nir_type_csel.c','midgard_opt_copy_prop.c','midgard_opt_dce.c','midgard_opt_perspective.c','midgard_opt_prop.c','midgard_errata_lod.c','nir_fuse_io_16.c',)
+  
+  midgard_nir_algebraic_c=custom_target('midgard_nir_algebraic.c',input='midgard_nir_algebraic.py',output='midgard_nir_algebraic.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],capture=True,depend_files=nir_algebraic_depends,)
+  
+  libpanfrost_midgard_disasm=static_library('panfrost_midgard_disasm',['disassemble.c','midgard_ops.c','midgard_print_constant.c'],include_directories=[inc_include,inc_src,inc_panfrost_hw,],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  libpanfrost_midgard=static_library('panfrost_midgard',[libpanfrost_midgard_files,midgard_nir_algebraic_c],include_directories=[inc_include,inc_src,inc_panfrost_hw,],dependencies=[idep_nir],link_with=[libpanfrost_util,libpanfrost_midgard_disasm],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/panfrost/midgard/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/panfrost')
+  set_relative_dir('src/panfrost/compiler')
+  ########################################################################################################################
+  ### Begin conversion from: src/panfrost/compiler/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/panfrost/compiler/valhall')
+  ########################################################################################################################
+  ### Begin conversion from: src/panfrost/compiler/valhall/meson.build
+  ########################################################################################################################
+  valhall_c=custom_target('valhall_c',input=['valhall.c.py','ISA.xml'],output='valhall.c',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('valhall.py'),)
+  
+  valhall_enums_h=custom_target('valhall_enums.h',input=['valhall_enums.h.py','ISA.xml'],output='valhall_enums.h',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('valhall.py'),)
+  
+  idep_valhall_enums_h=declare_dependency(sources=[valhall_enums_h],include_directories=include_directories('.'),)
+  
+  valhall_disasm_c=custom_target('valhall_disasm_c',input=['disasm.py','ISA.xml'],output='valhall_disasm.c',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('valhall.py'),)
+  
+  libpanfrost_valhall_disasm=static_library('panfrost_valhall_disasm',valhall_disasm_c,include_directories=[inc_include,inc_src],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  if with_tests:
+    test('valhall_disasm',executable('valhall_disasm_test',files('test/test-disassembler.c'),c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[idep_valhall_enums_h],link_with=[libpanfrost_valhall_disasm],),suite=['panfrost'],args=files('test/assembler-cases.txt'),)
+  
+    test('valhall_asm',prog_python,args=files('test-assembly.py','test/assembler-cases.txt','test/negative-cases.txt'),suite=['panfrost'],)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/panfrost/compiler/valhall/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/panfrost/compiler')
+  
+  inc_valhall=include_directories(['.','valhall'])
+  
+  libpanfrost_bifrost_files=files('bi_helper_invocations.c','bi_layout.c','bi_liveness.c','bi_lower_divergent_indirects.c','bi_lower_swizzle.c','bi_print.c','bi_opt_constant_fold.c','bi_opt_copy_prop.c','bi_opt_dce.c','bi_opt_cse.c','bi_opt_push_ubo.c','bi_opt_mod_props.c','bi_opt_dual_tex.c','bi_pressure_schedule.c','bi_ra.c','bi_validate.c','bir.c','bifrost_compile.c','bifrost/bi_opt_message_preload.c','bifrost/bi_pack.c','bifrost/bi_schedule.c','bifrost/bi_scoreboard.c','valhall/va_insert_flow.c','valhall/va_lower_constants.c','valhall/va_lower_isel.c','valhall/va_lower_split_64bit.c','valhall/va_optimize.c','valhall/va_mark_last.c','valhall/va_merge_flow.c','valhall/va_pack.c','valhall/va_perf.c','valhall/va_validate.c',)
+  
+  bifrost_gen_disasm_c=custom_target('bifrost_gen_disasm.c',input=['gen_disasm.py','ISA.xml'],output='bifrost_gen_disasm.c',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('bifrost_isa.py'),)
+  
+  bi_opcodes_c=custom_target('bi_opcodes.c',input=['bi_opcodes.c.py','ISA.xml'],output='bi_opcodes.c',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('bifrost_isa.py'),)
+  
+  bi_printer_c=custom_target('bi_printer.c',input=['bi_printer.c.py','ISA.xml'],output='bi_printer.c',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('bifrost_isa.py'),)
+  
+  bi_packer_c=custom_target('bi_packer.c',input=['bi_packer.c.py','ISA.xml'],output='bi_packer.c',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('bifrost_isa.py'),)
+  
+  bi_opcodes_h=custom_target('bi_opcodes.h',input=['bi_opcodes.h.py','ISA.xml'],output='bi_opcodes.h',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('bifrost_isa.py'),)
+  
+  idep_bi_opcodes_h=declare_dependency(sources=[bi_opcodes_h],include_directories=include_directories('.'),)
+  
+  bi_builder_h=custom_target('bi_builder.h',input=['bi_builder.h.py','ISA.xml'],output='bi_builder.h',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('bifrost_isa.py'),)
+  
+  idep_bi_builder_h=declare_dependency(sources=[bi_builder_h],include_directories=include_directories('.'),)
+  
+  bifrost_nir_algebraic_c=custom_target('bifrost_nir_algebraic.c',input='bifrost_nir_algebraic.py',output='bifrost_nir_algebraic.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],capture=True,depend_files=nir_algebraic_depends,)
+  
+  libpanfrost_bifrost_disasm=static_library('panfrost_bifrost_disasm',['bifrost/disassemble.c','bi_print_common.c',bifrost_gen_disasm_c],include_directories=[inc_include,inc_src,inc_panfrost_hw],dependencies=[idep_nir],link_with=[libpanfrost_util],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  libpanfrost_bifrost=static_library('panfrost_bifrost',[libpanfrost_bifrost_files,bi_opcodes_c,bi_printer_c,bi_packer_c,bifrost_nir_algebraic_c,valhall_c],include_directories=[inc_include,inc_src,inc_panfrost_hw,inc_valhall],dependencies=[idep_nir,idep_bi_opcodes_h,idep_bi_builder_h,idep_valhall_enums_h],link_with=[libpanfrost_util,libpanfrost_bifrost_disasm,libpanfrost_valhall_disasm],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+  
+  if with_tests:
+    test('bifrost_tests',executable('bifrost_tests',files('test/test-constant-fold.cpp','test/test-dual-texture.cpp','test/test-lower-swizzle.cpp','test/test-message-preload.cpp','test/test-optimizer.cpp','test/test-pack-formats.cpp','test/test-packing.cpp','test/test-scheduler-predicates.cpp','valhall/test/test-add-imm.cpp','valhall/test/test-validate-fau.cpp','valhall/test/test-insert-flow.cpp','valhall/test/test-lower-isel.cpp','valhall/test/test-lower-constants.cpp','valhall/test/test-mark-last.cpp','valhall/test/test-merge-flow.cpp','valhall/test/test-packing.cpp',),c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_valhall],dependencies=[idep_gtest,idep_nir,idep_bi_opcodes_h,idep_bi_builder_h,idep_valhall_enums_h],link_with=[libpanfrost_bifrost],),suite=['panfrost'],protocol='gtest',)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/panfrost/compiler/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/panfrost')
+  
+  if with_gallium_panfrost or with_panfrost_vk:
+    set_relative_dir('src/panfrost/lib')
+    ########################################################################################################################
+    ### Begin conversion from: src/panfrost/lib/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/panfrost/lib/genxml')
+    ########################################################################################################################
+    ### Begin conversion from: src/panfrost/lib/genxml/meson.build
+    ########################################################################################################################
+    pan_packers=[]
+    for packer in ['common','v4','v5','v6','v7','v9','v10']:
+      pan_packers+=custom_target(packer+'_pack.h',input=['gen_pack.py',packer+'.xml'],output=packer+'_pack.h',command=[prog_python,'@INPUT@'],capture=True,)
+    
+    
+    idep_pan_packers=declare_dependency(sources=[pan_packers],include_directories=include_directories('.'),)
+    
+    libpanfrost_decode_per_arch=[]
+    
+    for ver in ['4','5','6','7','9','10']:
+      libpanfrost_decode_per_arch+=static_library('pandecode-arch-v'+ver,['decode.c','decode_jm.c','decode_csf.c',pan_packers],include_directories=[inc_include,inc_src,inc_panfrost],dependencies=[dep_libdrm,idep_pan_packers,idep_nir],c_args=[no_override_init_args,'-DPAN_ARCH='+ver],gnu_symbol_visibility='hidden',build_by_default=False,)
+    
+    
+    libpanfrost_decode=static_library('panfrost_decode',['decode_common.c',pan_packers],include_directories=[inc_include,inc_src,inc_panfrost],dependencies=idep_mesautil,c_args=[no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=False,link_with=[libpanfrost_decode_per_arch],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/panfrost/lib/genxml/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/panfrost/lib')
+    set_relative_dir('src/panfrost/lib/kmod')
+    ########################################################################################################################
+    ### Begin conversion from: src/panfrost/lib/kmod/meson.build
+    ########################################################################################################################
+    libpankmod_lib_files=files('pan_kmod.c','panfrost_kmod.c','panthor_kmod.c',)
+    
+    libpankmod_lib=static_library('pankmod_lib',[libpankmod_lib_files],include_directories=[inc_include,inc_src,inc_panfrost],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,idep_mesautil,idep_pan_packers],build_by_default=False,)
+    
+    libpankmod_dep=declare_dependency(include_directories=[inc_include,inc_src],dependencies=[dep_libdrm],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/panfrost/lib/kmod/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/panfrost/lib')
+    
+    pixel_format_versions=['5','6','7','9']
+    libpanfrost_pixel_format=[]
+    
+    for ver in pixel_format_versions:
+      libpanfrost_pixel_format+=static_library('pan-format-v'+ver,['pan_format.c',pan_packers],include_directories=[inc_src,inc_include,inc_panfrost_hw,inc_panfrost_hw],c_args=['-DPAN_ARCH='+ver],gnu_symbol_visibility='hidden',dependencies=[idep_pan_packers,dep_libdrm,dep_valgrind],)
+    
+    
+    libpanfrost_per_arch=[]
+    
+    for ver in ['4','5','6','7','9','10']:
+      libpanfrost_per_arch+=static_library('pan-arch-v'+ver,['pan_blend.c','pan_blitter.c','pan_desc.c','pan_shader.c','pan_texture.c',],include_directories=[inc_include,inc_src,inc_panfrost_hw],c_args=['-DPAN_ARCH='+ver],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,idep_pan_packers,idep_nir],)
+    
+    
+    for ver in ['7']:
+      libpanfrost_per_arch+=static_library('pan-arch-indirect-v'+ver,'pan_indirect_dispatch.c',include_directories=[inc_include,inc_src,inc_panfrost_hw],c_args=['-DPAN_ARCH='+ver],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,idep_pan_packers,idep_nir],)
+    
+    
+    libpanfrost_lib_files=files('pan_encoder.h','pan_afbc.c','pan_attributes.c','pan_blend.c','pan_clear.c','pan_earlyzs.c','pan_samples.c','pan_tiler.c','pan_layout.c','pan_scratch.c','pan_props.c','pan_util.c',)
+    
+    libpanfrost_lib=static_library('panfrost_lib',[libpanfrost_lib_files,pan_packers],include_directories=[inc_include,inc_src,inc_panfrost_hw],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,idep_nir,idep_mesautil],build_by_default=False,link_with=[libpanfrost_pixel_format,libpanfrost_per_arch,libpankmod_lib],)
+    
+    libpanfrost_dep=declare_dependency(link_with=[libpanfrost_lib,libpanfrost_decode,libpanfrost_midgard,libpanfrost_bifrost,libpanfrost_pixel_format,libpanfrost_per_arch],include_directories=[inc_include,inc_src,inc_panfrost_hw,inc_panfrost],dependencies=[dep_libdrm,libpankmod_dep,idep_nir,idep_pan_packers],)
+    
+    if with_tests:
+      test('panfrost_blend',executable('panfrost_blend_test',files('tests/test-blend.c'),c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[libpanfrost_dep],),suite=['panfrost'],)
+    
+      test('panfrost_clear',executable('panfrost_clear_test',files('tests/test-clear.c'),c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[libpanfrost_dep],),suite=['panfrost'],)
+    
+      test('panfrost_tests',executable('panfrost_tests',files('tests/test-earlyzs.cpp','tests/test-layout.cpp',),c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_panfrost],dependencies=[idep_gtest,libpanfrost_dep],),suite=['panfrost'],protocol='gtest',)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/panfrost/lib/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/panfrost')
+    set_relative_dir('src/panfrost/perf')
+    ########################################################################################################################
+    ### Begin conversion from: src/panfrost/perf/meson.build
+    ########################################################################################################################
+    pan_hw_metrics=['G31','G51','G52','G57','G68','G71','G72','G76','G77','G78','T72x','T76x','T82x','T83x','T86x','T88x',]
+    
+    pan_hw_metrics_xml_files=[]
+    for hw in pan_hw_metrics:
+      pan_hw_metrics_xml_files += ['{}.xml'.format(hw)] if isinstance(pan_hw_metrics_xml_files, list) else '{}.xml'.format(hw)
+    
+    
+    pan_perf_sources=['pan_perf.c',]
+    
+    pan_perf_sources+=custom_target('pan-perf-sources',input=pan_hw_metrics_xml_files,output=['pan_perf_metrics.c','pan_perf_metrics.h'],command=[prog_python,files('pan_gen_perf.py'),'--code','@OUTPUT0@','--header','@OUTPUT1@','@INPUT@',],)
+    
+    libpanfrost_perf=static_library('panfrost_perf',pan_perf_sources,include_directories=[inc_include,inc_src,inc_panfrost],dependencies=libpanfrost_dep)
+    
+    dep_panfrost_perf=declare_dependency(link_with=libpanfrost_perf,include_directories=[inc_panfrost,inc_src,inc_include])
+    
+    panfrost_quick=executable('panquick','quick.c',include_directories=[inc_include,inc_src,inc_panfrost,inc_panfrost_hw,],dependencies=[dep_libdrm,libpanfrost_dep,dep_panfrost_perf,],build_by_default=with_tools.count('panfrost') > 0)
+    
+    ########################################################################################################################
+    ### End conversion from: src/panfrost/perf/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/panfrost')
+  
+  
+  files_bifrost=files('compiler/cmdline.c',)
+  
+  bifrost_compiler=executable('bifrost_compiler',[files_bifrost],include_directories=[inc_include,inc_src,inc_panfrost,inc_panfrost_hw,],dependencies=[idep_nir,idep_mesautil,idep_bi_opcodes_h,dep_libdrm,],link_with=[libpanfrost_bifrost,],build_by_default=with_tools.count('panfrost') > 0)
+  
+  if with_panfrost_vk:
+    set_relative_dir('src/panfrost/vulkan')
+    ########################################################################################################################
+    ### Begin conversion from: src/panfrost/vulkan/meson.build
+    ########################################################################################################################
+    panvk_entrypoints=custom_target('panvk_entrypoints.[ch]',input=[vk_entrypoints_gen,vk_api_xml],output=['panvk_entrypoints.h','panvk_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','panvk','--device-prefix','panvk_v6','--device-prefix','panvk_v7','--device-prefix','panvk_v9','--device-prefix','panvk_v10','--beta',str(with_vulkan_beta)],depend_files=vk_entrypoints_gen_depend_files,)
+    
+    libpanvk_files=files('panvk_buffer.c','panvk_cmd_pool.c','panvk_device_memory.c','panvk_event.c','panvk_image.c','panvk_instance.c','panvk_mempool.c','panvk_physical_device.c','panvk_priv_bo.c','panvk_query.c','panvk_wsi.c',)
+    libpanvk_files+=[sha1_h]
+    
+    panvk_deps=[]
+    panvk_flags=[]
+    panvk_per_arch_libs=[]
+    
+    bifrost_archs=[6,7]
+    bifrost_inc_dir=['bifrost']
+    bifrost_files=['bifrost/panvk_vX_cmd_desc_state.c','bifrost/panvk_vX_meta_desc_copy.c','bifrost/panvk_vX_nir_lower_descriptors.c',]
+    
+    valhall_archs=[9,10]
+    valhall_inc_dir=['valhall']
+    valhall_files=[]
+    
+    jm_archs=[6,7]
+    jm_inc_dir=['jm']
+    jm_files=['jm/panvk_vX_cmd_buffer.c','jm/panvk_vX_cmd_dispatch.c','jm/panvk_vX_cmd_draw.c','jm/panvk_vX_cmd_event.c','jm/panvk_vX_meta.c','jm/panvk_vX_meta_blit.c','jm/panvk_vX_meta_clear.c','jm/panvk_vX_meta_copy.c','jm/panvk_vX_queue.c',]
+    
+    common_per_arch_files=[panvk_entrypoints[0],'panvk_vX_blend.c','panvk_vX_buffer_view.c','panvk_vX_descriptor_set.c','panvk_vX_descriptor_set_layout.c','panvk_vX_device.c','panvk_vX_image_view.c','panvk_vX_sampler.c','panvk_vX_shader.c',]
+    
+    for arch in [6,7,9,10]:
+      if arch in valhall_archs:
+        per_arch_files=[panvk_entrypoints[0],'panvk_vX_descriptor_set.c','panvk_vX_descriptor_set_layout.c',]
+      else:
+        per_arch_files=common_per_arch_files
+    
+    
+      inc_panvk_per_arch=[]
+    
+      if arch in bifrost_archs:
+        inc_panvk_per_arch+=bifrost_inc_dir
+        per_arch_files+=bifrost_files
+      elif arch in valhall_archs:
+        inc_panvk_per_arch+=valhall_inc_dir
+        per_arch_files+=valhall_files
+    
+    
+      if arch in jm_archs:
+        inc_panvk_per_arch+=jm_inc_dir
+        per_arch_files+=jm_files
+    
+    
+      panvk_per_arch_libs+=static_library('panvk_v{}'.format(arch),per_arch_files,include_directories=[inc_include,inc_src,inc_panfrost,inc_panvk_per_arch,],dependencies=[idep_nir_headers,idep_pan_packers,idep_vulkan_util_headers,idep_vulkan_runtime_headers,idep_vulkan_wsi_headers,dep_libdrm,dep_valgrind,],c_args=[no_override_init_args,panvk_flags,'-DPAN_ARCH={}'.format(arch)],)
+    
+    
+    if with_platform_wayland:
+      panvk_deps+=dep_wayland_client
+      libpanvk_files+=[wayland_drm_client_protocol_h,wayland_drm_protocol_c]
+    
+    
+    if with_platform_android:
+      panvk_deps+=[dep_android]
+      panvk_flags += ['-DVK_USE_PLATFORM_ANDROID_KHR'] if isinstance(panvk_flags, list) else '-DVK_USE_PLATFORM_ANDROID_KHR'
+      libpanvk_files+=files('panvk_android.c')
+    
+    
+    libvulkan_panfrost=shared_library('vulkan_panfrost',[libpanvk_files,panvk_entrypoints],include_directories=[inc_include,inc_src,inc_panfrost,],link_whole=[panvk_per_arch_libs],link_with=[libpanfrost_shared,libpanfrost_midgard,libpanfrost_bifrost,libpanfrost_decode,libpanfrost_lib,libpanfrost_util,],dependencies=[dep_dl,dep_elf,dep_libdrm,dep_m,dep_thread,dep_valgrind,idep_nir,idep_pan_packers,panvk_deps,idep_vulkan_util,idep_vulkan_runtime,idep_vulkan_wsi,idep_mesautil,],c_args=[no_override_init_args,panvk_flags],link_args=[ld_args_bsymbolic,ld_args_gc_sections],install=True,)
+    
+    panfrost_icd=custom_target('panfrost_icd',input=[vk_icd_gen,vk_api_xml],output='panfrost_icd.{}.json'.format(host_machine.cpu()),command=[prog_python,'@INPUT0@','--api-version','1.0','--xml','@INPUT1@','--lib-path',join_paths(get_option('prefix'),get_option('libdir'),'libvulkan_panfrost.so'),'--out','@OUTPUT@',],build_by_default=True,install_dir=with_vulkan_icd_dir,install_tag='runtime',install=True,)
+    
+    _dev_icdname='panfrost_devenv_icd.{}.json'.format(host_machine.cpu())
+    _dev_icd=custom_target('panfrost_devenv_icd',input=[vk_icd_gen,vk_api_xml],output=_dev_icdname,command=[prog_python,'@INPUT0@','--api-version','1.0','--xml','@INPUT1@','--lib-path',(meson.current_build_dir() + 'libvulkan_panfrost.so') if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / 'libvulkan_panfrost.so'),'--out','@OUTPUT@',],build_by_default=True,)
+    
+    devenv.append('VK_DRIVER_FILES',_dev_icd.full_path())
+    # Deprecated: replaced by VK_DRIVER_FILES above
+    devenv.append('VK_ICD_FILENAMES',_dev_icd.full_path())
+    
+    ########################################################################################################################
+    ### End conversion from: src/panfrost/vulkan/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/panfrost')
+  
+  
+  if with_perfetto and (with_datasources.count('panfrost') > 0 or with_datasources.count('auto') > 0):
+    set_relative_dir('src/panfrost/ds')
+    ########################################################################################################################
+    ### Begin conversion from: src/panfrost/ds/meson.build
+    ########################################################################################################################
+    pps_panfrost_sources=['pan_pps_perf.cpp','pan_pps_driver.cpp']
+    
+    pps_panfrost_includes=[inc_include,inc_src,inc_tool]
+    
+    pps_panfrost_lib=static_library('pps-panfrost',sources=pps_panfrost_sources,include_directories=pps_panfrost_includes,dependencies=[dep_libdrm,dep_perfetto,libpanfrost_dep,dep_panfrost_perf],)
+    
+    compile_args_pps_panfrost=['-DPPS_PANFROST']
+    
+    pps_panfrost_dep=declare_dependency(link_with=pps_panfrost_lib,include_directories=pps_panfrost_includes,compile_args=compile_args_pps_panfrost)
+    
+    pps_datasources+=pps_panfrost_dep
+    if not with_datasources.count('panfrost') > 0:
+      with_datasources += ['panfrost'] if isinstance(with_datasources, list) else 'panfrost'
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/panfrost/ds/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/panfrost')
+  
+  
+  if with_tools.count('drm-shim') > 0:
+    subdir('drm-shim')
+  
+  
+  if with_tools.count('panfrost') > 0:
+    set_relative_dir('src/panfrost/tools')
+    ########################################################################################################################
+    ### Begin conversion from: src/panfrost/tools/meson.build
+    ########################################################################################################################
+    coredumpdec=executable('panfrostdump',files('panfrostdump.c'),c_args=[c_msvc_compat_args,no_override_init_args,compile_args_panfrost],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[libpanfrost_dep],build_by_default=True,install=True)
+    
+    panfrost_texfeatures=executable('panfrost_texfeatures',files('panfrost_texfeatures.c'),c_args=[c_msvc_compat_args,no_override_init_args,compile_args_panfrost],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[libpanfrost_dep],build_by_default=True,install=True)
+    
+    ########################################################################################################################
+    ### End conversion from: src/panfrost/tools/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/panfrost')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/panfrost/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+#if with_gallium_virgl or with_virtio_vk
+#  subdir('virtio')
+#endif
+if with_microsoft_clc or with_gallium_d3d12 or with_spirv_to_dxil or with_microsoft_vk:
+  set_relative_dir('src/microsoft')
+  ########################################################################################################################
+  ### Begin conversion from: src/microsoft/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/microsoft/compiler')
+  ########################################################################################################################
+  ### Begin conversion from: src/microsoft/compiler/meson.build
+  ########################################################################################################################
+  files_libdxil_compiler=files('dxil_buffer.c','dxil_container.c','dxil_dump.c','dxil_enums.c','dxil_function.c','dxil_module.c','dxil_nir.c','dxil_nir_lower_int_cubemaps.c','dxil_nir_lower_int_samplers.c','dxil_nir_lower_vs_vertex_conversion.c','dxil_signature.c','dxil_nir_tess.c','nir_to_dxil.c',)
+  
+  if host_machine.system()=='windows':
+    files_libdxil_compiler+=files('dxil_validator.cpp')
+  
+  
+  dxil_nir_algebraic_c=custom_target('dxil_nir_algebraic.c',input='dxil_nir_algebraic.py',output='dxil_nir_algebraic.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],capture=True,depend_files=nir_algebraic_depends,)
+  
+  libdxil_compiler=static_library('dxil_compiler',[files_libdxil_compiler,dxil_nir_algebraic_c,sha1_h],include_directories=[inc_include,inc_src],dependencies=[idep_nir_headers,dep_valgrind],gnu_symbol_visibility='hidden',)
+  
+  idep_libdxil_compiler=declare_dependency(link_with=libdxil_compiler,dependencies=[idep_mesautil,dep_version],include_directories=include_directories('.'))
+  
+  if with_tests:
+    test('dxil_buffer',executable('dxil_buffer_test',files('dxil_buffer_test.c'),include_directories=[inc_src],dependencies=[idep_libdxil_compiler]),suite='d3d12')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/microsoft/compiler/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/microsoft')
+  if with_microsoft_clc:
+    set_relative_dir('src/microsoft/clc')
+    ########################################################################################################################
+    ### Begin conversion from: src/microsoft/clc/meson.build
+    ########################################################################################################################
+    files_libclc_compiler=files('clc_compiler.c','clc_nir.c',)
+    
+    libclc_compiler=shared_library('clon12compiler',[files_libclc_compiler,sha1_h],vs_module_defs='clon12compiler.def',include_directories=[inc_include,inc_src,inc_spirv],dependencies=[idep_mesaclc,idep_nir_headers,dep_version,idep_mesautil,idep_libdxil_compiler,idep_nir,idep_vtn],install=True,name_prefix='')
+    
+    if dep_dxheaders.found() and host_machine.system()=='windows' and with_tests:
+      clc_compiler_test=executable('clc_compiler_test',['clc_compiler_test.cpp','compute_test.cpp'],link_with=[libclc_compiler],dependencies=[idep_gtest,idep_mesautil,idep_libdxil_compiler,dep_dxheaders,dep_spirv_tools,idep_compiler],include_directories=[inc_include,inc_src,inc_spirv],)
+    
+      if build_machine.system()=='windows':
+        test('clc_compiler_test',clc_compiler_test,timeout=180,protocol='gtest')
+    
+    
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/microsoft/clc/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/microsoft')
+  
+  if with_spirv_to_dxil or with_microsoft_vk:
+    set_relative_dir('src/microsoft/spirv_to_dxil')
+    ########################################################################################################################
+    ### Begin conversion from: src/microsoft/spirv_to_dxil/meson.build
+    ########################################################################################################################
+    libspirv_to_dxil=both_libraries('spirv_to_dxil',[files('dxil_spirv_nir.c','dxil_spirv_nir.h','dxil_spirv_nir_lower_bindless.c','spirv_to_dxil.c','spirv_to_dxil.h',),sha1_h,],vs_module_defs='spirv_to_dxil.def',dependencies=[idep_nir,idep_vtn,idep_libdxil_compiler],include_directories=[inc_include,inc_src],install=True,)
+    
+    idep_libspirv_to_dxil=declare_dependency(link_with=libspirv_to_dxil.get_static_lib(),include_directories=include_directories('.'))
+    
+    spirv_to_dxil=executable('spirv2dxil',files('spirv2dxil.c',),dependencies=[idep_nir,idep_libdxil_compiler,idep_getopt,idep_libspirv_to_dxil],include_directories=[inc_include,inc_src],build_by_default=True,install=True,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/microsoft/spirv_to_dxil/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/microsoft')
+  
+  if with_microsoft_vk:
+    set_relative_dir('src/microsoft/vulkan')
+    ########################################################################################################################
+    ### Begin conversion from: src/microsoft/vulkan/meson.build
+    ########################################################################################################################
+    dzn_entrypoints=custom_target('dzn_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['dzn_entrypoints.h','dzn_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','dzn','--beta',str(with_vulkan_beta)],depend_files=vk_entrypoints_gen_depend_files,)
+    
+    libdzn_files=files('dzn_cmd_buffer.c','dzn_descriptor_set.c','dzn_device.c','dzn_dxcore.cpp','dzn_image.c','dzn_meta.c','dzn_nir.c','dzn_pipeline.c','dzn_query.c','dzn_sync.c','dzn_util.c','dzn_wsi.c',)
+    
+    dzn_deps=[idep_libdxil_compiler,idep_libspirv_to_dxil,idep_nir,idep_nir_headers,idep_vulkan_util,idep_vulkan_runtime,idep_vulkan_wsi,dep_dxheaders,]
+    
+    dzn_flags=[]
+    dzn_cpp_flags=[]
+    
+    if with_platform_windows:
+      dzn_flags += ['-DVK_USE_PLATFORM_WIN32_KHR'] if isinstance(dzn_flags, list) else '-DVK_USE_PLATFORM_WIN32_KHR'
+      libdzn_files+=files('dzn_dxgi.c')
+    
+    
+    if cc.get_argument_syntax()!='msvc':
+      dzn_flags_to_try=['-Werror=unused-variable','-Werror=unused-but-set-variable','-Werror=unused-value','-Werror=format','-Werror=switch',]
+      dzn_flags+=cc.get_supported_arguments(dzn_flags_to_try)
+      dzn_cpp_flags=cpp.get_supported_arguments(['-Wno-error=unused-value'])
+    
+    
+    libvulkan_dzn=shared_library('vulkan_dzn',[libdzn_files,dzn_entrypoints,sha1_h],vs_module_defs=vulkan_api_def,include_directories=[inc_include,inc_src,inc_util],dependencies=[dzn_deps,idep_vulkan_wsi,idep_xmlconfig],c_args=dzn_flags,cpp_args=dzn_cpp_flags,gnu_symbol_visibility='hidden',link_args=[ld_args_bsymbolic,ld_args_gc_sections],name_prefix='' if host_machine.system()=='windows' else [],install=True,)
+    
+    icd_file_name='libvulkan_dzn.so'
+    icd_lib_path=join_paths(get_option('prefix'),get_option('libdir'))
+    if with_platform_windows:
+      icd_lib_path=module_import('fs').relative_to(get_option('bindir'),with_vulkan_icd_dir)
+      icd_file_name='vulkan_dzn.dll'
+    
+    
+    
+    icd_command=[prog_python,'@INPUT0@','--api-version','1.1','--xml','@INPUT1@','--lib-path',join_paths(icd_lib_path,icd_file_name),'--out','@OUTPUT@',]
+    
+    icd_dev_command=[prog_python,'@INPUT0@','--api-version','1.1','--xml','@INPUT1@','--lib-path',join_paths(meson.current_build_dir(),icd_file_name),'--out','@OUTPUT@',]
+    
+    if with_platform_windows:
+      icd_command += ['--use-backslash'] if isinstance(icd_command, list) else '--use-backslash'
+      icd_dev_command += ['--use-backslash'] if isinstance(icd_dev_command, list) else '--use-backslash'
+    
+    
+    dzn_icd=custom_target('dzn_icd',input=[vk_icd_gen,vk_api_xml],output='dzn_icd.{}.json'.format(host_machine.cpu()),command=icd_command,build_by_default=True,install_dir=with_vulkan_icd_dir,install_tag='runtime',install=True,)
+    
+    _dev_icdname='dzn_devenv_icd.{}.json'.format(host_machine.cpu())
+    _dev_icd=custom_target('dzn_devenv_icd',input=[vk_icd_gen,vk_api_xml],output=_dev_icdname,command=icd_dev_command,build_by_default=True,)
+    
+    devenv.append('VK_DRIVER_FILES',_dev_icd.full_path())
+    # Deprecated: replaced by VK_DRIVER_FILES above
+    devenv.append('VK_ICD_FILENAMES',_dev_icd.full_path())
+    
+    ########################################################################################################################
+    ### End conversion from: src/microsoft/vulkan/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/microsoft')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/microsoft/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_any_nouveau:
+  set_relative_dir('src/nouveau')
+  ########################################################################################################################
+  ### Begin conversion from: src/nouveau/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/nouveau/drm')
+  ########################################################################################################################
+  ### Begin conversion from: src/nouveau/drm/meson.build
+  ########################################################################################################################
+  inc_nouveau_drm=include_directories('.')
+  
+  ########################################################################################################################
+  ### End conversion from: src/nouveau/drm/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/nouveau')
+  set_relative_dir('src/nouveau/headers')
+  ########################################################################################################################
+  ### Begin conversion from: src/nouveau/headers/meson.build
+  ########################################################################################################################
+  nv_classes=['cl902d','cl9039','cl906f','cl9097','cl90b5','cl90c0','cla040','cla0b5','cla097','cla140','cla297','clb097','clb0c0','clb197','clb1c0','clc097','clc1b5','cla0c0','clc0c0','clc397','clc3c0','clc597','clc5c0','clc697','clc6c0','clc797','clc7c0',]
+  
+  hwref_gens=['maxwell/gm107','pascal/gp100','hopper/gh100','turing/tu102',]
+  
+  cl_generated=[]
+  for cl in nv_classes:
+    cl_generated+=custom_target(cl+'.h',input=['class_parser.py','nvidia/classes/'+cl+'.h'],output=['nv_push_'+cl+'.h','nv_push_'+cl+'.c'],command=[prog_python,'@INPUT0@','--in-h','@INPUT1@','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@'],)
+  
+  
+  _libnvidia_headers=static_library('nvidia_headers_c',['nv_push.c',cl_generated],include_directories=['.','nvidia/classes',inc_include,inc_src],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',)
+  
+  idep_nvidia_headers=declare_dependency(include_directories=include_directories('.','nvidia/classes'),sources=cl_generated,link_with=_libnvidia_headers,)
+  
+  executable('nv_push_dump','nv_push_dump.c',dependencies=[idep_mesautil,idep_nvidia_headers],build_by_default=with_tools.count('nouveau') > 0,install=with_tools.count('nouveau') > 0,)# Only generate Rust bindings for NVK
+  if with_nouveau_vk:
+    add_languages('rust',required=True)
+    rust=module_import('rust')
+  
+    cl_rs_generated=[]
+    for cl in nv_classes:
+      cl_rs_generated+=custom_target('nvh_classes_'+cl+'.rs',input=['class_parser.py','nvidia/classes/'+cl+'.h'],output=['nvh_classes_'+cl+'.rs'],command=[prog_python,'@INPUT0@','--in-h','@INPUT1@','--out-rs','@OUTPUT0@'],)
+  
+      fs=module_import('fs')
+      if cl.endswith('c0') and fs.is_file('nvidia/classes/'+cl+'qmd.h'):
+        cl_rs_generated+=custom_target('nvh_classes_'+cl+'_qmd.rs',input=['struct_parser.py','nvidia/classes/'+cl+'qmd.h'],output=['nvh_classes_'+cl+'_qmd.rs'],command=[prog_python,'@INPUT0@','--in-h','@INPUT1@','--out-rs','@OUTPUT0@'])
+  
+  
+      if cl.endswith('97'):
+        cl_rs_generated+=custom_target('nvh_classes_'+cl+'_tex.rs',input=['struct_parser.py','nvidia/classes/'+cl+'tex.h'],output=['nvh_classes_'+cl+'_tex.rs'],command=[prog_python,'@INPUT0@','--in-h','@INPUT1@','--out-rs','@OUTPUT0@'])
+  
+  
+      if fs.is_file(f'nvidia/classes/{cl}sph.h'):
+        cl_rs_generated+=custom_target(input=['struct_parser.py',f'nvidia/classes/{cl}sph.h'],output=[f'nvh_classes_{cl}_sph.rs'],command=[prog_python,'@INPUT0@','--in-h','@INPUT1@','--out-rs','@OUTPUT0@'])
+  
+  
+  
+    fs=module_import('fs')
+    for family_gen in hwref_gens:
+      family=fs.parent(family_gen)
+      gen=fs.name(family_gen)
+      cl_rs_generated+=rust.bindgen(input=['nvidia/hwref/'+family+'/'+gen+'/dev_mmu.h'],output='nvh_hwref_'+gen+'_mmu.rs',args=['--allowlist-var','NV_MMU_.*'],)
+  
+  
+    _nvidia_headers_lib_rs=custom_target('lib.rs',input=['lib_rs_gen.py'],output=['lib.rs'],command=[prog_python,'@INPUT0@','--out-rs','@OUTPUT0@',cl_rs_generated])
+  
+    _nvidia_headers_rs=static_library('nvidia_headers',_nvidia_headers_lib_rs,gnu_symbol_visibility='hidden',rust_abi='rust',)
+  
+    idep_nvidia_headers_rs=declare_dependency(link_with=_nvidia_headers_rs,)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/nouveau/headers/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/nouveau')
+  if with_nouveau_vk:
+    set_relative_dir('src/nouveau/compiler')
+    ########################################################################################################################
+    ### Begin conversion from: src/nouveau/compiler/meson.build
+    ########################################################################################################################
+    if meson.version().version_compare('< 1.3.0'):
+      error('NVK requires meson 1.3.0 or newer')
+    
+    
+    add_languages('rust',required=True)
+    rust=module_import('rust')
+    
+    rc=meson.get_compiler('rust')
+    if rc.version().version_compare('< 1.73.0'):
+      error('NAK requires Rust 1.73.0')
+    
+    
+    nak_rust_args=['-Aclippy::identity_op','-Aclippy::len_zero','-Aclippy::manual_range_contains','-Aclippy::needless_range_loop','-Aclippy::redundant_field_names','-Aclippy::upper_case_acronyms','-Aclippy::vec_box','-Aclippy::write_with_newline','-Anon_snake_case',]
+    
+    dep_syn=dependency('syn',version='>= 2.0.15',fallback=['syn','dep_syn'],required=True,)
+    
+    dep_paste=dependency('paste',version='>= 1.0.14',fallback=['paste','dep_paste'],required=True,)
+    
+    libnak_c_files=files('nak.h','nak_nir.c','nak_nir_lower_cf.c','nak_nir_lower_fs_inputs.c','nak_nir_lower_gs_intrinsics.c','nak_nir_lower_non_uniform_ldcx.c','nak_nir_lower_scan_reduce.c','nak_nir_lower_tex.c','nak_nir_lower_vtg_io.c','nak_memstream.c',)
+    
+    _libbitview_rs=static_library('bitview',files('bitview/lib.rs'),gnu_symbol_visibility='hidden',rust_abi='rust',rust_args=nak_rust_args,)
+    
+    idep_bitview_rs=declare_dependency(link_with=_libbitview_rs,)
+    
+    libnak_deps=[idep_mesautil,idep_nir_headers,idep_nvidia_headers,]
+    
+    nak_bindings_rs=rust.bindgen(input=['nak_bindings.h'],output='nak_bindings.rs',c_args=[pre_args,],args=['--raw-line','#![allow(non_camel_case_types)]','--raw-line','#![allow(non_snake_case)]','--raw-line','#![allow(non_upper_case_globals)]','--allowlist-type','exec_list','--allowlist-type','exec_node','--allowlist-type','float_controls','--allowlist-type','gl_access_qualifier','--allowlist-type','gl_frag_result','--allowlist-type','gl_interp_mode','--allowlist-type','gl_shader_stage','--allowlist-type','gl_system_value','--allowlist-type','gl_tess_spacing','--allowlist-type','gl_varying_slot','--allowlist-type','gl_vert_attrib','--allowlist-type','nak_.*','--allowlist-type','nir_.*','--allowlist-type','mesa_scope','--allowlist-type','mesa_prim','--allowlist-type','tess_primitive_mode','--allowlist-var','nir_.*_infos','--allowlist-function','_mesa_shader_stage_to_string','--allowlist-function','nak_.*','--allowlist-function','nir_.*','--allowlist-function','glsl_.*','--no-prepend-enum-name',],dependencies=libnak_deps,)
+    
+    libnak_bindings_gen=static_library('nak_bindings',nak_bindings_rs,gnu_symbol_visibility='hidden',rust_abi='rust',)
+    
+    _libnak_ir_proc_rs=rust.proc_macro('nak_ir_proc',files('nak/ir_proc.rs'),dependencies=[dep_syn],)
+    
+    _libnak_rs=static_library('nak_rs',files('nak/lib.rs'),gnu_symbol_visibility='hidden',rust_abi='c',rust_args=nak_rust_args,dependencies=[dep_paste,idep_nvidia_headers_rs,],link_with=[_libbitview_rs,libnak_bindings_gen,_libnak_ir_proc_rs],)
+    
+    if with_tests:
+      rust.test('nak',_libnak_rs,suite=['nouveau'])
+    
+    
+    nak_nir_algebraic_c=custom_target('nak_nir_algebraic.c',input='nak_nir_algebraic.py',output='nak_nir_algebraic.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,'--out','@OUTPUT@',],depend_files=nir_algebraic_depends,)
+    
+    _libnak=static_library('nak',[libnak_c_files,nak_nir_algebraic_c],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium],dependencies=libnak_deps,link_with=[_libnak_rs],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',)
+    
+    if with_tools.count('nouveau') > 0:
+      executable('nvfuzz',files('nvfuzz/main.rs'),rust_crate_type='bin',link_with=[_libbitview_rs],install=True)
+    
+    
+    idep_nak=declare_dependency(include_directories=include_directories('.'),link_with=_libnak,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/nouveau/compiler/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/nouveau')
+  
+  set_relative_dir('src/nouveau/winsys')
+  ########################################################################################################################
+  ### Begin conversion from: src/nouveau/winsys/meson.build
+  ########################################################################################################################
+  libnouveau_ws=static_library('nouveau_ws',['nouveau_bo.h','nouveau_bo.c','nouveau_context.h','nouveau_context.c','nouveau_device.h','nouveau_device.c','nouveau_private.h',cl_generated,],include_directories=[inc_include,inc_src,inc_nouveau_drm,],c_args=[cc.get_supported_arguments('-Wno-gnu-variable-sized-type-not-at-end')],dependencies=[dep_libdrm,dep_valgrind,idep_nvidia_headers,],gnu_symbol_visibility='hidden',)
+  
+  idep_nouveau_ws=declare_dependency(link_with=libnouveau_ws,include_directories=include_directories('.'))
+  
+  ########################################################################################################################
+  ### End conversion from: src/nouveau/winsys/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/nouveau')
+  if with_tools.count('drm-shim') > 0:
+    subdir('drm-shim')
+  
+  
+  set_relative_dir('src/nouveau/codegen')
+  ########################################################################################################################
+  ### Begin conversion from: src/nouveau/codegen/meson.build
+  ########################################################################################################################
+  files_libnouveau_codegen=files('nv50_ir.cpp','nv50_ir_bb.cpp','nv50_ir_build_util.cpp','nv50_ir_build_util.h','nv50_ir_driver.h','nv50_ir_emit_nv50.cpp','nv50_ir_from_nir.cpp','nv50_ir_graph.cpp','nv50_ir_graph.h','nv50_ir.h','nv50_ir_inlines.h','nv50_ir_lowering_helper.cpp','nv50_ir_lowering_helper.h','nv50_ir_lowering_nv50.cpp','nv50_ir_peephole.cpp','nv50_ir_print.cpp','nv50_ir_ra.cpp','nv50_ir_serialize.cpp','nv50_ir_ssa.cpp','nv50_ir_target.cpp','nv50_ir_target.h','nv50_ir_target_nv50.cpp','nv50_ir_target_nv50.h','nv50_ir_util.cpp','nv50_ir_util.h','nv50_ir_emit_gv100.cpp','nv50_ir_emit_gv100.h','nv50_ir_emit_gk110.cpp','nv50_ir_emit_gm107.cpp','nv50_ir_emit_nvc0.cpp','nv50_ir_lowering_gv100.cpp','nv50_ir_lowering_gv100.h','nv50_ir_lowering_gm107.cpp','nv50_ir_lowering_gm107.h','nv50_ir_lowering_nvc0.cpp','nv50_ir_lowering_nvc0.h','nv50_ir_target_gv100.cpp','nv50_ir_target_gv100.h','nv50_ir_target_gm107.cpp','nv50_ir_target_gm107.h','nv50_ir_target_nvc0.cpp','nv50_ir_target_nvc0.h',)
+  
+  libnouveau_codegen=static_library('nouveau_codegen',files_libnouveau_codegen,include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_mapi,inc_mesa,],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,idep_mesautil,idep_nir_headers],)
+  
+  idep_nouveau_codegen=declare_dependency(sources=['nv50_ir_driver.h'],include_directories=include_directories('.'),)
+  
+  ########################################################################################################################
+  ### End conversion from: src/nouveau/codegen/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/nouveau')
+  if with_nouveau_vk:
+    set_relative_dir('src/nouveau/nil')
+    ########################################################################################################################
+    ### Begin conversion from: src/nouveau/nil/meson.build
+    ########################################################################################################################
+    if meson.version().version_compare('< 1.3.0'):
+      error('NVK requires meson 1.3.0 or newer')
+    
+    
+    add_languages('rust',required=True)
+    rust=module_import('rust')
+    
+    rc=meson.get_compiler('rust')
+    if rc.version().version_compare('< 1.73.0'):
+      error('nil_rs requires Rust 1.73.0')
+    
+    
+    prog_cbindgen=find_program('cbindgen',required=True,native=True,version='>= 0.25')
+    
+    dep_paste=dependency('paste',version='>= 1.0.14',fallback=['paste','dep_paste'],required=True,)
+    
+    _nil_format_table=custom_target('nil_format_table',input=files('nil_format_table_gen.py','nil_formats.csv'),output=['nil_format_table.h','nil_format_table.c'],command=[prog_python,'@INPUT0@','--csv','@INPUT1@','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@',],)
+    
+    _libnil_format_table=static_library('libnil_format_table',_nil_format_table,include_directories=[inc_include,inc_src],dependencies=idep_nvidia_headers,gnu_symbol_visibility='hidden',)
+    
+    _libnil_deps=[dep_paste,idep_bitview_rs,idep_nvidia_headers_rs,]
+    
+    _libnil_rust_args=['-Aclippy::identity_op','-Aclippy::len_zero','-Aclippy::manual_range_contains','-Aclippy::needless_range_loop','-Aclippy::redundant_field_names','-Aclippy::upper_case_acronyms','-Aclippy::vec_box','-Aclippy::write_with_newline','-Anon_snake_case',]
+    
+    _nil_bindings_rs=rust.bindgen(input=['nil_bindings.h',_nil_format_table],output='nil_bindings.rs',c_args=[pre_args,],include_directories=[inc_include,inc_src,include_directories('.')],args=['--raw-line','#![allow(non_camel_case_types)]','--raw-line','#![allow(non_snake_case)]','--raw-line','#![allow(non_upper_case_globals)]','--allowlist-function','util_format_description','--allowlist-function','util_format_get_blocksize','--allowlist-function','util_format_is_compressed','--allowlist-function','util_format_is_pure_integer','--allowlist-function','util_format_is_srgb','--allowlist-function','drm_format_mod_block_linear_2D','--allowlist-function','drm_mod_is_nvidia','--allowlist-type','nil_format_support_flags','--allowlist-type','nv_device_info','--allowlist-type','nv_device_type','--allowlist-type','pipe_format','--allowlist-type','pipe_swizzle','--allowlist-var','nil_format_table','--allowlist-var','drm_format_mod_invalid','--allowlist-var','drm_format_mod_linear','--no-prepend-enum-name',],dependencies=_libnil_deps,)
+    
+    _libnil_rs_bindings=static_library('nil_rs_bindings',_nil_bindings_rs,gnu_symbol_visibility='hidden',rust_abi='rust',)
+    
+    _libnil=static_library('libnil',files('lib.rs'),gnu_symbol_visibility='hidden',rust_abi='c',rust_args=_libnil_rust_args,link_with=[_libnil_format_table,_libnil_rs_bindings],dependencies=_libnil_deps,)
+    
+    _nil_h=custom_target('nil_h',input=[files('cbindgen.toml'),'lib.rs'],output=['nil.h'],command=[prog_cbindgen,'-q','--config','@INPUT0@','--lang','c','--output','@OUTPUT0@','--depfile','@DEPFILE@','--','@INPUT1@',],depfile='nil.h.d',)
+    
+    idep_nil=declare_dependency(include_directories=include_directories('.'),link_with=_libnil,sources=[_nil_h],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/nouveau/nil/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/nouveau')
+    set_relative_dir('src/nouveau/mme')
+    ########################################################################################################################
+    ### Begin conversion from: src/nouveau/mme/meson.build
+    ########################################################################################################################
+    libnouveau_mme_files=files('mme_builder.h','mme_fermi.c','mme_fermi.h','mme_fermi_builder.c','mme_fermi_sim.c','mme_tu104.c','mme_tu104.h','mme_tu104_builder.c','mme_tu104_sim.c','mme_tu104_sim.h',)
+    
+    _libnouveau_mme=static_library('nouveau_mme',libnouveau_mme_files,include_directories=[inc_include,inc_src],gnu_symbol_visibility='hidden',dependencies=[idep_mesautil,idep_nvidia_headers,],)
+    
+    idep_nouveau_mme=declare_dependency(include_directories=include_directories('.'),link_with=_libnouveau_mme,)
+    
+    if with_tests and not with_platform_android:
+      test('mme_builder',executable('mme_builder_test',files('tests/mme_runner.cpp','tests/mme_builder_test.cpp'),gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[dep_libdrm,idep_gtest,idep_mesautil,idep_nvidia_headers,idep_nouveau_mme,idep_nouveau_ws],),suite=['nouveau'],)
+    
+      executable('mme_fermi_sim_hw_test',files('tests/mme_runner.cpp','tests/mme_fermi_sim_hw_test.cpp'),gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[dep_libdrm,idep_gtest,idep_mesautil,idep_nvidia_headers,idep_nouveau_mme,idep_nouveau_ws],install=True,)
+    
+      executable('mme_tu104_sim_hw_test',files('tests/mme_runner.cpp','tests/mme_tu104_sim_hw_test.cpp'),gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src],dependencies=[dep_libdrm,idep_gtest,idep_mesautil,idep_nvidia_headers,idep_nouveau_mme,idep_nouveau_ws],install=True,)
+    
+    
+    executable('nv_mme_dump','nv_mme_dump.c',dependencies=[idep_mesautil,idep_nouveau_mme],build_by_default=with_tools.count('nouveau') > 0,install=with_tools.count('nouveau') > 0,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/nouveau/mme/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/nouveau')
+    set_relative_dir('src/nouveau/vulkan')
+    ########################################################################################################################
+    ### Begin conversion from: src/nouveau/vulkan/meson.build
+    ########################################################################################################################
+    nvk_files=files('../../gallium/auxiliary/tgsi/tgsi_from_mesa.c','nvk_buffer.c','nvk_buffer.h','nvk_buffer_view.c','nvk_buffer_view.h','nvk_cmd_buffer.c','nvk_cmd_buffer.h','nvk_cmd_clear.c','nvk_cmd_copy.c','nvk_cmd_dispatch.c','nvk_cmd_draw.c','nvk_cmd_meta.c','nvk_cmd_pool.c','nvk_cmd_pool.h','nvk_codegen.c','nvk_debug.h','nvk_descriptor_set.h','nvk_descriptor_set.c','nvk_descriptor_set_layout.c','nvk_descriptor_set_layout.h','nvk_descriptor_table.c','nvk_descriptor_table.h','nvk_device.c','nvk_device.h','nvk_device_memory.c','nvk_device_memory.h','nvk_event.c','nvk_event.h','nvk_format.c','nvk_format.h','nvk_heap.c','nvk_heap.h','nvk_image.c','nvk_image.h','nvk_image_view.c','nvk_image_view.h','nvk_instance.c','nvk_instance.h','nvk_mme.c','nvk_mme.h','nvk_nir_lower_descriptors.c','nvk_physical_device.c','nvk_physical_device.h','nvk_private.h','nvk_query_pool.c','nvk_query_pool.h','nvk_queue.c','nvk_queue.h','nvk_sampler.c','nvk_sampler.h','nvk_shader.c','nvk_shader.h','nvk_upload_queue.c','nvk_upload_queue.h','nvk_wsi.c','nvk_wsi.h','nvkmd/nouveau/nvkmd_nouveau.h','nvkmd/nouveau/nvkmd_nouveau_ctx.c','nvkmd/nouveau/nvkmd_nouveau_dev.c','nvkmd/nouveau/nvkmd_nouveau_mem.c','nvkmd/nouveau/nvkmd_nouveau_pdev.c','nvkmd/nouveau/nvkmd_nouveau_va.c','nvkmd/nvkmd.c','nvkmd/nvkmd.h',)
+    
+    nvk_entrypoints=custom_target('nvk_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['nvk_entrypoints.h','nvk_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','nvk','--beta',str(with_vulkan_beta),],depend_files=vk_entrypoints_gen_depend_files,)
+    
+    nvk_deps=[dep_libdrm,idep_nak,idep_nil,idep_nir,idep_nouveau_mme,idep_nouveau_ws,idep_nvidia_headers,idep_vulkan_runtime,idep_vulkan_util,idep_vulkan_wsi,idep_vulkan_wsi_headers,]
+    
+    libnvk=static_library('nvk',[nvk_entrypoints,cl_generated,nvk_files,sha1_h,],include_directories=[inc_gallium,inc_gallium_aux,inc_include,inc_src,],link_with=[libnouveau_codegen],dependencies=[nvk_deps,idep_nouveau_codegen],gnu_symbol_visibility='hidden',)
+    
+    libvulkan_nouveau=shared_library('vulkan_nouveau',link_whole=[libnvk],link_args=[ld_args_build_id],gnu_symbol_visibility='hidden',install=True,)
+    
+    icd_lib_path=join_paths(get_option('prefix'),get_option('libdir'))
+    icd_file_name='libvulkan_nouveau.so'
+    if with_platform_windows:
+      icd_lib_path=module_import('fs').relative_to(get_option('bindir'),with_vulkan_icd_dir)
+      icd_file_name='vulkan_nouveau.dll'
+    
+    
+    nouveau_icd=custom_target('nouveau_icd',input=[vk_icd_gen,vk_api_xml],output='nouveau_icd.{}.json'.format(host_machine.cpu()),command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',join_paths(icd_lib_path,icd_file_name),'--out','@OUTPUT@',],build_by_default=True,install_dir=with_vulkan_icd_dir,install_tag='runtime',install=True,)
+    
+    _dev_icdname='nouveau_devenv_icd.{}.json'.format(host_machine.cpu())
+    custom_target('nouveau_devenv_icd',input=[vk_icd_gen,vk_api_xml],output=_dev_icdname,command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',(meson.current_build_dir() + icd_file_name) if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / icd_file_name),'--out','@OUTPUT@',],build_by_default=True,)
+    
+    devenv.append('VK_DRIVER_FILES',(meson.current_build_dir() + _dev_icdname) if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / _dev_icdname))
+    # Deprecated: replaced by VK_DRIVER_FILES above
+    devenv.append('VK_ICD_FILENAMES',(meson.current_build_dir() + _dev_icdname) if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / _dev_icdname))
+    
+    if with_tests and not with_platform_android:
+      test('nvk_mme',executable('test_nvk_mme',files('test_nvk_mme.c'),dependencies=[nvk_deps],link_with=[libnvk],))
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/nouveau/vulkan/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/nouveau')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/nouveau/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_gallium_asahi or with_tools.count('asahi') > 0:
+  set_relative_dir('src/asahi')
+  ########################################################################################################################
+  ### Begin conversion from: src/asahi/meson.build
+  ########################################################################################################################
+  inc_asahi=include_directories(['.','layout','lib','genxml','compiler'])
+  
+  if with_gallium_asahi:
+    set_relative_dir('src/asahi/layout')
+    ########################################################################################################################
+    ### Begin conversion from: src/asahi/layout/meson.build
+    ########################################################################################################################
+    libasahi_layout_files=files('layout.c','tiling.cc',)
+    
+    libasahi_layout=static_library('asahi_layout',[libasahi_layout_files],include_directories=[inc_include,inc_src],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+    
+    if with_tests:
+      test('asahi_layout_tests',executable('asahi_layout_tests',files('tests/test-layout.cpp','tests/test-generated.cpp','tests/test-twiddling.cpp',),c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[idep_gtest,idep_mesautil],link_with=[libasahi_layout],),suite=['asahi'],protocol='gtest',)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/asahi/layout/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/asahi')
+    set_relative_dir('src/asahi/compiler')
+    ########################################################################################################################
+    ### Begin conversion from: src/asahi/compiler/meson.build
+    ########################################################################################################################
+    libasahi_agx_files=files('agx_compile.c','agx_dce.c','agx_liveness.c','agx_insert_waits.c','agx_nir_lower_address.c','agx_nir_lower_cull_distance.c','agx_nir_lower_frag_sidefx.c','agx_nir_lower_sample_mask.c','agx_nir_lower_discard_zs_emit.c','agx_nir_lower_interpolation.c','agx_nir_lower_shared_bitsize.c','agx_nir_lower_subgroups.c','agx_nir_opt_preamble.c','agx_lower_64bit.c','agx_lower_divergent_shuffle.c','agx_lower_parallel_copy.c','agx_lower_pseudo.c','agx_lower_spill.c','agx_lower_uniform_sources.c','agx_pack.c','agx_performance.c','agx_print.c','agx_pressure_schedule.c','agx_ir.c','agx_opt_cse.c','agx_opt_break_if.c','agx_opt_empty_else.c','agx_opt_jmp_none.c','agx_opt_compact_constants.c','agx_opt_promote_constants.c','agx_optimizer.c','agx_repair_ssa.c','agx_reindex_ssa.c','agx_spill.c','agx_register_allocate.c','agx_validate.c',)
+    
+    agx_nir_algebraic_c=custom_target('agx_nir_algebraic.c',input='agx_nir_algebraic.py',output='agx_nir_algebraic.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],capture=True,depend_files=nir_algebraic_depends,)
+    
+    agx_opcodes_h=custom_target('agx_opcodes.h',input=['agx_opcodes.h.py'],output='agx_opcodes.h',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('agx_opcodes.py'),)
+    
+    idep_agx_opcodes_h=declare_dependency(sources=[agx_opcodes_h],include_directories=include_directories('.'),)
+    
+    agx_opcodes_c=custom_target('agx_opcodes.c',input=['agx_opcodes.c.py'],output='agx_opcodes.c',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('agx_opcodes.py'),)
+    
+    agx_builder_h=custom_target('agx_builder.h',input=['agx_builder.h.py'],output='agx_builder.h',command=[prog_python,'@INPUT@'],capture=True,depend_files=files('agx_opcodes.py'),)
+    
+    idep_agx_builder_h=declare_dependency(sources=[agx_builder_h],include_directories=include_directories('.'),)
+    
+    libasahi_compiler=static_library('asahi_compiler',[libasahi_agx_files,agx_opcodes_c,agx_nir_algebraic_c],dependencies=[idep_nir,idep_agx_opcodes_h,idep_agx_builder_h],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+    
+    if with_tests:
+      test('agx_tests',executable('agx_tests',files('test/test-compact-constants.cpp','test/test-minifloat.cpp','test/test-optimizer.cpp','test/test-lower-pseudo.cpp','test/test-lower-parallel-copy.cpp','test/test-lower-spill.cpp','test/test-repair-ssa.cpp',),c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[idep_gtest,idep_nir,idep_agx_opcodes_h,idep_agx_builder_h],link_with=[libasahi_compiler],),suite=['asahi'],protocol='gtest',)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/asahi/compiler/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/asahi')
+    set_relative_dir('src/asahi/clc')
+    ########################################################################################################################
+    ### Begin conversion from: src/asahi/clc/meson.build
+    ########################################################################################################################
+    prog_asahi_clc=executable('asahi_clc',['asahi_clc.c'],link_with=[libasahi_compiler],include_directories=[inc_include,inc_src],c_args=[pre_args,no_override_init_args],link_args=[ld_args_build_id],dependencies=[idep_mesaclc,dep_llvm,dep_spirv_tools,idep_nir],native=not meson.can_run_host_binaries(),)
+    
+    ########################################################################################################################
+    ### End conversion from: src/asahi/clc/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/asahi')
+    set_relative_dir('src/asahi/genxml')
+    ########################################################################################################################
+    ### Begin conversion from: src/asahi/genxml/meson.build
+    ########################################################################################################################
+    agx_pack=custom_target('agx_pack.h',input=['gen_pack.py','cmdbuf.xml'],output='agx_pack.h',command=[prog_python,'@INPUT@'],capture=True,)
+    
+    idep_agx_pack=declare_dependency(sources=[agx_pack],dependencies=dep_valgrind,include_directories=include_directories('.'),)
+    
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/asahi/genxml/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/asahi')
+    set_relative_dir('src/asahi/lib')
+    ########################################################################################################################
+    ### Begin conversion from: src/asahi/lib/meson.build
+    ########################################################################################################################
+    dep_iokit=dependency('IOKit',required=False)
+    
+    libasahi_lib_files=files('agx_bo.c','agx_border.c','agx_device.c','agx_device_virtio.c','agx_formats.c','agx_linker.c','agx_bg_eot.c','agx_tilebuffer.c','agx_nir_lower_alpha.c','agx_nir_lower_gs.c','agx_nir_lower_ia.c','agx_nir_lower_msaa.c','agx_nir_lower_sample_intrinsics.c','agx_nir_lower_tess.c','agx_nir_lower_texture.c','agx_nir_lower_tilebuffer.c','agx_nir_lower_uvs.c','agx_nir_lower_vbo.c','agx_nir_prolog_epilog.c','agx_ppp.h','agx_scratch.c','pool.c',)
+    
+    libasahi_decode_files=files('decode.c',)
+    
+    libagx_shader_files=files('shaders/libagx.h','shaders/geometry.cl','shaders/geometry.h','shaders/query.cl','shaders/query.h','shaders/tessellation.cl','shaders/tessellator.cl','shaders/texture.cl','shaders/helper.cl',)
+    
+    libasahi_decode=static_library('asahi_decode',[libasahi_decode_files,agx_pack],dependencies=[dep_valgrind,idep_mesautil],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',build_by_default=False,)
+    
+    libasahi_decode_shared=shared_library('asahi_decode',[libasahi_decode_files,agx_pack],dependencies=[dep_valgrind,idep_mesautil],c_args=[no_override_init_args],build_by_default=with_tools.count('asahi') > 0,)
+    
+    prepended_input_args=[]
+    for input_arg in libagx_shader_files:
+      prepended_input_args+=['--in',input_arg]
+    
+    libagx_shaders=custom_target('libagx_shaders.h',input=libagx_shader_files,output='libagx_shaders.h',command=[prog_asahi_clc,'--prefix','libagx_shaders',prepended_input_args,'-o','@OUTPUT@','--','-cl-std=cl2.0','-D__OPENCL_VERSION__=200','-I'+join_paths(meson.current_source_dir(),'.'),'-I'+join_paths(meson.current_source_dir(),'../../'),'-I'+join_paths(meson.current_source_dir(),'shaders'),'-I'+join_paths(meson.current_build_dir(),'../genxml'),],env=['MESA_SHADER_CACHE_DISABLE=true'],depends=[prog_asahi_clc,agx_pack],)
+    
+    libasahi_lib=static_library('asahi_lib',[libasahi_lib_files,libagx_shaders,agx_pack,sha1_h],include_directories=[inc_asahi,inc_virtio_gpu,inc_virtio_vdrm],c_args=[no_override_init_args],gnu_symbol_visibility='hidden',link_with=[libasahi_decode,libvdrm],dependencies=[dep_libdrm,dep_valgrind,idep_nir],build_by_default=False,)
+    
+    if with_tests:
+      test('libasahi_tests',executable('libasahi_tests',files('tests/test-packing.cpp','tests/test-tilebuffer.cpp',),c_args=[c_msvc_compat_args,no_override_init_args],gnu_symbol_visibility='hidden',dependencies=[idep_gtest,idep_agx_pack,idep_mesautil],link_with=[libasahi_lib],),suite=['asahi'],protocol='gtest',)
+    
+    
+    if dep_iokit.found():
+      libasahi_wrap=shared_library('wrap','wrap.c',include_directories=[inc_src,inc_asahi],dependencies=[idep_mesautil,dep_iokit],c_args=[no_override_init_args,'-Wno-missing-prototypes'],gnu_symbol_visibility='hidden',build_by_default=with_tools.count('asahi') > 0,link_with=libasahi_decode,)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/asahi/lib/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/asahi')
+  
+  
+  if with_tools.count('drm-shim') > 0:
+    subdir('drm-shim')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/asahi/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+
+if with_gbm:
+  set_relative_dir('src/gbm')
+  ########################################################################################################################
+  ### Begin conversion from: src/gbm/meson.build
+  ########################################################################################################################
+  inc_gbm=include_directories('.','main','backends/dri')
+  
+  files_gbm=files('main/backend.c','main/backend.h','main/gbm.c','main/gbm.h','main/gbmint.h',)
+  deps_gbm=[]
+  args_gbm=['-DDEFAULT_BACKENDS_PATH="{}"'.format(gbm_backends_path),]
+  deps_gbm=[]
+  incs_gbm=[include_directories('main'),inc_include,inc_src,inc_loader,]
+  
+  if with_dri2:
+    files_gbm+=files('backends/dri/gbm_dri.c','backends/dri/gbm_driint.h')
+    deps_gbm+=dep_libdrm# TODO: pthread-stubs
+  
+  if with_platform_wayland:
+    deps_gbm+=dep_wayland_server
+    incs_gbm+=inc_wayland_drm
+  
+  
+  libgbm_name='gbm'
+  
+  if with_platform_android and get_option('platform-sdk-version')>=30:
+    libgbm_name='gbm_mesa'
+  
+  
+  libgbm=shared_library(libgbm_name,files_gbm,include_directories=incs_gbm,c_args=[args_gbm],link_args=[ld_args_gc_sections],link_with=libloader,dependencies=[deps_gbm,dep_dl,dep_thread,idep_mesautil,idep_xmlconfig],gnu_symbol_visibility='hidden',version='1.0.0',install=True,)
+  
+  if with_tests:
+    abi_check=executable('gbm_abi_check','main/gbm_abi_check.c')
+    test('gbm-abi-check',abi_check,suite=['gbm'])
+  
+  
+  install_headers('main/gbm.h')
+  
+  pkg.generate(name='gbm',filebase='gbm',description='Mesa gbm library',version=meson.project_version(),libraries=libgbm,libraries_private=gbm_priv_libs,variables=['gbmbackendspath='+gbm_backends_path],)
+  
+  if with_symbols_check:
+    test('gbm-symbols-check',symbols_check,args=['--lib',libgbm,'--symbols-file',files('gbm-symbols.txt'),symbols_check_args,],suite=['gbm'],)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/gbm/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+else:
+  inc_gbm=[]
+
+if with_gallium:
+  set_relative_dir('src/mesa')
+  ########################################################################################################################
+  ### Begin conversion from: src/mesa/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/mesa/program')
+  ########################################################################################################################
+  ### Begin conversion from: src/mesa/program/meson.build
+  ########################################################################################################################
+  bison_command=[]
+  if yacc_is_bison:
+    bison_command=[prog_bison,'-o','@OUTPUT0@','--defines=@OUTPUT1@','@INPUT@']
+  else:
+    bison_command=[prog_bison,'-o','@OUTPUT0@','-H','@OUTPUT1@','@INPUT@']
+  
+  
+  mesa_lex=custom_target('mesa_lex',input='program_lexer.l',output='lex.yy.c',command=[prog_flex,'-o','@OUTPUT@','@INPUT@'],)
+  
+  program_parse_tab=custom_target('program_parse_tab.[ch]',input='program_parse.y',output=['program_parse.tab.c','program_parse.tab.h'],command=bison_command,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/mesa/program/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/mesa')
+  set_relative_dir('src/mesa/main')
+  ########################################################################################################################
+  ### Begin conversion from: src/mesa/main/meson.build
+  ########################################################################################################################
+  main_dispatch_h=custom_target('dispatch.h',input=[files('../../mapi/glapi/gen/gl_table.py'),gl_and_es_api_files],output='dispatch.h',command=[prog_python,'@INPUT0@','-f','@INPUT1@','-m','remap_table'],depend_files=glapi_gen_depends,capture=True,)
+  
+  main_marshal_generated_h=custom_target('marshal_generated.h',input=[files('../../mapi/glapi/gen/gl_marshal_h.py'),gl_and_es_api_files],output='marshal_generated.h',command=[prog_python,'@INPUT0@','@INPUT1@',sizeof_pointer],depend_files=files('../../mapi/glapi/gen/marshal_XML.py')+glapi_gen_depends,capture=True,)
+  
+  main_remap_helper_h=custom_target('remap_helper.h',input=[files('../../mapi/glapi/gen/remap_helper.py'),gl_and_es_api_files],output='remap_helper.h',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=glapi_gen_depends,capture=True,)
+  
+  if _shader_replacement!='':
+    shader_replacement_h=custom_target('shader_replacement.h',input=[files(_shader_replacement+'/process_shaders.py')],output='shader_replacement.h',command=[prog_python,'@INPUT0@',_shader_replacement,'@OUTPUT@'],build_always=True,)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/mesa/main/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/mesa')
+  
+  # files shared between classic mesa and gallium mesa
+  files_libmesa=files('main/accum.c','main/accum.h','main/api_arrayelt.c','main/api_arrayelt.h','main/arbprogram.c','main/arrayobj.c','main/arrayobj.h','main/atifragshader.c','main/atifragshader.h','main/attrib.c','main/attrib.h','main/barrier.c','main/bbox.c','main/bbox.h','main/blend.c','main/blend.h','main/blit.c','main/blit.h','main/bufferobj.c','main/bufferobj.h','main/buffers.c','main/buffers.h','main/clear.c','main/clip.c','main/clip.h','main/colormac.h','main/compute.c','main/condrender.c','main/condrender.h','main/config.h','main/conservativeraster.c','main/conservativeraster.h','main/context.c','main/context.h','main/copyimage.c','main/dd.h','main/debug.c','main/debug.h','main/debug_output.c','main/debug_output.h','main/depth.c','main/depth.h','main/dlist.c','main/dlist.h','main/draw.c','main/draw.h','main/draw_validate.c','main/draw_validate.h','main/drawpix.c','main/drawtex.c','main/enable.c','main/enable.h','main/enums.h','main/errors.c','main/errors.h','main/es1_conversion.c','main/eval.c','main/eval.h','main/extensions.c','main/extensions.h','main/extensions_table.c','main/extensions_table.h','main/externalobjects.c','main/externalobjects.h','main/fbobject.c','main/fbobject.h','main/feedback.c','main/feedback.h','main/ff_fragment_shader.c','main/ffvertex_prog.c','main/ffvertex_prog.h','main/fog.c','main/fog.h','main/format_pack.h','main/format_unpack.h','main/format_utils.c','main/format_utils.h','main/formatquery.c','main/formatquery.h','main/formats.c','main/formats.h','main/framebuffer.c','main/framebuffer.h','main/genmipmap.c','main/genmipmap.h','main/get.c','main/get.h','main/getstring.c','main/glformats.c','main/glformats.h','main/glspirv.c','main/glspirv.h','main/glthread.c','main/glthread.h','main/glthread_bufferobj.c','main/glthread_draw.c','main/glthread_draw_unroll.c','main/glthread_get.c','main/glthread_list.c','main/glthread_marshal.h','main/glthread_pixels.c','main/glthread_shaderobj.c','main/glthread_varray.c','main/hash.c','main/hash.h','main/hint.c','main/hint.h','main/image.c','main/image.h','main/light.c','main/light.h','main/lines.c','main/lines.h','main/macros.h','main/matrix.c','main/matrix.h','main/menums.h','main/mesa_private.h','main/mipmap.c','main/mipmap.h','main/mtypes.h','main/multisample.c','main/multisample.h','main/objectlabel.c','main/pack.c','main/pack.h','main/pbo.c','main/pbo.h','main/performance_monitor.c','main/performance_monitor.h','main/performance_query.c','main/performance_query.h','main/pipelineobj.c','main/pipelineobj.h','main/pixel.c','main/pixel.h','main/pixelstore.c','main/pixelstore.h','main/pixeltransfer.c','main/pixeltransfer.h','main/points.c','main/points.h','main/polygon.c','main/polygon.h','main/program_binary.c','main/program_binary.h','main/program_resource.c','main/querymatrix.c','main/queryobj.c','main/queryobj.h','main/rastpos.c','main/rastpos.h','main/readpix.c','main/readpix.h','main/remap.c','main/remap.h','main/renderbuffer.c','main/renderbuffer.h','main/robustness.c','main/samplerobj.c','main/samplerobj.h','main/scissor.c','main/scissor.h','main/shader_query.cpp','main/shaderapi.c','main/shaderapi.h','main/shaderimage.c','main/shaderimage.h','main/shaderobj.c','main/shaderobj.h','main/shared.c','main/shared.h','main/spirv_capabilities.c','main/spirv_capabilities.h','main/spirv_extensions.c','main/spirv_extensions.h','main/state.c','main/state.h','main/stencil.c','main/stencil.h','main/syncobj.c','main/syncobj.h','main/texcompress.c','main/texcompress.h','main/texcompress_astc.cpp','main/texcompress_astc.h','main/texcompress_bptc.c','main/texcompress_bptc.h','main/texcompress_cpal.c','main/texcompress_cpal.h','main/texcompress_etc.c','main/texcompress_etc.h','main/texcompress_fxt1.c','main/texcompress_fxt1.h','main/texcompress_rgtc.c','main/texcompress_rgtc.h','main/texcompress_s3tc.c','main/texcompress_s3tc.h','main/texenv.c','main/texenvprogram.h','main/texgen.c','main/texgetimage.c','main/texgetimage.h','main/teximage.c','main/teximage.h','main/texobj.c','main/texobj.h','main/texparam.c','main/texparam.h','main/texstate.c','main/texstate.h','main/texstorage.c','main/texstorage.h','main/texstore.c','main/texstore.h','main/texturebindless.c','main/texturebindless.h','main/textureview.c','main/textureview.h','main/transformfeedback.c','main/transformfeedback.h','main/uniform_query.cpp','main/uniforms.c','main/uniforms.h','main/varray.c','main/varray.h','main/vdpau.c','main/version.c','main/version.h','main/viewport.c','main/viewport.h','main/es1_conversion.c','math/m_eval.c','math/m_eval.h','math/m_matrix.c','math/m_matrix.h','program/arbprogparse.c','program/arbprogparse.h','program/prog_cache.c','program/prog_cache.h','program/prog_instruction.c','program/prog_instruction.h','program/prog_parameter.c','program/prog_parameter.h','program/prog_parameter_layout.c','program/prog_parameter_layout.h','program/prog_print.c','program/prog_print.h','program/prog_statevars.c','program/prog_statevars.h','program/prog_to_nir.c','program/prog_to_nir.h','program/program.c','program/program.h','program/program_parse_extra.c','program/program_parser.h','program/symbol_table.c','program/symbol_table.h','state_tracker/st_atifs_to_nir.c','state_tracker/st_atifs_to_nir.h','state_tracker/st_atom_array.cpp','state_tracker/st_atom_atomicbuf.c','state_tracker/st_atom_blend.c','state_tracker/st_atom_clip.c','state_tracker/st_atom_constbuf.c','state_tracker/st_atom_constbuf.h','state_tracker/st_atom_depth.c','state_tracker/st_atom_framebuffer.c','state_tracker/st_atom_image.c','state_tracker/st_atom_list.h','state_tracker/st_atom_msaa.c','state_tracker/st_atom_pixeltransfer.c','state_tracker/st_atom_rasterizer.c','state_tracker/st_atom_sampler.c','state_tracker/st_atom_scissor.c','state_tracker/st_atom_shader.c','state_tracker/st_atom_stipple.c','state_tracker/st_atom_storagebuf.c','state_tracker/st_atom_tess.c','state_tracker/st_atom_texture.c','state_tracker/st_atom_viewport.c','state_tracker/st_bc1_tables.h','state_tracker/st_cb_bitmap.c','state_tracker/st_cb_bitmap.h','state_tracker/st_cb_clear.c','state_tracker/st_cb_clear.h','state_tracker/st_cb_copyimage.c','state_tracker/st_cb_copyimage.h','state_tracker/st_cb_drawpixels.c','state_tracker/st_cb_drawpixels.h','state_tracker/st_cb_drawtex.c','state_tracker/st_cb_drawtex.h','state_tracker/st_cb_eglimage.c','state_tracker/st_cb_eglimage.h','state_tracker/st_cb_feedback.c','state_tracker/st_cb_feedback.h','state_tracker/st_cb_flush.c','state_tracker/st_cb_flush.h','state_tracker/st_cb_rasterpos.c','state_tracker/st_cb_rasterpos.h','state_tracker/st_cb_readpixels.c','state_tracker/st_cb_readpixels.h','state_tracker/st_cb_texture.c','state_tracker/st_cb_texture.h','state_tracker/st_context.c','state_tracker/st_context.h','state_tracker/st_copytex.c','state_tracker/st_copytex.h','state_tracker/st_debug.c','state_tracker/st_debug.h','state_tracker/st_draw.c','state_tracker/st_draw.h','state_tracker/st_draw_feedback.c','state_tracker/st_draw_hw_select.c','state_tracker/st_extensions.c','state_tracker/st_extensions.h','state_tracker/st_format.c','state_tracker/st_format.h','state_tracker/st_gen_mipmap.c','state_tracker/st_gen_mipmap.h','state_tracker/st_glsl_to_nir.cpp','state_tracker/st_glsl_to_nir.h','state_tracker/st_interop.c','state_tracker/st_interop.h','state_tracker/st_manager.c','state_tracker/st_manager.h','state_tracker/st_nir.h','state_tracker/st_nir_builtins.c','state_tracker/st_nir_lower_builtin.c','state_tracker/st_nir_lower_fog.c','state_tracker/st_nir_lower_position_invariant.c','state_tracker/st_nir_lower_tex_src_plane.c','state_tracker/st_pbo.c','state_tracker/st_pbo_compute.c','state_tracker/st_pbo.h','state_tracker/st_program.c','state_tracker/st_program.h','state_tracker/st_sampler_view.c','state_tracker/st_sampler_view.h','state_tracker/st_scissor.c','state_tracker/st_scissor.h','state_tracker/st_shader_cache.c','state_tracker/st_shader_cache.h','state_tracker/st_texcompress_compute.c','state_tracker/st_texcompress_compute.h','state_tracker/st_texture.c','state_tracker/st_texture.h','state_tracker/st_util.h','state_tracker/st_vdpau.c','state_tracker/st_vdpau.h','vbo/vbo.h','vbo/vbo_attrib.h','vbo/vbo_attrib_tmp.h','vbo/vbo_context.c','vbo/vbo_exec.c','vbo/vbo_exec.h','vbo/vbo_exec_api.c','vbo/vbo_exec_draw.c','vbo/vbo_exec_eval.c','vbo/vbo_minmax_index.c','vbo/vbo_noop.c','vbo/vbo_save.c','vbo/vbo_save.h','vbo/vbo_save_api.c','vbo/vbo_save_draw.c','vbo/vbo_save_loopback.c','vbo/vbo_util.h',)
+  
+  inc_libmesa_asm=[]
+  if with_asm_arch=='x86':
+    files_libmesa+=files('x86/assyntax.h',)
+  
+  
+  format_fallback_c=custom_target('format_fallback.c',input=['main/format_fallback.py','main/formats.csv'],output='format_fallback.c',command=[prog_python,'@INPUT0@','@INPUT1@','@OUTPUT@'],depend_files=files('main/format_parser.py'),)
+  
+  get_hash_h=custom_target('get_hash.h',input=['main/get_hash_generator.py',gl_and_es_api_files],output='get_hash.h',command=[prog_python,'@INPUT0@','-f','@INPUT1@'],depend_files=files('main/get_hash_params.py'),capture=True,)
+  
+  for x in [['format_info.h','format_info.py']]:
+    files_libmesa+=custom_target(x[0],input=['main/{}'.format(x[1]),'main/formats.csv'],output=x[0],command=[prog_python,'@INPUT0@','@INPUT1@'],depend_files=files('main/format_parser.py'),capture=True,)
+  
+  
+  files_libmesa+=[mesa_lex,program_parse_tab,main_api_exec_c,main_api_exec_decl_h,main_api_save_h,main_api_save_init_h,main_api_beginend_init_h,main_api_hw_select_init_h,main_enums_c,format_fallback_c,get_hash_h,main_marshal_generated_h,main_dispatch_h,ir_expression_operation_h,main_remap_helper_h,sha1_h,main_unmarshal_table_c,]+main_marshal_generated_c
+  
+  if with_sse41:
+    libmesa_sse41=static_library('mesa_sse41',files('main/sse_minmax.c'),c_args=[c_msvc_compat_args,sse41_args],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],gnu_symbol_visibility='hidden',)
+  else:
+    libmesa_sse41=[]
+  
+  
+  _mesa_windows_args=[]
+  if with_platform_windows:
+    _mesa_windows_args+=['-D_GDI32_',]
+    if not with_shared_glapi:
+      _mesa_windows_args += ['-D_GLAPI_NO_EXPORTS'] if isinstance(_mesa_windows_args, list) else '-D_GLAPI_NO_EXPORTS'
+  
+  
+  
+  libmesa=static_library('mesa',files_libmesa,c_args=[c_msvc_compat_args,_mesa_windows_args],cpp_args=[cpp_msvc_compat_args,_mesa_windows_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_libmesa_asm,include_directories('main'),],link_with=[libmesa_sse41],dependencies=[idep_libglsl,idep_nir,idep_vtn,dep_vdpau,idep_mesautil],build_by_default=False,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/mesa/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+  set_relative_dir('src/gallium')
+  ########################################################################################################################
+  ### Begin conversion from: src/gallium/meson.build
+  ########################################################################################################################
+  sym_config=configuration_data()
+  
+  for d in [[with_gallium_r300 or with_gallium_radeonsi or with_gallium_r600,'radeon_drm_winsys_create'],[with_gallium_radeonsi,'amdgpu_winsys_create'],[with_gallium_nouveau,'nouveau_drm_screen_create'],[with_gallium_freedreno,'fd_drm_screen_create_renderonly'],[amd_with_llvm and with_gallium_radeonsi,'ac_init_shared_llvm_once']]:
+    if d[0]:
+      sym_config.set(d[1],d[1]+';')
+    else:
+      sym_config.set(d[1],'')
+  
+  
+  
+  inc_gallium_drivers=include_directories('drivers')
+  inc_gallium_winsys=include_directories('winsys')
+  inc_gallium_winsys_sw=include_directories('winsys/sw')
+  
+  set_relative_dir('src/gallium/auxiliary')
+  ########################################################################################################################
+  ### Begin conversion from: src/gallium/auxiliary/meson.build
+  ########################################################################################################################
+  files_libgallium=files('cso_cache/cso_cache.c','cso_cache/cso_cache.h','cso_cache/cso_context.c','cso_cache/cso_context.h','cso_cache/cso_hash.c','cso_cache/cso_hash.h','draw/draw_cliptest_tmp.h','draw/draw_context.c','draw/draw_context.h','draw/draw_decompose_tmp.h','draw/draw_fs.c','draw/draw_fs.h','draw/draw_gs.c','draw/draw_gs.h','draw/draw_gs_tmp.h','draw/draw_mesh.c','draw/draw_mesh.h','draw/draw_mesh_prim.c','draw/draw_mesh_prim.h','draw/draw_mesh_prim_tmp.h','draw/draw_pipe_aaline.c','draw/draw_pipe_aapoint.c','draw/draw_pipe.c','draw/draw_pipe.h','draw/draw_pipe_clip.c','draw/draw_pipe_cull.c','draw/draw_pipe_flatshade.c','draw/draw_pipe_offset.c','draw/draw_pipe_pstipple.c','draw/draw_pipe_stipple.c','draw/draw_pipe_twoside.c','draw/draw_pipe_unfilled.c','draw/draw_pipe_user_cull.c','draw/draw_pipe_util.c','draw/draw_pipe_validate.c','draw/draw_pipe_vbuf.c','draw/draw_pipe_wide_line.c','draw/draw_pipe_wide_point.c','draw/draw_prim_assembler.c','draw/draw_prim_assembler.h','draw/draw_prim_assembler_tmp.h','draw/draw_private.h','draw/draw_pt.c','draw/draw_pt_decompose.h','draw/draw_pt_emit.c','draw/draw_pt_fetch.c','draw/draw_pt_fetch_shade_emit.c','draw/draw_pt_fetch_shade_pipeline.c','draw/draw_pt_mesh_pipeline.c','draw/draw_pt.h','draw/draw_pt_post_vs.c','draw/draw_pt_so_emit.c','draw/draw_pt_util.c','draw/draw_pt_vsplit.c','draw/draw_pt_vsplit_tmp.h','draw/draw_so_emit_tmp.h','draw/draw_split_tmp.h','draw/draw_tess.c','draw/draw_tess.h','draw/draw_vbuf.h','draw/draw_vertex.c','draw/draw_vertex.h','draw/draw_vertex_header.h','draw/draw_vs.c','draw/draw_vs_exec.c','draw/draw_vs.h','draw/draw_vs_variant.c','driver_ddebug/dd_context.c','driver_ddebug/dd_draw.c','driver_ddebug/dd_pipe.h','driver_ddebug/dd_public.h','driver_ddebug/dd_screen.c','driver_ddebug/dd_util.h','driver_noop/noop_pipe.c','driver_noop/noop_public.h','driver_noop/noop_state.c','driver_trace/tr_context.c','driver_trace/tr_context.h','driver_trace/tr_dump.c','driver_trace/tr_dump_defines.h','driver_trace/tr_dump.h','driver_trace/tr_dump_state.c','driver_trace/tr_dump_state.h','driver_trace/tr_public.h','driver_trace/tr_screen.c','driver_trace/tr_screen.h','driver_trace/tr_texture.c','driver_trace/tr_texture.h','driver_trace/tr_video.c','driver_trace/tr_video.h','hud/font.c','hud/font.h','hud/hud_context.c','hud/hud_context.h','hud/hud_cpu.c','hud/hud_nic.c','hud/hud_cpufreq.c','hud/hud_diskstat.c','hud/hud_sensors_temp.c','hud/hud_driver_query.c','hud/hud_fps.c','hud/hud_private.h','indices/u_indices.h','indices/u_indices_priv.h','indices/u_primconvert.c','indices/u_primconvert.h','pipebuffer/pb_buffer_fenced.c','pipebuffer/pb_buffer_fenced.h','pipebuffer/pb_buffer.h','pipebuffer/pb_bufmgr_cache.c','pipebuffer/pb_bufmgr_debug.c','pipebuffer/pb_bufmgr.h','pipebuffer/pb_bufmgr_mm.c','pipebuffer/pb_bufmgr_slab.c','pipebuffer/pb_cache.c','pipebuffer/pb_cache.h','pipebuffer/pb_slab.c','pipebuffer/pb_slab.h','pipebuffer/pb_validate.c','pipebuffer/pb_validate.h','postprocess/filters.h','postprocess/postprocess.h','postprocess/pp_celshade.c','postprocess/pp_celshade.h','postprocess/pp_colors.c','postprocess/pp_colors.h','postprocess/pp_filters.h','postprocess/pp_init.c','postprocess/pp_mlaa_areamap.h','postprocess/pp_mlaa.c','postprocess/pp_mlaa.h','postprocess/pp_private.h','postprocess/pp_program.c','postprocess/pp_run.c','rtasm/rtasm_execmem.c','rtasm/rtasm_execmem.h','rtasm/rtasm_x86sse.c','rtasm/rtasm_x86sse.h','tgsi/tgsi_aa_point.c','tgsi/tgsi_aa_point.h','tgsi/tgsi_build.c','tgsi/tgsi_build.h','tgsi/tgsi_dump.c','tgsi/tgsi_dump.h','tgsi/tgsi_dynamic_indexing.c','tgsi/tgsi_exec.c','tgsi/tgsi_exec.h','tgsi/tgsi_from_mesa.c','tgsi/tgsi_from_mesa.h','tgsi/tgsi_info.c','tgsi/tgsi_info.h','tgsi/tgsi_info_opcodes.h','tgsi/tgsi_iterate.c','tgsi/tgsi_iterate.h','tgsi/tgsi_lowering.c','tgsi/tgsi_lowering.h','tgsi/tgsi_opcode_tmp.h','tgsi/tgsi_parse.c','tgsi/tgsi_parse.h','tgsi/tgsi_point_sprite.c','tgsi/tgsi_point_sprite.h','tgsi/tgsi_sanity.c','tgsi/tgsi_sanity.h','tgsi/tgsi_scan.c','tgsi/tgsi_scan.h','tgsi/tgsi_strings.c','tgsi/tgsi_strings.h','tgsi/tgsi_text.c','tgsi/tgsi_text.h','tgsi/tgsi_transform.c','tgsi/tgsi_transform.h','tgsi/tgsi_two_side.c','tgsi/tgsi_two_side.h','tgsi/tgsi_ureg.c','tgsi/tgsi_ureg.h','tgsi/tgsi_util.c','tgsi/tgsi_util.h','tgsi/tgsi_vpos.c','translate/translate.c','translate/translate.h','translate/translate_cache.c','translate/translate_cache.h','translate/translate_generic.c','translate/translate_sse.c','util/u_async_debug.h','util/u_async_debug.c','util/u_bitcast.h','util/u_bitmask.c','util/u_bitmask.h','util/u_blend.h','util/u_blitter.c','util/u_blitter.h','util/u_cache.c','util/u_cache.h','util/u_compute.c','util/u_compute.h','util/u_debug_cb.h','util/u_debug_describe.c','util/u_debug_describe.h','util/u_debug_flush.c','util/u_debug_flush.h','util/u_debug_image.c','util/u_debug_image.h','util/u_debug_refcnt.c','util/u_debug_refcnt.h','util/u_draw.c','util/u_draw.h','util/u_draw_quad.c','util/u_draw_quad.h','util/u_driconf.c','util/u_driconf.h','util/u_dual_blend.h','util/u_dump_defines.c','util/u_dump.h','util/u_dump_state.c','util/u_framebuffer.c','util/u_framebuffer.h','util/u_gen_mipmap.c','util/u_gen_mipmap.h','util/u_handle_table.c','util/u_handle_table.h','util/u_helpers.c','util/u_helpers.h','util/u_index_modify.c','util/u_index_modify.h','util/u_inlines.h','util/u_live_shader_cache.c','util/u_live_shader_cache.h','util/u_log.c','util/u_log.h','util/u_prim.h','util/u_prim.c','util/u_prim_restart.c','util/u_prim_restart.h','util/u_pstipple.c','util/u_pstipple.h','util/u_pwr8.h','util/u_range.h','util/u_rect.h','util/u_resource.c','util/u_resource.h','util/u_sample_positions.c','util/u_sample_positions.h','util/u_sampler.c','util/u_sampler.h','util/u_screen.c','util/u_screen.h','util/u_simple_shaders.c','util/u_simple_shaders.h','util/u_split_draw.c','util/u_split_draw.h','util/u_split_prim.h','util/u_sse.h','util/u_suballoc.c','util/u_suballoc.h','util/u_surface.c','util/u_surface.h','util/u_tests.c','util/u_tests.h','util/u_texture.c','util/u_texture.h','util/u_tile.c','util/u_tile.h','util/u_transfer.c','util/u_transfer.h','util/u_transfer_helper.c','util/u_transfer_helper.h','util/u_threaded_context.c','util/u_threaded_context.h','util/u_threaded_context_calls.h','util/u_trace_gallium.c','util/u_trace_gallium.h','util/u_upload_mgr.c','util/u_upload_mgr.h','util/u_vbuf.c','util/u_vbuf.h','util/u_vertex_state_cache.c','util/u_vertex_state_cache.h','util/u_video.h','util/u_viewport.h','nir/tgsi_to_nir.c','nir/tgsi_to_nir.h','nir/nir_to_tgsi.c','nir/nir_to_tgsi.h','nir/nir_draw_helpers.c','nir/nir_draw_helpers.h',)
+  
+  if dep_libdrm.found():
+    files_libgallium+=files('renderonly/renderonly.c','renderonly/renderonly.h',)
+  
+  
+  if draw_with_llvm:
+    files_libgallium+=files('gallivm/lp_bld_arit.c','gallivm/lp_bld_arit.h','gallivm/lp_bld_arit_overflow.c','gallivm/lp_bld_arit_overflow.h','gallivm/lp_bld_assert.c','gallivm/lp_bld_assert.h','gallivm/lp_bld_bitarit.c','gallivm/lp_bld_bitarit.h','gallivm/lp_bld_const.c','gallivm/lp_bld_const.h','gallivm/lp_bld_conv.c','gallivm/lp_bld_conv.h','gallivm/lp_bld_coro.c','gallivm/lp_bld_coro.h','gallivm/lp_bld_debug.cpp','gallivm/lp_bld_debug.h','gallivm/lp_bld_flow.c','gallivm/lp_bld_flow.h','gallivm/lp_bld_format_aos_array.c','gallivm/lp_bld_format_aos.c','gallivm/lp_bld_format_float.c','gallivm/lp_bld_format_s3tc.c','gallivm/lp_bld_format.c','gallivm/lp_bld_format.h','gallivm/lp_bld_format_soa.c','gallivm/lp_bld_format_srgb.c','gallivm/lp_bld_format_yuv.c','gallivm/lp_bld_gather.c','gallivm/lp_bld_gather.h','gallivm/lp_bld.h','gallivm/lp_bld_init.c','gallivm/lp_bld_init_common.c','gallivm/lp_bld_init.h','gallivm/lp_bld_intr.c','gallivm/lp_bld_intr.h','gallivm/lp_bld_ir_common.c','gallivm/lp_bld_ir_common.h','gallivm/lp_bld_jit_sample.c','gallivm/lp_bld_jit_types.h','gallivm/lp_bld_jit_types.c','gallivm/lp_bld_limits.h','gallivm/lp_bld_logic.c','gallivm/lp_bld_logic.h','gallivm/lp_bld_misc.cpp','gallivm/lp_bld_misc.h','gallivm/lp_bld_nir.h','gallivm/lp_bld_nir.c','gallivm/lp_bld_nir_aos.c','gallivm/lp_bld_nir_soa.c','gallivm/lp_bld_pack.c','gallivm/lp_bld_pack.h','gallivm/lp_bld_passmgr.h','gallivm/lp_bld_passmgr.c','gallivm/lp_bld_printf.c','gallivm/lp_bld_printf.h','gallivm/lp_bld_quad.c','gallivm/lp_bld_quad.h','gallivm/lp_bld_sample_aos.c','gallivm/lp_bld_sample_aos.h','gallivm/lp_bld_sample.c','gallivm/lp_bld_sample.h','gallivm/lp_bld_sample_soa.c','gallivm/lp_bld_struct.c','gallivm/lp_bld_struct.h','gallivm/lp_bld_swizzle.c','gallivm/lp_bld_swizzle.h','gallivm/lp_bld_tgsi_action.c','gallivm/lp_bld_tgsi_action.h','gallivm/lp_bld_tgsi.c','gallivm/lp_bld_tgsi.h','gallivm/lp_bld_tgsi_info.c','gallivm/lp_bld_tgsi_soa.c','gallivm/lp_bld_type.c','gallivm/lp_bld_type.h','draw/draw_llvm.c','draw/draw_llvm.h','draw/draw_pt_fetch_shade_pipeline_llvm.c','draw/draw_vs_llvm.c','tessellator/tessellator.cpp','tessellator/tessellator.hpp','tessellator/p_tessellator.cpp','tessellator/p_tessellator.h','nir/nir_to_tgsi_info.c','nir/nir_to_tgsi_info.h',)
+  
+  
+  files_libgalliumvl=files('vl/vl_bicubic_filter.c','vl/vl_bicubic_filter.h','vl/vl_codec.c','vl/vl_codec.h','vl/vl_compositor.c','vl/vl_compositor.h','vl/vl_compositor_gfx.c','vl/vl_compositor_gfx.h','vl/vl_compositor_cs.c','vl/vl_compositor_cs.h','vl/vl_csc.c','vl/vl_csc.h','vl/vl_decoder.c','vl/vl_decoder.h','vl/vl_defines.h','vl/vl_deint_filter.c','vl/vl_deint_filter.h','vl/vl_idct.c','vl/vl_idct.h','vl/vl_matrix_filter.c','vl/vl_matrix_filter.h','vl/vl_mc.c','vl/vl_mc.h','vl/vl_median_filter.c','vl/vl_median_filter.h','vl/vl_mpeg12_bitstream.c','vl/vl_mpeg12_bitstream.h','vl/vl_mpeg12_decoder.c','vl/vl_mpeg12_decoder.h','vl/vl_types.h','vl/vl_vertex_buffers.c','vl/vl_vertex_buffers.h','vl/vl_video_buffer.c','vl/vl_video_buffer.h','vl/vl_zscan.c','vl/vl_zscan.h','vl/vl_probs_table.h',)
+  
+  vlwinsys_deps=[]
+  files_libgalliumvlwinsys=files('vl/vl_winsys.h')
+  if host_machine.system()=='windows':
+    files_libgalliumvlwinsys+=files('vl/vl_winsys_win32.c')
+  else:
+    files_libgalliumvlwinsys+=files('vl/vl_winsys_drm.c')
+  
+  if with_dri2 and with_platform_x11:
+    files_libgalliumvlwinsys+=files('vl/vl_winsys_dri.c')
+    if with_dri3:
+      vlwinsys_deps+=[dep_xcb_sync,dep_xcb_present,dep_xshmfence,dep_xcb_xfixes,dep_xcb_dri3,]
+      files_libgalliumvlwinsys+=files('vl/vl_winsys_dri3.c')
+  
+  
+  
+  if with_glx=='xlib':
+    files_libgalliumvlwinsys+=files('vl/vl_winsys_xlib_swrast.c')
+  elif with_gallium_drisw_kms:
+    files_libgalliumvlwinsys+=files('vl/vl_winsys_dri_vgem.c')
+  
+  
+  prog_enums2names=files('driver_trace/enums2names.py')
+  files_libgallium+=custom_target('tr_util.[ch]',input=['../include/pipe/p_defines.h','../include/pipe/p_video_enums.h','../../util/blend.h'],output=['tr_util.c','tr_util.h'],command=[prog_python,prog_enums2names,'@INPUT@','-C','@OUTPUT0@','-H','@OUTPUT1@','-I','tr_util.h'],depend_files=prog_enums2names,)
+  
+  files_libgallium+=custom_target('u_tracepoints.c',input='util/u_tracepoints.py',output='u_tracepoints.c',command=[prog_python,'@INPUT@','-p',join_paths(dir_source_root,'src/util/perf/'),'-C','@OUTPUT@',],depend_files=u_trace_py,)
+  
+  files_u_tracepoints=custom_target('u_tracepoints.h',input='util/u_tracepoints.py',output='u_tracepoints.h',command=[prog_python,'@INPUT@','-p',join_paths(dir_source_root,'src/util/perf/'),'-H','@OUTPUT@',],depend_files=u_trace_py,)
+  
+  files_libgallium+=files_u_tracepoints
+  
+  idep_u_tracepoints=declare_dependency(sources=files_u_tracepoints,)
+  
+  u_indices_gen_c=custom_target('u_indices_gen.c',input='indices/u_indices_gen.py',output='u_indices_gen.c',command=[prog_python,'@INPUT@','@OUTPUT@'],)
+  
+  u_unfilled_gen_c=custom_target('u_unfilled_gen.c',input='indices/u_unfilled_gen.py',output='u_unfilled_gen.c',command=[prog_python,'@INPUT@','@OUTPUT@'],)
+  
+  libgallium_extra_c_args=[]
+  libgallium=static_library('gallium',[files_libgallium,u_indices_gen_c,u_unfilled_gen_c],include_directories=[inc_loader,inc_gallium,inc_src,inc_include,include_directories('util')],c_args=[c_msvc_compat_args,libgallium_extra_c_args],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_llvm,dep_dl,dep_m,dep_thread,dep_lmsensors,dep_ws2_32,idep_nir,idep_nir_headers,idep_mesautil,],build_by_default=False)
+  
+  if with_tests:
+    test('gallium-aux',executable('gallium-aux','util/u_surface_test.cpp',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],link_with=libgallium,dependencies=[idep_gtest],),suite='gallium',protocol='gtest',)
+  
+  
+  _libgalliumvl_stub=static_library('galliumvl_stub','vl/vl_stubs.c',c_args=[c_msvc_compat_args],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_gallium,inc_include,inc_src],dependencies=idep_mesautil,build_by_default=False,)
+  
+  libgalliumvl=static_library('galliumvl',files_libgalliumvl,c_args=[c_msvc_compat_args],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_gallium,inc_include,inc_src],dependencies=[idep_nir,idep_mesautil],build_by_default=False,)# some drivers export their screen creation function globally, so all frontends have to contain the
+  # full libgalliumvl. So we'll handle this here globally for everybody.
+  if (with_gallium_va or with_gallium_vdpau or with_gallium_omx!='disabled' or with_dri or with_gallium_radeonsi):
+    libgalliumvl_stub=libgalliumvl
+  else:
+    libgalliumvl_stub=_libgalliumvl_stub
+  
+  
+  # XXX: The dependencies here may be off...
+  libgalliumvlwinsys=static_library('galliumvlwinsys',files_libgalliumvlwinsys,include_directories=[inc_gallium,inc_include,inc_loader,inc_src],dependencies=[dep_libdrm,vlwinsys_deps,idep_mesautil],build_by_default=False,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/gallium/auxiliary/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/gallium')
+  subdir('auxiliary/pipe-loader')
+  set_relative_dir('src/gallium/winsys/sw/null')
+  ########################################################################################################################
+  ### Begin conversion from: src/gallium/winsys/sw/null/meson.build
+  ########################################################################################################################
+  libws_null=static_library('ws_null',files('null_sw_winsys.c','null_sw_winsys.h'),gnu_symbol_visibility='hidden',include_directories=[inc_gallium,inc_src,inc_gallium_aux,inc_include],dependencies=idep_mesautil,build_by_default=False,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/gallium/winsys/sw/null/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/gallium')
+  if with_dri:
+    set_relative_dir('src/gallium/winsys/sw/dri')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/sw/dri/meson.build
+    ########################################################################################################################
+    libswdri=static_library('swdri',files('dri_sw_winsys.c','dri_sw_winsys.h'),gnu_symbol_visibility='hidden',include_directories=[inc_gallium,inc_include,inc_src,inc_gallium_aux],dependencies=idep_mesautil,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/sw/dri/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    libswdri=[]
+  
+  if with_gallium_drisw_kms:
+    subdir('winsys/sw/kms-dri')
+  else:
+    libswkmsdri=[]
+  
+  if with_platform_windows:
+    set_relative_dir('src/gallium/winsys/sw/gdi')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/sw/gdi/meson.build
+    ########################################################################################################################
+    libwsgdi=static_library('wsgdi','gdi_sw_winsys.c',include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_frontends],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/sw/gdi/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    libwsgdi=null_dep
+  
+  set_relative_dir('src/gallium/winsys/sw/wrapper')
+  ########################################################################################################################
+  ### Begin conversion from: src/gallium/winsys/sw/wrapper/meson.build
+  ########################################################################################################################
+  libwsw=static_library('wsw',files('wrapper_sw_winsys.c','wrapper_sw_winsys.h'),gnu_symbol_visibility='hidden',include_directories=[inc_gallium,inc_include,inc_src,inc_gallium_aux],dependencies=idep_mesautil,build_by_default=False,)
+  
+  ########################################################################################################################
+  ### End conversion from: src/gallium/winsys/sw/wrapper/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/gallium')
+  if with_platform_haiku:
+    set_relative_dir('src/gallium/winsys/sw/hgl')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/sw/hgl/meson.build
+    ########################################################################################################################
+    libswhgl=static_library('swhgl',files('hgl_sw_winsys.cpp'),gnu_symbol_visibility='hidden',include_directories=[inc_gallium,inc_include,inc_src,inc_gallium_aux,include_directories('../../../frontends/hgl')],build_by_default=False,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/sw/hgl/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_gallium_softpipe:
+    set_relative_dir('src/gallium/drivers/softpipe')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/softpipe/meson.build
+    ########################################################################################################################
+    files_softpipe=files('sp_buffer.c','sp_buffer.h','sp_clear.c','sp_clear.h','sp_context.c','sp_context.h','sp_compute.c','sp_draw_arrays.c','sp_fence.c','sp_fence.h','sp_flush.c','sp_flush.h','sp_fs_exec.c','sp_fs.h','sp_image.c','sp_image.h','sp_limits.h','sp_prim_vbuf.c','sp_prim_vbuf.h','sp_public.h','sp_quad_blend.c','sp_quad_depth_test.c','sp_quad_depth_test_tmp.h','sp_quad_fs.c','sp_quad.h','sp_quad_pipe.c','sp_quad_pipe.h','sp_query.c','sp_query.h','sp_screen.c','sp_screen.h','sp_setup.c','sp_setup.h','sp_state_blend.c','sp_state_clip.c','sp_state_derived.c','sp_state_image.c','sp_state.h','sp_state_rasterizer.c','sp_state_sampler.c','sp_state_shader.c','sp_state_so.c','sp_state_surface.c','sp_state_vertex.c','sp_surface.c','sp_surface.h','sp_tex_sample.c','sp_tex_sample.h','sp_tex_tile_cache.c','sp_tex_tile_cache.h','sp_texture.c','sp_texture.h','sp_tile_cache.c','sp_tile_cache.h',)
+    
+    libsoftpipe=static_library('softpipe',files_softpipe,include_directories=[inc_gallium_aux,inc_gallium,inc_include,inc_src],c_args=[c_msvc_compat_args],gnu_symbol_visibility='hidden',dependencies=idep_nir,)
+    
+    driver_swrast=declare_dependency(compile_args='-DGALLIUM_SOFTPIPE',link_with=libsoftpipe)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/softpipe/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    if draw_with_llvm:
+      set_relative_dir('src/gallium/drivers/llvmpipe')
+      ########################################################################################################################
+      ### Begin conversion from: src/gallium/drivers/llvmpipe/meson.build
+      ########################################################################################################################
+      files_llvmpipe=files('lp_bld_alpha.c','lp_bld_alpha.h','lp_bld_blend_aos.c','lp_bld_blend.c','lp_bld_blend.h','lp_bld_blend_logicop.c','lp_bld_depth.c','lp_bld_depth.h','lp_bld_interp.c','lp_bld_interp.h','lp_clear.c','lp_clear.h','lp_context.c','lp_context.h','lp_cs_tpool.h','lp_cs_tpool.c','lp_debug.h','lp_draw_arrays.c','lp_fence.c','lp_fence.h','lp_flush.c','lp_flush.h','lp_jit.c','lp_jit.h','lp_limits.h','lp_linear.c','lp_linear_fastpath.c','lp_linear_interp.c','lp_linear_sampler.c','lp_linear_sampler_tmp.h','lp_memory.c','lp_memory.h','lp_perf.c','lp_perf.h','lp_public.h','lp_query.c','lp_query.h','lp_rast.c','lp_rast_debug.c','lp_rast.h','lp_rast_linear.c','lp_rast_linear_fallback.c','lp_rast_priv.h','lp_rast_rect.c','lp_rast_tri.c','lp_rast_tri_tmp.h','lp_scene.c','lp_scene.h','lp_scene_queue.c','lp_scene_queue.h','lp_screen.c','lp_screen.h','lp_setup.c','lp_setup_analysis.c','lp_setup_context.h','lp_setup.h','lp_setup_line.c','lp_setup_point.c','lp_setup_rect.c','lp_setup_tri.c','lp_setup_vbuf.c','lp_state_blend.c','lp_state_clip.c','lp_state_derived.c','lp_state_cs.c','lp_state_cs.h','lp_state_fs.c','lp_state_fs.h','lp_state_fs_analysis.c','lp_state_fs_fastpath.c','lp_state_fs_linear.c','lp_state_fs_linear_llvm.c','lp_state_gs.c','lp_state.h','lp_state_rasterizer.c','lp_state_sampler.c','lp_state_setup.c','lp_state_setup.h','lp_state_so.c','lp_state_surface.c','lp_state_tess.c','lp_state_vertex.c','lp_state_vs.c','lp_surface.c','lp_surface.h','lp_tex_sample.c','lp_tex_sample.h','lp_texture.c','lp_texture.h','lp_texture_handle.c','lp_texture_handle.h',)
+      
+      libllvmpipe=static_library('llvmpipe',[files_llvmpipe,sha1_h],c_args=[c_msvc_compat_args],cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_gallium,inc_gallium_aux,inc_include,inc_src],dependencies=[dep_llvm,idep_nir_headers,idep_mesautil,dep_libdrm],)# softpipe dependency.
+      driver_swrast=declare_dependency(compile_args='-DGALLIUM_LLVMPIPE',link_with=libllvmpipe,dependencies=[driver_swrast,dep_llvm,idep_mesautil],)
+      
+      if with_tests and with_gallium_softpipe and draw_with_llvm:
+        for t in ['lp_test_format','lp_test_arit','lp_test_blend','lp_test_conv','lp_test_printf']:
+          test(t,executable(t,['{}.c'.format(t),'lp_test_main.c',sha1_h],dependencies=[dep_llvm,dep_dl,dep_clock,idep_mesautil],include_directories=[inc_gallium,inc_gallium_aux,inc_include,inc_src],link_with=[libllvmpipe,libgallium],),suite=['llvmpipe'],should_fail=meson.get_external_property('xfail','').count(t) > 0,timeout=240,)
+      
+      
+      
+      ########################################################################################################################
+      ### End conversion from: src/gallium/drivers/llvmpipe/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/gallium')
+  
+  else:
+    driver_swrast=declare_dependency()
+  
+  if with_gallium_asahi:
+    set_relative_dir('src/gallium/winsys/asahi/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/asahi/drm/meson.build
+    ########################################################################################################################
+    libasahiwinsys=static_library('asahiwinsys',files('asahi_drm_winsys.c'),include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,idep_mesautil],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/asahi/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/asahi')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/asahi/meson.build
+    ########################################################################################################################
+    files_asahi=files('driinfo_asahi.h','agx_batch.c','agx_blit.c','agx_disk_cache.c','agx_fence.c','agx_pipe.c','agx_nir_lower_sysvals.c','agx_nir_lower_bindings.c','agx_nir_lower_point_size.c','agx_query.c','agx_state.c','agx_streamout.c','agx_uniforms.c',)
+    
+    libasahi=static_library('asahi',[files_asahi],include_directories=[inc_gallium_aux,inc_gallium,inc_include,inc_src,inc_asahi,inc_virtio_gpu,inc_virtio_vdrm],c_args=[c_msvc_compat_args],gnu_symbol_visibility='hidden',dependencies=[idep_nir,idep_mesautil,idep_agx_pack,dep_libdrm,idep_mesaclc],)
+    
+    driver_asahi=declare_dependency(compile_args='-DGALLIUM_ASAHI',link_with=[libasahi,libasahiwinsys,libasahi_compiler,libasahi_lib,libasahi_layout,libasahi_decode])
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/asahi/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_asahi=declare_dependency()
+  
+  if with_gallium_r300 or with_gallium_radeonsi or with_gallium_r600:
+    set_relative_dir('src/gallium/winsys/radeon/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/radeon/drm/meson.build
+    ########################################################################################################################
+    libradeonwinsys=static_library('radeonwinsys',files('radeon_drm_bo.c','radeon_drm_bo.h','radeon_drm_cs.c','radeon_drm_cs.h','radeon_drm_surface.c','radeon_drm_winsys.c','radeon_drm_winsys.h'),include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm_radeon,idep_mesautil],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/radeon/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_gallium_r300:
+    set_relative_dir('src/gallium/drivers/r300')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/r300/meson.build
+    ########################################################################################################################
+    files_r300=files('r300_blit.c','r300_cb.h','r300_chipset.c','r300_chipset.h','r300_context.c','r300_context.h','r300_cs.h','r300_debug.c','r300_defines.h','r300_emit.c','r300_emit.h','r300_flush.c','r300_fs.c','r300_fs.h','r300_hyperz.c','r300_public.h','r300_query.c','r300_reg.h','r300_render.c','r300_render_stencilref.c','r300_render_translate.c','r300_resource.c','r300_screen_buffer.c','r300_screen_buffer.h','r300_screen.c','r300_screen.h','r300_shader_semantics.h','r300_state.c','r300_state_derived.c','r300_state_inlines.h','r300_texture.c','r300_texture_desc.c','r300_texture_desc.h','r300_texture.h','r300_tgsi_to_rc.c','r300_tgsi_to_rc.h','r300_transfer.c','r300_transfer.h','r300_vs.c','r300_vs_draw.c','r300_vs.h','compiler/memory_pool.c','compiler/memory_pool.h','compiler/nir_to_rc.c','compiler/nir_to_rc.h','compiler/r300_fragprog.c','compiler/r300_fragprog_emit.c','compiler/r300_fragprog.h','compiler/r300_fragprog_swizzle.c','compiler/r300_fragprog_swizzle.h','compiler/r3xx_fragprog.c','compiler/r3xx_vertprog.c','compiler/r3xx_vertprog_dump.c','compiler/r500_fragprog.c','compiler/r500_fragprog_emit.c','compiler/r500_fragprog.h','compiler/r300_nir.c','compiler/r300_nir.h','compiler/r500_nir_lower_fcsel.c','compiler/radeon_code.c','compiler/radeon_code.h','compiler/radeon_compiler.c','compiler/radeon_compiler.h','compiler/radeon_compiler_util.c','compiler/radeon_compiler_util.h','compiler/radeon_dataflow.c','compiler/radeon_dataflow_deadcode.c','compiler/radeon_dataflow.h','compiler/radeon_dataflow_swizzles.c','compiler/radeon_inline_literals.c','compiler/radeon_list.c','compiler/radeon_list.h','compiler/radeon_opcodes.c','compiler/radeon_opcodes.h','compiler/radeon_optimize.c','compiler/radeon_pair_dead_sources.c','compiler/radeon_pair_regalloc.c','compiler/radeon_pair_schedule.c','compiler/radeon_pair_translate.c','compiler/radeon_program_alu.c','compiler/radeon_program_alu.h','compiler/radeon_program.c','compiler/radeon_program_constants.h','compiler/radeon_program.h','compiler/radeon_program_pair.c','compiler/radeon_program_pair.h','compiler/radeon_program_print.c','compiler/radeon_program_tex.c','compiler/radeon_program_tex.h','compiler/radeon_regalloc.c','compiler/radeon_regalloc.h','compiler/radeon_remove_constants.c','compiler/radeon_remove_constants.h','compiler/radeon_rename_regs.c','compiler/radeon_rename_regs.h','compiler/radeon_swizzle.h','compiler/radeon_variable.c','compiler/radeon_variable.h','compiler/radeon_vert_fc.c',)
+    
+    r300_nir_algebraic_c=custom_target('r300_nir_algebraic.c',input='compiler/r300_nir_algebraic.py',output='r300_nir_algebraic.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,'@OUTPUT@',],depend_files=nir_algebraic_depends,)
+    
+    libr300=static_library('r300',files_r300,r300_nir_algebraic_c,include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_mesa,],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm_radeon,dep_llvm,idep_mesautil,idep_nir],)
+    
+    driver_r300=declare_dependency(compile_args='-DGALLIUM_R300',link_with=[libr300,libradeonwinsys],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/r300/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_r300=declare_dependency()
+  
+  if with_gallium_r600:
+    set_relative_dir('src/gallium/drivers/r600')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/r600/meson.build
+    ########################################################################################################################
+    files_r600=files('r600d_common.h','compute_memory_pool.c','compute_memory_pool.h','eg_asm.c','eg_debug.c','eg_sq.h','evergreen_compute.c','evergreen_compute.h','evergreen_compute_internal.h','evergreend.h','evergreen_hw_context.c','evergreen_state.c','r600_asm.c','r600_asm.h','r600_blit.c','r600d.h','r600_dump.c','r600_dump.h','r600_formats.h','r600_hw_context.c','r600_isa.c','r600_isa.h','r600_opcodes.h','r600_pipe.c','r600_pipe.h','r600_public.h','r600_sfn.cpp','r600_sfn.h','r600_shader.c','r600_shader.h','r600_shader_common.h','r600_sq.h','r600_state.c','r600_state_common.c','r600_uvd.c','r700_asm.c','r700_sq.h','cayman_msaa.c','r600_buffer_common.c','r600_cs.h','r600_gpu_load.c','r600_perfcounter.c','r600_pipe_common.c','r600_pipe_common.h','r600_query.c','r600_query.h','r600_streamout.c','r600_test_dma.c','r600_texture.c','r600_viewport.c','radeon_uvd.c','radeon_uvd.h','radeon_vce.c','radeon_vce.h','radeon_video.c','radeon_video.h','sfn/sfn_alu_defines.cpp','sfn/sfn_alu_defines.h','sfn/sfn_alu_readport_validation.cpp','sfn/sfn_alu_readport_validation.h','sfn/sfn_assembler.cpp','sfn/sfn_assembler.h','sfn/sfn_callstack.cpp','sfn/sfn_callstack.h','sfn/sfn_conditionaljumptracker.cpp','sfn/sfn_conditionaljumptracker.h','sfn/sfn_defines.h','sfn/sfn_debug.cpp','sfn/sfn_debug.h','sfn/sfn_instr.cpp','sfn/sfn_instr.h','sfn/sfn_instr_alu.cpp','sfn/sfn_instr_alu.h','sfn/sfn_instr_alugroup.cpp','sfn/sfn_instr_alugroup.h','sfn/sfn_instr_controlflow.cpp','sfn/sfn_instr_controlflow.h','sfn/sfn_instr_export.cpp','sfn/sfn_instr_export.h','sfn/sfn_instr_fetch.cpp','sfn/sfn_instr_fetch.h','sfn/sfn_instr_mem.cpp','sfn/sfn_instr_mem.h','sfn/sfn_instr_lds.cpp','sfn/sfn_instr_lds.h','sfn/sfn_instr_tex.cpp','sfn/sfn_instr_tex.h','sfn/sfn_instrfactory.cpp','sfn/sfn_instrfactory.h','sfn/sfn_liverangeevaluator.cpp','sfn/sfn_liverangeevaluator.h','sfn/sfn_liverangeevaluator_helpers.cpp','sfn/sfn_liverangeevaluator_helpers.h','sfn/sfn_memorypool.cpp','sfn/sfn_memorypool.h','sfn/sfn_nir.cpp','sfn/sfn_nir.h','sfn/sfn_nir_legalize_image_load_store.cpp','sfn/sfn_nir_lower_64bit.cpp','sfn/sfn_nir_lower_alu.cpp','sfn/sfn_nir_lower_alu.h','sfn/sfn_nir_lower_tex.cpp','sfn/sfn_nir_lower_tex.h','sfn/sfn_nir_lower_fs_out_to_vector.cpp','sfn/sfn_nir_lower_fs_out_to_vector.h','sfn/sfn_nir_lower_tess_io.cpp','sfn/sfn_nir_vectorize_vs_inputs.c','sfn/sfn_optimizer.cpp','sfn/sfn_peephole.cpp','sfn/sfn_ra.cpp','sfn/sfn_ra.h','sfn/sfn_scheduler.cpp','sfn/sfn_scheduler.h','sfn/sfn_shader.cpp','sfn/sfn_shader.h','sfn/sfn_shader_cs.cpp','sfn/sfn_shader_cs.h','sfn/sfn_shader_fs.cpp','sfn/sfn_shader_fs.h','sfn/sfn_shader_gs.cpp','sfn/sfn_shader_gs.h','sfn/sfn_shader_tess.cpp','sfn/sfn_shader_tess.h','sfn/sfn_shader_vs.cpp','sfn/sfn_shader_vs.h','sfn/sfn_split_address_loads.cpp','sfn/sfn_split_address_loads.h','sfn/sfn_valuefactory.cpp','sfn/sfn_valuefactory.h','sfn/sfn_virtualvalues.cpp','sfn/sfn_virtualvalues.h',)
+    
+    egd_tables_h=custom_target('egd_tables.h',input=['egd_tables.py','evergreend.h'],output='egd_tables.h',command=[prog_python,'@INPUT@'],capture=True,)
+    
+    r600_c_args=[]
+    if with_gallium_clover:
+      if dep_elf.found():
+        r600_c_args += ['-DHAVE_OPENCL'] if isinstance(r600_c_args, list) else '-DHAVE_OPENCL'
+      else:
+        warning('r600 requires libelf to support opencl.')
+    
+    
+    
+    r600_cpp_args=[]
+    if cpp.has_type('std::pmr::monotonic_buffer_resource',prefix='#include <memory_resource>'):
+      r600_cpp_args += ['-DHAVE_MEMORY_RESOURCE'] if isinstance(r600_cpp_args, list) else '-DHAVE_MEMORY_RESOURCE'
+    
+    
+    libr600=static_library('r600',[files_r600,egd_tables_h,sha1_h],c_args=[r600_c_args,'-Wstrict-overflow=0'],cpp_args=r600_cpp_args,gnu_symbol_visibility='hidden',include_directories=[inc_src,inc_mapi,inc_mesa,inc_include,inc_gallium,inc_gallium_aux,inc_amd_common,inc_gallium_drivers,],dependencies=[dep_libdrm_radeon,dep_elf,dep_llvm,idep_nir,idep_nir_headers],)
+    
+    driver_r600=declare_dependency(compile_args='-DGALLIUM_R600',link_with=[libr600,libmesa,libradeonwinsys],)
+    
+    if with_tests:
+      set_relative_dir('src/gallium/drivers/r600/sfn/tests')
+      ########################################################################################################################
+      ### Begin conversion from: src/gallium/drivers/r600/sfn/tests/meson.build
+      ########################################################################################################################
+      r600_test_lib=static_library('r600_test','sfn_test_shaders.cpp',cpp_args=r600_cpp_args,include_directories=[inc_src,inc_mapi,inc_mesa,inc_include,inc_gallium,inc_gallium_aux,inc_amd_common,inc_gallium_drivers,],dependencies=[idep_gtest,dep_thread,dep_llvm,idep_nir,idep_nir_headers],)
+      
+      r600_test_dep=declare_dependency(include_directories=[inc_src,inc_mapi,inc_mesa,inc_include,inc_gallium,inc_gallium_aux,inc_amd_common,inc_gallium_drivers,],link_with=[libr600,libmesa,libgalliumvl,libgallium,libradeonwinsys,r600_test_lib],dependencies=[idep_gtest,dep_thread,dep_llvm,idep_nir,idep_nir_headers])
+      
+      
+      
+      if with_tests:
+        for t in ['valuefactory','value','instr','instrfromstring','liverange','optimizer','shaderfromstring','split_address_loads']:
+          test(t,executable('test-{}-r600-sfn'.format(t),['sfn_{}_test.cpp'.format(t)],dependencies=[r600_test_dep],),suite=['r600'])
+      
+      
+      
+      ########################################################################################################################
+      ### End conversion from: src/gallium/drivers/r600/sfn/tests/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/gallium/drivers/r600')
+    
+    
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/r600/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_r600=declare_dependency()
+  
+  if with_gallium_radeonsi:
+    set_relative_dir('src/gallium/winsys/amdgpu/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/amdgpu/drm/meson.build
+    ########################################################################################################################
+    libamdgpuwinsys=static_library('amdgpuwinsys',files('amdgpu_bo.c','amdgpu_bo.h','amdgpu_cs.cpp','amdgpu_cs.h','amdgpu_surface.c','amdgpu_winsys.c','amdgpu_winsys.h',),include_directories=[inc_amd,inc_gallium,inc_gallium_aux,inc_include,inc_src,inc_amd_common,inc_amd_common_llvm,],gnu_symbol_visibility='hidden',link_with=libamdgpu_addrlib,dependencies=[dep_llvm,dep_libdrm_amdgpu,idep_amdgfxregs_h,idep_mesautil],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/amdgpu/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/radeonsi')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/radeonsi/meson.build
+    ########################################################################################################################
+    si_tracepoints=custom_target('si_tracepoints.[ch]',input='si_tracepoints.py',output=['si_tracepoints.c','si_tracepoints_perfetto.h','si_tracepoints.h'],command=[prog_python,'@INPUT@','-p',join_paths(dir_source_root,'src/util/perf/'),'-C','@OUTPUT0@','--perfetto-hdr','@OUTPUT1@','-H','@OUTPUT2@'],depend_files=u_trace_py,)
+    
+    idep_si_tracepoints=declare_dependency(sources=si_tracepoints,)
+    
+    files_libradeonsi=files('driinfo_radeonsi.h','gfx10_shader_ngg.c','gfx11_query.c','si_blit.c','si_buffer.c','si_build_pm4.h','si_clear.c','si_compute.c','si_compute_blit.c','si_cp_dma.c','si_cp_reg_shadowing.c','si_debug.c','si_descriptors.c','si_fence.c','si_get.c','si_gfx_cs.c','si_gpu_load.c','si_perfcounter.c','si_pipe.c','si_pipe.h','si_pm4.c','si_pm4.h','si_public.h','si_query.c','si_query.h','si_nir_lower_abi.c','si_nir_lower_resource.c','si_nir_lower_vs_inputs.c','si_nir_optim.c','si_sdma_copy_image.c','si_shader.c','si_shader.h','si_shader_aco.c','si_shader_info.c','si_shader_internal.h','si_shader_nir.c','si_shaderlib_nir.c','si_sqtt.c','si_state.c','si_state.h','si_state_binning.c','si_state_msaa.c','si_state_shaders.cpp','si_state_streamout.c','si_state_viewport.c','si_test_blit_perf.c','si_test_dma_perf.c','si_test_image_copy_region.c','si_texture.c','si_utrace.c','si_utrace.h','si_uvd.c','si_vpe.c','si_vpe.h','pspdecryptionparam.h','radeon_temporal.h','radeon_uvd.c','radeon_uvd.h','radeon_uvd_enc.c','radeon_uvd_enc.h','radeon_uvd_enc_1_1.c','radeon_vce.c','radeon_vce.h','radeon_vce_40_2_2.c','radeon_vce_50.c','radeon_vce_52.c','radeon_vcn.h','radeon_vcn.c','radeon_vcn_dec.c','radeon_vcn_dec.h','radeon_vcn_dec_jpeg.c','radeon_vcn_enc.c','radeon_vcn_enc.h','radeon_vcn_enc_1_2.c','radeon_vcn_enc_2_0.c','radeon_vcn_enc_3_0.c','radeon_vcn_enc_4_0.c','radeon_vcn_enc_5_0.c','radeon_video.c','radeon_video.h',)
+    
+    radeonsi_include_dirs=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_amd_common,inc_amd_common_llvm,inc_gallium_drivers,inc_compiler,inc_amd,inc_amd_vpe]
+    radeonsi_deps=[dep_llvm,dep_clock,dep_libdrm_radeon,idep_nir_headers,idep_amdgfxregs_h,idep_mesautil,idep_aco,idep_u_tracepoints,idep_si_tracepoints]
+    
+    if with_perfetto:
+      radeonsi_deps+=dep_perfetto
+    
+    
+    files_libradeonsi+=['si_perfetto.cpp','si_perfetto.h']
+    
+    amd_common_libs=[libamd_common]
+    
+    if amd_with_llvm:
+      files_libradeonsi+=files('si_shader_llvm.c','si_shader_llvm.h','si_shader_llvm_gs.c','si_shader_llvm_ps.c','si_shader_llvm_tess.c',)
+    
+      radeonsi_include_dirs+=[inc_amd_common_llvm]
+      radeonsi_deps+=[dep_llvm]
+      amd_common_libs+=[libamd_common_llvm]
+    
+    
+    radeonsi_gfx_libs=[]
+    for ver in ['6','7','8','9','10','103','11','115','12']:
+      radeonsi_gfx_libs+=static_library('radeonsi_gfx{}'.format(ver),['si_state_draw.cpp'],include_directories=radeonsi_include_dirs,cpp_args=['-DGFX_VER={}'.format(ver)],gnu_symbol_visibility='hidden',dependencies=radeonsi_deps,)
+    
+    
+    libradeonsi=static_library('radeonsi',[files_libradeonsi,sid_tables_h],include_directories=radeonsi_include_dirs,gnu_symbol_visibility='hidden',dependencies=radeonsi_deps,)
+    
+    driver_radeonsi=declare_dependency(compile_args='-DGALLIUM_RADEONSI',link_with=radeonsi_gfx_libs+[libradeonsi,libradeonwinsys,libamdgpuwinsys,libamd_common,libamd_common_llvm,libvpe],dependencies=idep_nir,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/radeonsi/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_radeonsi=declare_dependency()
+  
+  if with_gallium_nouveau:
+    set_relative_dir('src/gallium/winsys/nouveau/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/nouveau/drm/meson.build
+    ########################################################################################################################
+    files_libnouveauwinsys=files('nouveau.h','nouveau.c','nouveau_drm_public.h','nouveau_drm_winsys.c',)
+    
+    libnouveauwinsys=static_library('nouveauwinsys',files_libnouveauwinsys,include_directories=[inc_src,inc_include,inc_nouveau_drm,inc_gallium,inc_gallium_aux,inc_gallium_drivers,],c_args=[cc.get_supported_arguments('-Wno-gnu-variable-sized-type-not-at-end')],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,idep_mesautil,idep_nvidia_headers],)
+    
+    idep_libnouveauwinsys=declare_dependency(include_directories=[include_directories('.'),inc_nouveau_drm,],link_with=[libnouveauwinsys],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/nouveau/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/nouveau')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/nouveau/meson.build
+    ########################################################################################################################
+    files_libnouveau=files('nouveau_buffer.c','nouveau_buffer.h','nouveau_context.h','nouveau_debug.h','nouveau_fence.c','nouveau_fence.h','nouveau_gldefs.h','nouveau_heap.c','nouveau_heap.h','nouveau_mm.c','nouveau_mm.h','nouveau_screen.c','nouveau_screen.h','nouveau_video.c','nouveau_video.h','nouveau_vp3_video_bsp.c','nouveau_vp3_video.c','nouveau_vp3_video.h','nouveau_vp3_video_vp.c','nouveau_winsys.h','nv17_mpeg.xml.h','nv31_mpeg.xml.h','nv_m2mf.xml.h','nv_object.xml.h','nv30/nv01_2d.xml.h','nv30/nv30-40_3d.xml.h','nv30/nv30_clear.c','nv30/nv30_context.c','nv30/nv30_context.h','nv30/nv30_draw.c','nv30/nv30_format.c','nv30/nv30_format.h','nv30/nv30_fragprog.c','nv30/nv30_fragtex.c','nv30/nv30_miptree.c','nv30/nv30_push.c','nv30/nv30_query.c','nv30/nv30_resource.c','nv30/nv30_resource.h','nv30/nv30_screen.c','nv30/nv30_screen.h','nv30/nv30_state.c','nv30/nv30_state.h','nv30/nv30_state_validate.c','nv30/nv30_texture.c','nv30/nv30_transfer.c','nv30/nv30_transfer.h','nv30/nv30_vbo.c','nv30/nv30_vertprog.c','nv30/nv30_vertprog.h','nv30/nv30_winsys.h','nv30/nv40_vertprog.h','nv30/nv40_verttex.c','nv30/nvfx_fragprog.c','nv30/nvfx_shader.h','nv30/nvfx_vertprog.c','nv50/g80_defs.xml.h','nv50/g80_texture.xml.h','nv50/nv50_2d.xml.h','nv50/nv50_3ddefs.xml.h','nv50/nv50_3d.xml.h','nv50/nv50_blit.h','nv50/nv50_compute.c','nv50/nv50_compute.xml.h','nv50/nv50_context.c','nv50/nv50_context.h','nv50/nv50_formats.c','nv50/nv50_miptree.c','nv50/nv50_program.c','nv50/nv50_program.h','nv50/nv50_push.c','nv50/nv50_query.c','nv50/nv50_query.h','nv50/nv50_query_hw.c','nv50/nv50_query_hw.h','nv50/nv50_query_hw_metric.c','nv50/nv50_query_hw_metric.h','nv50/nv50_query_hw_sm.c','nv50/nv50_query_hw_sm.h','nv50/nv50_resource.c','nv50/nv50_resource.h','nv50/nv50_screen.c','nv50/nv50_screen.h','nv50/nv50_shader_state.c','nv50/nv50_state.c','nv50/nv50_stateobj.h','nv50/nv50_stateobj_tex.h','nv50/nv50_state_validate.c','nv50/nv50_surface.c','nv50/nv50_tex.c','nv50/nv50_transfer.c','nv50/nv50_transfer.h','nv50/nv50_vbo.c','nv50/nv50_winsys.h','nv50/nv84_video_bsp.c','nv50/nv84_video.c','nv50/nv84_video.h','nv50/nv84_video_vp.c','nv50/nv98_video_bsp.c','nv50/nv98_video.c','nv50/nv98_video.h','nv50/nv98_video_ppp.c','nv50/nv98_video_vp.c','nvc0/cla0c0qmd.h','nvc0/clc0c0qmd.h','nvc0/clc3c0qmd.h','nvc0/drf.h','nvc0/qmd.h','nvc0/qmda0c0.c','nvc0/qmdc0c0.c','nvc0/qmdc3c0.c','nvc0/gm107_texture.xml.h','nvc0/nvc0_3d.xml.h','nvc0/nvc0_compute.c','nvc0/nvc0_compute.xml.h','nvc0/nvc0_context.c','nvc0/nvc0_context.h','nvc0/nvc0_formats.c','nvc0/nvc0_m2mf.xml.h','nvc0/nvc0_macros.h','nvc0/nvc0_miptree.c','nvc0/nvc0_program.c','nvc0/nvc0_program.h','nvc0/nvc0_query.c','nvc0/nvc0_query.h','nvc0/nvc0_query_hw.c','nvc0/nvc0_query_hw.h','nvc0/nvc0_query_hw_metric.c','nvc0/nvc0_query_hw_metric.h','nvc0/nvc0_query_hw_sm.c','nvc0/nvc0_query_hw_sm.h','nvc0/nvc0_query_sw.c','nvc0/nvc0_query_sw.h','nvc0/nvc0_resource.c','nvc0/nvc0_resource.h','nvc0/nvc0_screen.c','nvc0/nvc0_screen.h','nvc0/nvc0_shader_state.c','nvc0/nvc0_state.c','nvc0/nvc0_stateobj.h','nvc0/nvc0_state_validate.c','nvc0/nvc0_surface.c','nvc0/nvc0_tex.c','nvc0/nvc0_transfer.c','nvc0/nvc0_vbo.c','nvc0/nvc0_vbo_translate.c','nvc0/nvc0_video_bsp.c','nvc0/nvc0_video.c','nvc0/nvc0_video.h','nvc0/nvc0_video_ppp.c','nvc0/nvc0_video_vp.c','nvc0/nvc0_winsys.h','nvc0/nve4_compute.c','nvc0/nve4_compute.h','nvc0/nve4_compute.xml.h','nvc0/nve4_copy.xml.h','nvc0/nve4_p2mf.xml.h',)
+    
+    libnouveau=static_library('nouveau',files_libnouveau,include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_mapi,inc_mesa,],gnu_symbol_visibility='hidden',link_with=[libnouveauwinsys],dependencies=[dep_libdrm,idep_libnouveauwinsys,idep_nouveau_codegen,idep_mesautil,idep_nir_headers],)
+    
+    driver_nouveau=declare_dependency(compile_args='-DGALLIUM_NOUVEAU',dependencies=[idep_nir,idep_nouveau_codegen],link_with=[libnouveau_codegen,libnouveau],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/nouveau/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_nouveau=declare_dependency()
+  
+  if with_gallium_freedreno:
+    set_relative_dir('src/gallium/winsys/freedreno/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/freedreno/drm/meson.build
+    ########################################################################################################################
+    libfreedrenowinsys=static_library('freedrenowinsys',[files('freedreno_drm_public.h','freedreno_drm_winsys.c'),freedreno_xml_header_files,],include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_freedreno,],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,idep_mesautil,],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/freedreno/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/freedreno')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/freedreno/meson.build
+    ########################################################################################################################
+    files_libfreedreno=files('driinfo_freedreno.h','freedreno_autotune.c','freedreno_autotune.h','freedreno_batch.c','freedreno_batch.h','freedreno_batch_cache.c','freedreno_batch_cache.h','freedreno_blitter.c','freedreno_blitter.h','freedreno_context.c','freedreno_context.h','freedreno_draw.c','freedreno_draw.h','freedreno_fence.c','freedreno_fence.h','freedreno_gmem.c','freedreno_gmem.h','freedreno_program.c','freedreno_program.h','freedreno_query.c','freedreno_query.h','freedreno_query_acc.c','freedreno_query_acc.h','freedreno_query_hw.c','freedreno_query_hw.h','freedreno_query_sw.c','freedreno_query_sw.h','freedreno_resource.c','freedreno_resource.h','freedreno_screen.c','freedreno_screen.h','freedreno_state.c','freedreno_state.h','freedreno_surface.c','freedreno_surface.h','freedreno_texture.c','freedreno_texture.h','freedreno_util.c','freedreno_util.h','a2xx/fd2_blend.c','a2xx/fd2_blend.h','a2xx/fd2_context.c','a2xx/fd2_context.h','a2xx/fd2_draw.c','a2xx/fd2_draw.h','a2xx/fd2_emit.c','a2xx/fd2_emit.h','a2xx/fd2_gmem.c','a2xx/fd2_gmem.h','a2xx/fd2_program.c','a2xx/fd2_program.h','a2xx/fd2_query.c','a2xx/fd2_query.h','a2xx/fd2_rasterizer.c','a2xx/fd2_rasterizer.h','a2xx/fd2_resource.c','a2xx/fd2_resource.h','a2xx/fd2_screen.c','a2xx/fd2_screen.h','a2xx/fd2_texture.c','a2xx/fd2_texture.h','a2xx/fd2_util.c','a2xx/fd2_util.h','a2xx/fd2_zsa.c','a2xx/fd2_zsa.h','a2xx/ir2.c','a2xx/ir2.h','a2xx/ir2_assemble.c','a2xx/ir2_cp.c','a2xx/ir2_nir.c','a2xx/ir2_private.h','a2xx/ir2_ra.c','a3xx/fd3_blend.c','a3xx/fd3_blend.h','a3xx/fd3_context.c','a3xx/fd3_context.h','a3xx/fd3_draw.c','a3xx/fd3_draw.h','a3xx/fd3_emit.c','a3xx/fd3_emit.h','a3xx/fd3_format.c','a3xx/fd3_format.h','a3xx/fd3_gmem.c','a3xx/fd3_gmem.h','a3xx/fd3_program.c','a3xx/fd3_program.h','a3xx/fd3_query.c','a3xx/fd3_query.h','a3xx/fd3_rasterizer.c','a3xx/fd3_rasterizer.h','a3xx/fd3_resource.c','a3xx/fd3_resource.h','a3xx/fd3_screen.c','a3xx/fd3_screen.h','a3xx/fd3_texture.c','a3xx/fd3_texture.h','a3xx/fd3_zsa.c','a3xx/fd3_zsa.h','a4xx/fd4_blend.c','a4xx/fd4_blend.h','a4xx/fd4_compute.c','a4xx/fd4_compute.h','a4xx/fd4_context.c','a4xx/fd4_context.h','a4xx/fd4_draw.c','a4xx/fd4_draw.h','a4xx/fd4_emit.c','a4xx/fd4_emit.h','a4xx/fd4_format.c','a4xx/fd4_format.h','a4xx/fd4_gmem.c','a4xx/fd4_gmem.h','a4xx/fd4_image.c','a4xx/fd4_image.h','a4xx/fd4_program.c','a4xx/fd4_program.h','a4xx/fd4_query.c','a4xx/fd4_query.h','a4xx/fd4_rasterizer.c','a4xx/fd4_rasterizer.h','a4xx/fd4_resource.c','a4xx/fd4_resource.h','a4xx/fd4_screen.c','a4xx/fd4_screen.h','a4xx/fd4_texture.c','a4xx/fd4_texture.h','a4xx/fd4_zsa.c','a4xx/fd4_zsa.h','a5xx/fd5_blend.c','a5xx/fd5_blend.h','a5xx/fd5_blitter.c','a5xx/fd5_blitter.h','a5xx/fd5_compute.c','a5xx/fd5_compute.h','a5xx/fd5_context.c','a5xx/fd5_context.h','a5xx/fd5_draw.c','a5xx/fd5_draw.h','a5xx/fd5_emit.c','a5xx/fd5_emit.h','a5xx/fd5_format.c','a5xx/fd5_format.h','a5xx/fd5_gmem.c','a5xx/fd5_gmem.h','a5xx/fd5_image.c','a5xx/fd5_image.h','a5xx/fd5_program.c','a5xx/fd5_program.h','a5xx/fd5_query.c','a5xx/fd5_query.h','a5xx/fd5_rasterizer.c','a5xx/fd5_rasterizer.h','a5xx/fd5_resource.c','a5xx/fd5_resource.h','a5xx/fd5_screen.c','a5xx/fd5_screen.h','a5xx/fd5_texture.c','a5xx/fd5_texture.h','a5xx/fd5_zsa.c','a5xx/fd5_zsa.h','a6xx/fd6_barrier.cc','a6xx/fd6_barrier.h','a6xx/fd6_blend.cc','a6xx/fd6_blend.h','a6xx/fd6_blitter.cc','a6xx/fd6_blitter.h','a6xx/fd6_compute.cc','a6xx/fd6_compute.h','a6xx/fd6_const.cc','a6xx/fd6_const.h','a6xx/fd6_context.cc','a6xx/fd6_context.h','a6xx/fd6_draw.cc','a6xx/fd6_draw.h','a6xx/fd6_emit.cc','a6xx/fd6_emit.h','a6xx/fd6_gmem.cc','a6xx/fd6_gmem.h','a6xx/fd6_image.cc','a6xx/fd6_image.h','a6xx/fd6_program.cc','a6xx/fd6_program.h','a6xx/fd6_query.cc','a6xx/fd6_query.h','a6xx/fd6_rasterizer.cc','a6xx/fd6_rasterizer.h','a6xx/fd6_resource.cc','a6xx/fd6_resource.h','a6xx/fd6_screen.cc','a6xx/fd6_screen.h','a6xx/fd6_texture.cc','a6xx/fd6_texture.h','a6xx/fd6_vsc.cc','a6xx/fd6_vsc.h','a6xx/fd6_zsa.cc','a6xx/fd6_zsa.h','ir3/ir3_cache.c','ir3/ir3_cache.h','ir3/ir3_const.h','ir3/ir3_descriptor.c','ir3/ir3_descriptor.h','ir3/ir3_gallium.c','ir3/ir3_gallium.h',)
+    
+    freedreno_tracepoints=custom_target('freedreno_tracepoints.[ch]',input='freedreno_tracepoints.py',output=['freedreno_tracepoints.c','freedreno_tracepoints.h'],command=[prog_python,'@INPUT@','-p',join_paths(dir_source_root,'src/util/perf/'),'-C','@OUTPUT0@','-H','@OUTPUT1@',],depend_files=u_trace_py,)
+    
+    files_libfreedreno+=freedreno_tracepoints
+    
+    freedreno_includes=[inc_mesa,inc_mapi,inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_freedreno,include_directories('ir3'),]
+    
+    freedreno_c_args=[no_override_init_args]
+    freedreno_c_args+=cc.get_supported_arguments(['-Wno-packed-bitfield-compat','-Wno-array-bounds',])
+    
+    freedreno_cpp_args=[]
+    freedreno_cpp_args+=cpp.get_supported_arguments(['-fno-exceptions','-fno-rtti','-Wno-packed-bitfield-compat','-Wno-c99-designator','-Wno-reorder-init-list','-Wno-address-of-temporary','-Wno-c++11-narrowing','-Wno-narrowing','-Wno-sign-compare','-Wno-missing-field-initializers','-Wno-reorder','-Wno-array-bounds','-Wno-overflow','-Wno-c++11-narrowing',])# HACK compiler.get_supported_arguments()/has_argument() do not seem
+    # to be reliable for cross builds (!?!) so just jam in some args we
+    # need and hope for the best
+    if meson.is_cross_build():
+      freedreno_cpp_args += ['-Wno-array-bounds'] if isinstance(freedreno_cpp_args, list) else '-Wno-array-bounds'
+      freedreno_cpp_args += ['-Wno-c++11-narrowing'] if isinstance(freedreno_cpp_args, list) else '-Wno-c++11-narrowing'
+      freedreno_cpp_args += ['-Wno-c99-designator'] if isinstance(freedreno_cpp_args, list) else '-Wno-c99-designator'
+    
+    
+    libfreedreno_dependencies=[dep_libdrm,idep_mesautil,idep_nir_headers,idep_libfreedreno_common,idep_u_tracepoints,]
+    
+    if with_perfetto:
+      libfreedreno_dependencies+=dep_perfetto
+      files_libfreedreno += ['freedreno_perfetto.cc'] if isinstance(files_libfreedreno, list) else 'freedreno_perfetto.cc'
+    # The header file ends up part of the build (but just a stub)
+    # in either case:
+    files_libfreedreno += ['freedreno_perfetto.h'] if isinstance(files_libfreedreno, list) else 'freedreno_perfetto.h'
+    
+    libfreedreno=static_library('freedreno',[files_libfreedreno,freedreno_xml_header_files],include_directories=freedreno_includes,c_args=[freedreno_c_args],cpp_args=[freedreno_cpp_args],gnu_symbol_visibility='hidden',dependencies=libfreedreno_dependencies,)
+    
+    driver_freedreno=declare_dependency(compile_args='-DGALLIUM_FREEDRENO',link_with=[libfreedrenowinsys,libfreedreno,libfreedreno_drm,libfreedreno_ir2,libfreedreno_ir3,libfreedreno_layout,libfreedreno_perfcntrs],dependencies=[idep_nir,idep_xmlconfig,],)
+    
+    ir3_compiler=executable('ir3_compiler',['ir3/ir3_cmdline.c',freedreno_xml_header_files],include_directories=freedreno_includes,dependencies=[idep_nir,idep_vtn,idep_mesautil,],link_with=[libfreedreno,libfreedreno_drm,libfreedreno_ir3,libfreedreno_layout,libgallium,libglsl_standalone,],build_by_default=with_tools.count('freedreno') > 0,install=False,)
+    
+    gmemtool=executable('gmemtool',['gmemtool.c',freedreno_tracepoints[1]],include_directories=freedreno_includes,dependencies=[idep_nir,idep_mesautil,idep_u_tracepoints,idep_xmlconfig,],link_with=[libfreedreno,libfreedreno_drm,libfreedreno_ir2,libfreedreno_ir3,libfreedreno_layout,libgallium,libglsl_standalone,libfreedreno_perfcntrs,],build_by_default=with_tools.count('freedreno') > 0,install=False,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/freedreno/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_freedreno=declare_dependency()
+  
+  if with_gallium_vc4:
+    set_relative_dir('src/gallium/winsys/vc4/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/vc4/drm/meson.build
+    ########################################################################################################################
+    dep_simpenrose=dependency('simpenrose',required=False)
+    
+    vc4_winsys_c_args=[]
+    if with_gallium_kmsro:
+      vc4_winsys_c_args += ['-DGALLIUM_KMSRO'] if isinstance(vc4_winsys_c_args, list) else '-DGALLIUM_KMSRO'
+    
+    
+    if dep_simpenrose.found():
+      vc4_winsys_c_args += ['-DUSE_VC4_SIMULATOR'] if isinstance(vc4_winsys_c_args, list) else '-DUSE_VC4_SIMULATOR'
+    
+    
+    libvc4winsys=static_library('vc4winsys',files('vc4_drm_winsys.c'),dependencies=idep_mesautil,include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_gallium_winsys,],c_args=[vc4_winsys_c_args],gnu_symbol_visibility='hidden',)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/vc4/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/vc4')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/vc4/meson.build
+    ########################################################################################################################
+    files_libvc4=files('kernel/vc4_drv.h','kernel/vc4_gem.c','kernel/vc4_packet.h','kernel/vc4_render_cl.c','kernel/vc4_validate.c','kernel/vc4_validate_shaders.c','vc4_blit.c','vc4_bufmgr.c','vc4_bufmgr.h','vc4_cl.c','vc4_cl_dump.c','vc4_cl_dump.h','vc4_cl.h','vc4_context.c','vc4_context.h','vc4_draw.c','vc4_emit.c','vc4_fence.c','vc4_formats.c','vc4_job.c','vc4_nir_lower_blend.c','vc4_nir_lower_io.c','vc4_nir_lower_txf_ms.c','vc4_opt_algebraic.c','vc4_opt_constant_folding.c','vc4_opt_copy_propagation.c','vc4_opt_dead_code.c','vc4_opt_peephole_sf.c','vc4_opt_small_immediates.c','vc4_opt_vpm.c','vc4_opt_coalesce_ff_writes.c','vc4_program.c','vc4_qir.c','vc4_qir_emit_uniform_stream_resets.c','vc4_qir_live_variables.c','vc4_qir_lower_uniforms.c','vc4_qir_schedule.c','vc4_qir_validate.c','vc4_qir.h','vc4_qpu.c','vc4_qpu_defines.h','vc4_qpu_disasm.c','vc4_qpu_emit.c','vc4_qpu.h','vc4_qpu_schedule.c','vc4_qpu_validate.c','vc4_query.c','vc4_register_allocate.c','vc4_reorder_uniforms.c','vc4_resource.c','vc4_resource.h','vc4_screen.c','vc4_screen.h','vc4_simulator.c','vc4_simulator_validate.h','vc4_state.c','vc4_tiling.c','vc4_tiling_lt.c','vc4_tiling.h','vc4_uniforms.c',)
+    
+    vc4_c_args=[]
+    
+    libvc4_neon=[]
+    if host_machine.cpu_family()=='arm':
+      libvc4_neon=static_library('vc4_neon','vc4_tiling_lt_neon.c',include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_broadcom],c_args='-mfpu=neon',)
+      vc4_c_args += ['-DUSE_ARM_ASM'] if isinstance(vc4_c_args, list) else '-DUSE_ARM_ASM'
+    
+    
+    if dep_simpenrose.found():
+      vc4_c_args += ['-DUSE_VC4_SIMULATOR'] if isinstance(vc4_c_args, list) else '-DUSE_VC4_SIMULATOR'
+    
+    
+    libvc4=static_library('vc4',[files_libvc4,v3d_xml_pack],include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_broadcom,inc_gallium_drivers,],link_with=libvc4_neon,c_args=[vc4_c_args],gnu_symbol_visibility='hidden',dependencies=[dep_simpenrose,dep_libdrm,dep_valgrind,idep_nir_headers,idep_mesautil,],build_by_default=False,)
+    
+    driver_vc4=declare_dependency(compile_args='-DGALLIUM_VC4',link_with=[libvc4,libvc4winsys,libbroadcom_cle,libbroadcom_v3d],dependencies=idep_nir,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/vc4/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_vc4=declare_dependency()
+  
+  if with_gallium_panfrost:
+    set_relative_dir('src/gallium/winsys/panfrost/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/panfrost/drm/meson.build
+    ########################################################################################################################
+    libpanfrostwinsys=static_library('panfrostwinsys',files('panfrost_drm_winsys.c'),include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,idep_mesautil],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/panfrost/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/panfrost')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/panfrost/meson.build
+    ########################################################################################################################
+    files_panfrost=files('driinfo_panfrost.h','pan_afbc_cso.c','pan_bo.c','pan_device.c','pan_disk_cache.c','pan_fence.c','pan_helpers.c','pan_public.h','pan_screen.c','pan_screen.h','pan_resource.c','pan_resource.h','pan_context.c','pan_blit.c','pan_job.c','pan_shader.c','pan_mempool.c','pan_mempool.h','pan_nir_remove_fragcolor_stores.c','pan_nir_lower_sysvals.c','pan_nir_lower_res_indices.c',)
+    
+    panfrost_includes=[inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_include,inc_src,inc_panfrost,]
+    
+    compile_args_panfrost=['-DGALLIUM_PANFROST','-Wno-pointer-arith']
+    
+    panfrost_versions=['4','5','6','7','9','10']
+    libpanfrost_versions=[]
+    
+    for ver in panfrost_versions:
+      files_panfrost_vx=['pan_cmdstream.c',pan_packers]
+      if ver in ['4','5','6','7','9']:
+        files_panfrost_vx+=['pan_jm.c']
+      elif ver in ['10']:
+        files_panfrost_vx+=['pan_csf.c']
+    
+      libpanfrost_versions+=static_library('panfrost-v'+ver,files_panfrost_vx,include_directories=panfrost_includes,c_args=['-DPAN_ARCH='+ver],gnu_symbol_visibility='hidden',dependencies=[idep_pan_packers,idep_nir,dep_libdrm],)
+    
+    
+    libpanfrost=static_library('panfrost',files_panfrost,dependencies=[dep_thread,dep_libdrm,idep_mesautil,idep_nir,idep_pan_packers],include_directories=panfrost_includes,c_args=[c_msvc_compat_args,compile_args_panfrost],gnu_symbol_visibility='hidden',link_with=[libpanfrost_versions],)
+    
+    driver_panfrost=declare_dependency(compile_args=compile_args_panfrost,link_with=[libpanfrost,libpanfrostwinsys,libpanfrost_shared,libpanfrost_midgard,libpanfrost_bifrost,libpanfrost_decode,libpanfrost_lib],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/panfrost/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_panfrost=declare_dependency()
+  
+  if with_gallium_etnaviv:
+    set_relative_dir('src/gallium/winsys/etnaviv/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/etnaviv/drm/meson.build
+    ########################################################################################################################
+    libetnavivdrm=static_library('etnavivdrm','etnaviv_drm_winsys.c',include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_etnaviv,],link_with=libetnaviv_drm,dependencies=[dep_libdrm,idep_nir_headers,idep_mesautil,idep_etna_common],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/etnaviv/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/etnaviv')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/etnaviv/meson.build
+    ########################################################################################################################
+    files_etnaviv=files('etnaviv_asm.c','etnaviv_asm.h','etnaviv_blend.c','etnaviv_blend.h','etnaviv_blt.c','etnaviv_blt.h','etnaviv_clear_blit.c','etnaviv_clear_blit.h','etnaviv_compiler.c','etnaviv_compiler.h','etnaviv_compiler_nir.c','etnaviv_compiler_nir_emit.c','etnaviv_compiler_nir_liveness.c','etnaviv_compiler_nir_ra.c','etnaviv_context.c','etnaviv_context.h','etnaviv_debug.h','etnaviv_disasm.c','etnaviv_disasm.h','etnaviv_disk_cache.c','etnaviv_disk_cache.h','etnaviv_emit.c','etnaviv_emit.h','etnaviv_etc2.c','etnaviv_etc2.h','etnaviv_fence.c','etnaviv_fence.h','etnaviv_format.c','etnaviv_format.h','etnaviv_internal.h','etnaviv_ml.c','etnaviv_ml.h','etnaviv_ml_nn.c','etnaviv_ml_nn.h','etnaviv_ml_tp.c','etnaviv_ml_tp.h','etnaviv_nir_lower_source_mods.c','etnaviv_nir_lower_texture.c','etnaviv_nir_lower_ubo_to_uniform.c','etnaviv_nir.c','etnaviv_nir.h','etnaviv_perfmon.c','etnaviv_perfmon.h','etnaviv_query.c','etnaviv_query.h','etnaviv_query_acc_occlusion.c','etnaviv_query_acc_perfmon.c','etnaviv_query_acc.c','etnaviv_query_acc.h','etnaviv_query_sw.c','etnaviv_query_sw.h','etnaviv_rasterizer.c','etnaviv_rasterizer.h','etnaviv_resource.c','etnaviv_resource.h','etnaviv_rs.c','etnaviv_rs.h','etnaviv_screen.c','etnaviv_screen.h','etnaviv_shader.c','etnaviv_shader.h','etnaviv_state.c','etnaviv_state.h','etnaviv_surface.c','etnaviv_surface.h','etnaviv_texture.c','etnaviv_texture.h','etnaviv_texture_desc.c','etnaviv_texture_desc.h','etnaviv_texture_state.c','etnaviv_texture_state.h','etnaviv_tiling.c','etnaviv_tiling.h','etnaviv_transfer.c','etnaviv_transfer.h','etnaviv_translate.h','etnaviv_uniforms.c','etnaviv_uniforms.h','etnaviv_util.h','etnaviv_zsa.c','etnaviv_zsa.h',)
+    
+    libetnaviv=static_library('etnaviv',files_etnaviv,enums_h,gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_etnaviv,],link_with=[libetnaviv_drm,libetnaviv_encode],dependencies=[dep_libdrm,idep_nir_headers,idep_mesautil,idep_libetnaviv_decode,idep_etna_common],)
+    
+    driver_etnaviv=declare_dependency(compile_args='-DGALLIUM_ETNAVIV',link_with=[libetnaviv,libetnavivdrm],dependencies=idep_nir,)
+    
+    if with_tests:
+      test('lower_ubo',executable('nir_lower_ubo_test',files('tests/lower_ubo_tests.cpp'),cpp_args=[cpp_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_gallium],link_with=[libetnaviv],dependencies=[idep_gtest,idep_nir],),suite=['compiler','etnaviv'],protocol='gtest',)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/etnaviv/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_etnaviv=declare_dependency()
+  
+  if with_gallium_kmsro:
+    set_relative_dir('src/gallium/winsys/kmsro/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/kmsro/drm/meson.build
+    ########################################################################################################################
+    libkmsrowinsys=static_library('kmsrowinsys',files('kmsro_drm_winsys.c'),include_directories=[inc_src,inc_include,inc_loader,inc_gallium,inc_gallium_aux,inc_gallium_winsys,],link_with=libloader,c_args=[renderonly_drivers_c_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,idep_mesautil],)
+    
+    driver_kmsro=declare_dependency(compile_args='-DGALLIUM_KMSRO',link_with=libkmsrowinsys,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/kmsro/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_kmsro=declare_dependency()
+  
+  if with_gallium_v3d:
+    set_relative_dir('src/gallium/winsys/v3d/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/v3d/drm/meson.build
+    ########################################################################################################################
+    libv3dwinsys=static_library('v3dwinsys',files('v3d_drm_winsys.c'),include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,],gnu_symbol_visibility='hidden',dependencies=idep_mesautil,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/v3d/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/v3d')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/v3d/meson.build
+    ########################################################################################################################
+    files_libv3d=files('v3d_blit.c','v3d_bufmgr.c','v3d_bufmgr.h','v3d_cl.c','v3d_cl.h','v3d_context.c','v3d_context.h','v3d_disk_cache.c','v3d_fence.c','v3d_formats.c','v3d_job.c','v3d_program.c','v3d_query.c','v3d_query.h','v3d_query_pipe.c','v3d_resource.c','v3d_resource.h','v3d_screen.c','v3d_screen.h','v3d_uniforms.c',)
+    
+    files_per_version=files('v3dx_draw.c','v3dx_emit.c','v3dx_format_table.c','v3dx_job.c','v3dx_query_perfcnt.c','v3dx_rcl.c','v3dx_state.c','v3dx_tfu.c',)
+    
+    v3d_args=['-DV3D_BUILD_NEON']
+    
+    dep_v3d_hw=dependency('v3d_hw',required=False)
+    if dep_v3d_hw.found():
+      v3d_args += ['-DUSE_V3D_SIMULATOR'] if isinstance(v3d_args, list) else '-DUSE_V3D_SIMULATOR'
+    
+    
+    v3d_versions=['42','71']
+    
+    per_version_libs=[]
+    for ver in v3d_versions:
+      per_version_libs+=static_library('v3d-v'+ver,[files_per_version,v3d_xml_pack],include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_broadcom,inc_gallium_drivers,],c_args=[v3d_args,'-DV3D_VERSION='+ver],gnu_symbol_visibility='hidden',dependencies=[dep_v3d_hw,dep_libdrm,dep_valgrind,idep_nir_headers],)
+    
+    
+    
+    libv3d=static_library('v3d',[files_libv3d,v3d_xml_pack,],include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_broadcom,inc_simulator,inc_gallium_drivers,],c_args=[v3d_args],cpp_args=[v3d_args],gnu_symbol_visibility='hidden',dependencies=[dep_v3d_hw,dep_libdrm,dep_valgrind,idep_nir_headers,idep_mesautil,],link_with=[per_version_libs],)
+    
+    driver_v3d=declare_dependency(compile_args='-DGALLIUM_V3D',link_with=[libv3d,libv3dwinsys,libbroadcom_cle,libbroadcom_v3d],dependencies=idep_nir,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/v3d/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_v3d=declare_dependency()
+  
+  if with_gallium_tegra:
+    set_relative_dir('src/gallium/winsys/tegra/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/tegra/drm/meson.build
+    ########################################################################################################################
+    libtegradrm=static_library('tegradrm','tegra_drm_winsys.c',include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_gallium_winsys],dependencies=idep_mesautil,)
+    
+    driver_tegra=declare_dependency(compile_args='-DGALLIUM_TEGRA',link_with=libtegradrm,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/tegra/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/tegra')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/tegra/meson.build
+    ########################################################################################################################
+    files_tegra=files('tegra_context.c','tegra_context.h','tegra_resource.h','tegra_screen.c',)
+    
+    libtegra=static_library('tegra',files_tegra,gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_gallium_winsys,],dependencies=[dep_libdrm,idep_mesautil],)
+    
+    driver_tegra=declare_dependency(compile_args='-DGALLIUM_TEGRA',link_with=[libtegra,libtegradrm],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/tegra/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_tegra=declare_dependency()
+  
+  if with_gallium_crocus:
+    set_relative_dir('src/gallium/winsys/crocus/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/crocus/drm/meson.build
+    ########################################################################################################################
+    libcrocuswinsys=static_library('crocuswinsys',files('crocus_drm_winsys.c'),include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,],gnu_symbol_visibility='hidden',dependencies=[dep_valgrind,idep_intel_dev],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/crocus/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/crocus')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/crocus/meson.build
+    ########################################################################################################################
+    files_libcrocus=files('gen4_blorp_exec.h','driinfo_crocus.h','crocus_batch.c','crocus_batch.h','crocus_blit.c','crocus_bufmgr.c','crocus_bufmgr.h','crocus_clear.c','crocus_context.c','crocus_context.h','crocus_draw.c','crocus_fence.c','crocus_fence.h','crocus_fine_fence.c','crocus_fine_fence.h','crocus_formats.c','crocus_genx_macros.h','crocus_genx_protos.h','crocus_monitor.c','crocus_perf.c','crocus_perf.h','crocus_performance_query.c','crocus_pipe.h','crocus_pipe_control.c','crocus_program.c','crocus_program_cache.c','crocus_resolve.c','crocus_resource.c','crocus_resource.h','crocus_screen.c','crocus_screen.h','crocus_disk_cache.c',)
+    
+    crocus_per_hw_ver_libs=[]
+    for v in ['40','45','50','60','70','75','80']:
+      crocus_per_hw_ver_libs+=static_library('crocus_per_hw_ver{}'.format(v),['crocus_blorp.c','crocus_query.c','crocus_state.c','crocus_blt.c',gen_xml_pack],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_intel],c_args=[no_override_init_args,sse2_args,'-DGFX_VERx10={}'.format(v),],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,idep_genxml,idep_nir_headers,idep_intel_dev,idep_intel_blorp_elk],)
+    
+    
+    libcrocus=static_library('crocus',[files_libcrocus,gen_xml_pack],include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_intel,inc_gallium_drivers,inc_mesa,inc_mapi],c_args=[sse2_args],cpp_args=[sse2_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,idep_genxml,idep_libintel_common,idep_nir_headers,idep_intel_dev,idep_intel_blorp_elk,idep_intel_decoder_elk,idep_intel_compiler_elk,],link_with=[crocus_per_hw_ver_libs,libisl,libintel_perf],)
+    
+    driver_crocus=declare_dependency(compile_args='-DGALLIUM_CROCUS',link_with=[libcrocus,libcrocuswinsys],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/crocus/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_crocus=declare_dependency()
+  
+  if with_gallium_iris:
+    set_relative_dir('src/gallium/winsys/iris/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/iris/drm/meson.build
+    ########################################################################################################################
+    libiriswinsys=static_library('iriswinsys',files('iris_drm_winsys.c'),include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,],gnu_symbol_visibility='hidden',)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/iris/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/iris')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/iris/meson.build
+    ########################################################################################################################
+    files_libiris=files('i915/iris_batch.c','i915/iris_batch.h','i915/iris_bufmgr.c','i915/iris_bufmgr.h','i915/iris_kmd_backend.c','xe/iris_batch.c','xe/iris_batch.h','xe/iris_bufmgr.c','xe/iris_bufmgr.h','xe/iris_kmd_backend.c','driinfo_iris.h','iris_batch.c','iris_batch.h','iris_binder.c','iris_binder.h','iris_blit.c','iris_border_color.c','iris_bufmgr.c','iris_bufmgr.h','iris_clear.c','iris_context.c','iris_context.h','iris_draw.c','iris_fence.c','iris_fence.h','iris_fine_fence.c','iris_fine_fence.h','iris_formats.c','iris_genx_macros.h','iris_genx_protos.h','iris_kmd_backend.c','iris_kmd_backend.h','iris_measure.c','iris_measure.h','iris_monitor.c','iris_perf.h','iris_perf.c','iris_performance_query.c','iris_pipe.h','iris_pipe_control.c','iris_program.c','iris_program_cache.c','iris_resolve.c','iris_resource.c','iris_resource.h','iris_screen.c','iris_screen.h','iris_disk_cache.c','iris_utrace.c',)
+    
+    iris_per_hw_ver_libs=[]
+    for v in ['80','90','110','120','125','200']:
+      iris_per_hw_ver_libs+=static_library('iris_per_hw_ver{}'.format(v),['iris_blorp.c','iris_query.c','iris_state.c','iris_indirect_gen.c',gen_xml_pack],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_intel],c_args=[no_override_init_args,sse2_args,'-DGFX_VERx10={}'.format(v),],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,idep_genxml,idep_nir_headers,idep_intel_driver_ds_headers,idep_intel_shaders,idep_intel_blorp],)
+    
+    
+    libiris=static_library('iris',[files_libiris,gen_xml_pack],include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_intel,inc_gallium_drivers,inc_mesa,inc_mapi],c_args=[sse2_args],cpp_args=[sse2_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,dep_valgrind,idep_genxml,idep_nir_headers,idep_libintel_common,idep_intel_driver_ds,idep_intel_dev,idep_intel_blorp_elk,idep_intel_decoder_elk,idep_intel_blorp,idep_intel_decoder_brw,idep_intel_compiler_elk,idep_intel_compiler_brw],link_with=[iris_per_hw_ver_libs,libisl,libintel_perf],)
+    
+    driver_iris=declare_dependency(compile_args='-DGALLIUM_IRIS',link_with=[libiris,libiriswinsys],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/iris/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_iris=declare_dependency()
+  
+  if with_gallium_i915:
+    set_relative_dir('src/gallium/winsys/i915/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/i915/drm/meson.build
+    ########################################################################################################################
+    libi915drm=static_library('i915drm',files('i915_drm_batchbuffer.c','i915_drm_buffer.c','i915_drm_fence.c','i915_drm_winsys.c'),include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_gallium_drivers],link_with=[libintel_common],dependencies=[dep_libdrm,dep_libdrm_intel,idep_intel_dev_wa],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/i915/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/i915')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/i915/meson.build
+    ########################################################################################################################
+    files_i915=files('i915_batchbuffer.h','i915_batch.h','i915_blit.c','i915_blit.h','i915_clear.c','i915_context.c','i915_context.h','i915_debug.c','i915_debug_fp.c','i915_debug.h','i915_debug_private.h','i915_flush.c','i915_fpc_emit.c','i915_fpc.h','i915_fpc_optimize.c','i915_fpc_translate.c','i915_prim_emit.c','i915_prim_vbuf.c','i915_public.h','i915_query.c','i915_query.h','i915_reg.h','i915_resource_buffer.c','i915_resource.c','i915_resource.h','i915_resource_texture.c','i915_screen.c','i915_screen.h','i915_state.c','i915_state_derived.c','i915_state_dynamic.c','i915_state_emit.c','i915_state_fpc.c','i915_state.h','i915_state_immediate.c','i915_state_inlines.h','i915_state_sampler.c','i915_state_static.c','i915_surface.c','i915_surface.h','i915_winsys.h',)
+    
+    libi915=static_library('i915',files_i915,gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux],dependencies=idep_nir,)
+    
+    driver_i915=declare_dependency(compile_args='-DGALLIUM_I915',link_with=[libi915,libi915drm],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/i915/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_i915=declare_dependency()
+  
+  if with_gallium_svga:
+    if not with_platform_windows:
+      set_relative_dir('src/gallium/winsys/svga/drm')
+      ########################################################################################################################
+      ### Begin conversion from: src/gallium/winsys/svga/drm/meson.build
+      ########################################################################################################################
+      files_svgadrm=files('pb_buffer_simple_fenced.c','vmw_buffer.c','vmw_context.c','vmw_fence.c','vmw_msg.c','vmw_screen.c','vmw_screen_dri.c','vmw_screen_ioctl.c','vmw_screen_pools.c','vmw_screen_svga.c','vmw_surface.c','vmw_shader.c','vmw_query.c',)
+      
+      libsvgadrm=static_library('svgadrm',files_svgadrm,c_args=[c_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,include_directories('../../../drivers/svga','../../../drivers/svga/include'),],dependencies=[dep_libdrm,idep_mesautil],)
+      
+      ########################################################################################################################
+      ### End conversion from: src/gallium/winsys/svga/drm/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/gallium')
+  
+    set_relative_dir('src/gallium/drivers/svga')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/svga/meson.build
+    ########################################################################################################################
+    files_svga=files('svga_cmd.c','svga_cmd_vgpu10.c','svga_context.c','svga_draw_arrays.c','svga_draw.c','svga_draw_elements.c','svga_format.c','svga_image_view.c','svga_link.c','svga_pipe_blend.c','svga_pipe_blit.c','svga_pipe_clear.c','svga_pipe_constants.c','svga_pipe_cs.c','svga_pipe_depthstencil.c','svga_pipe_draw.c','svga_pipe_flush.c','svga_pipe_fs.c','svga_pipe_gs.c','svga_pipe_ts.c','svga_pipe_misc.c','svga_pipe_query.c','svga_pipe_rasterizer.c','svga_pipe_sampler.c','svga_pipe_streamout.c','svga_pipe_vertex.c','svga_pipe_vs.c','svga_resource_buffer.c','svga_resource_buffer_upload.c','svga_resource.c','svga_resource_texture.c','svga_sampler_view.c','svga_screen.c','svga_screen_cache.c','svga_shader.c','svga_shader_buffer.c','svga_state.c','svga_state_constants.c','svga_state_cs.c','svga_state_framebuffer.c','svga_state_fs.c','svga_state_gs.c','svga_state_ts.c','svga_state_need_swtnl.c','svga_state_rss.c','svga_state_sampler.c','svga_state_tgsi_transform.c','svga_state_tss.c','svga_state_uav.c','svga_state_vdecl.c','svga_state_vs.c','svga_surface.c','svga_swtnl_backend.c','svga_swtnl_draw.c','svga_swtnl_state.c','svga_tgsi.c','svga_tgsi_decl_sm30.c','svga_tgsi_insn.c','svga_tgsi_vgpu10.c','svgadump/svga_dump.c','svgadump/svga_shader_dump.c','svgadump/svga_shader_op.c',)
+    
+    libsvga=static_library('svga',[files_svga,sha1_h],c_args=[c_msvc_compat_args],gnu_symbol_visibility='hidden',include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,include_directories('include')],link_with=[libglsl],dependencies=[idep_mesautil,idep_nir],)
+    
+    svga_deps=[libsvga]
+    if not with_platform_windows:
+      svga_deps+=libsvgadrm
+    
+    
+    driver_svga=declare_dependency(compile_args='-DGALLIUM_VMWGFX',link_with=svga_deps,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/svga/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_svga=declare_dependency()
+  
+  if with_gallium_virgl:
+    set_relative_dir('src/gallium/winsys/virgl/common')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/virgl/common/meson.build
+    ########################################################################################################################
+    libvirglcommon=static_library('virglcommon','virgl_resource_cache.c',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_gallium_drivers],gnu_symbol_visibility='hidden',)
+    
+    dep_libvirglcommon=declare_dependency(link_with=libvirglcommon,include_directories=include_directories('.'),)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/virgl/common/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    if not with_platform_windows:
+      set_relative_dir('src/gallium/winsys/virgl/drm')
+      ########################################################################################################################
+      ### Begin conversion from: src/gallium/winsys/virgl/drm/meson.build
+      ########################################################################################################################
+      libvirgldrm=static_library('virgldrm','virgl_drm_winsys.c',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_virtio],dependencies=[dep_libdrm,dep_libvirglcommon,idep_mesautil,idep_nir_headers],gnu_symbol_visibility='hidden',)
+      
+      ########################################################################################################################
+      ### End conversion from: src/gallium/winsys/virgl/drm/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/gallium')
+      set_relative_dir('src/gallium/winsys/virgl/vtest')
+      ########################################################################################################################
+      ### Begin conversion from: src/gallium/winsys/virgl/vtest/meson.build
+      ########################################################################################################################
+      libvirglvtest=static_library('virglvtest',['virgl_vtest_socket.c','virgl_vtest_winsys.c'],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_virtio],dependencies=[dep_libvirglcommon,idep_mesautil],gnu_symbol_visibility='hidden',)
+      
+      ########################################################################################################################
+      ### End conversion from: src/gallium/winsys/virgl/vtest/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/gallium')
+  
+    set_relative_dir('src/gallium/drivers/virgl')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/virgl/meson.build
+    ########################################################################################################################
+    files_libvirgl=files('virgl_buffer.c','virgl_context.c','virgl_encode.c','virgl_query.c','virgl_resource.c','virgl_screen.c','virgl_staging_mgr.c','virgl_streamout.c','virgl_transfer_queue.c','virgl_texture.c','virgl_tgsi.c','virgl_video.c',)
+    
+    libvirgl=static_library('virgl',[files_libvirgl],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_virtio],dependencies=[dep_libdrm,idep_mesautil,idep_xmlconfig,idep_nir],)
+    
+    virgl_deps=[libvirgl]
+    if not with_platform_windows:
+      virgl_deps+=libvirgldrm
+      virgl_deps+=libvirglvtest
+    
+    
+    driver_virgl=declare_dependency(compile_args='-DGALLIUM_VIRGL',link_with=virgl_deps,)
+    
+    if with_tests:
+      set_relative_dir('src/gallium/drivers/virgl/tests')
+      ########################################################################################################################
+      ### Begin conversion from: src/gallium/drivers/virgl/tests/meson.build
+      ########################################################################################################################
+      test('virgl_staging_mgr',executable('virgl_staging_mgr_test',files('virgl_staging_mgr_test.cpp'),dependencies=[dep_thread,idep_gtest,idep_mesautil,idep_nir_headers],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_virtio,include_directories('..')],link_with=[libvirgl,libgallium],),suite=['virgl'],protocol='gtest',)
+      
+      ########################################################################################################################
+      ### End conversion from: src/gallium/drivers/virgl/tests/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/gallium/drivers/virgl')
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/virgl/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_virgl=declare_dependency()
+  
+  if with_gallium_lima:
+    set_relative_dir('src/gallium/winsys/lima/drm')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/lima/drm/meson.build
+    ########################################################################################################################
+    liblimawinsys=static_library('limawinsys',files('lima_drm_winsys.c'),include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,],dependencies=idep_mesautil,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/lima/drm/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/drivers/lima')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/lima/meson.build
+    ########################################################################################################################
+    files_lima=files('ir/gp/gpir.h','ir/gp/nir.c','ir/gp/node.c','ir/gp/lower.c','ir/gp/scheduler.c','ir/gp/instr.c','ir/gp/codegen.h','ir/gp/codegen.c','ir/gp/reduce_scheduler.c','ir/gp/regalloc.c','ir/gp/disasm.c','ir/gp/optimize.c','ir/pp/ppir.h','ir/pp/nir.c','ir/pp/node.c','ir/pp/lower.c','ir/pp/scheduler.c','ir/pp/instr.c','ir/pp/regalloc.c','ir/pp/liveness.c','ir/pp/codegen.h','ir/pp/codegen.c','ir/pp/node_to_instr.c','ir/pp/disasm.c','ir/lima_nir_duplicate_consts.c','ir/lima_nir_duplicate_intrinsic.c','ir/lima_nir_lower_uniform_to_scalar.c','ir/lima_nir_split_load_input.c','ir/lima_nir_split_loads.c','ir/lima_nir_lower_txp.c','ir/lima_ir.h','lima_screen.c','lima_screen.h','lima_context.c','lima_context.h','lima_resource.c','lima_resource.h','lima_state.c','lima_disk_cache.c','lima_disk_cache.h','lima_draw.c','lima_program.c','lima_query.c','lima_bo.c','lima_bo.h','lima_job.c','lima_job.h','lima_parser.c','lima_parser.h','lima_util.c','lima_util.h','lima_texture.c','lima_texture.h','lima_fence.c','lima_fence.h','lima_format.h','lima_format.c','lima_gpu.h','lima_blit.c','lima_blit.h',)
+    
+    lima_nir_algebraic_c=custom_target('lima_nir_algebraic.c',input='ir/lima_nir_algebraic.py',output='lima_nir_algebraic.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],capture=True,depend_files=nir_algebraic_depends,)
+    
+    liblima=static_library('lima',files_lima,lima_nir_algebraic_c,include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_panfrost],dependencies=[dep_libdrm,idep_nir_headers,idep_mesautil],)
+    
+    driver_lima=declare_dependency(compile_args='-DGALLIUM_LIMA',link_with=[liblima,liblimawinsys,libpanfrost_shared],dependencies=idep_nir,)
+    
+    lima_disasm=executable('lima_disasm',files('standalone/lima_disasm.c',),include_directories=[inc_src,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_mesa,inc_mapi,],dependencies=[idep_mesautil,],link_with=[liblima,libpanfrost_shared,],build_by_default=with_tools.count('lima') > 0,install=with_tools.count('lima') > 0,)
+    
+    if with_tools.count('drm-shim') > 0:
+      subdir('drm-shim')
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/lima/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_lima=declare_dependency()
+  
+  if with_gallium_zink:
+    set_relative_dir('src/gallium/drivers/zink')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/zink/meson.build
+    ########################################################################################################################
+    files_libzink=files('zink_lower_cubemap_to_array.c','nir_to_spirv/nir_to_spirv.c','nir_to_spirv/spirv_builder.c','zink_batch.c','zink_blit.c','zink_bo.c','zink_clear.c','zink_compiler.c','zink_context.c','zink_kopper.c','zink_descriptors.c','zink_draw.cpp','zink_fence.c','zink_format.c','zink_framebuffer.c','zink_pipeline.c','zink_program.c','zink_query.c','zink_render_pass.c','zink_resource.c','zink_screen.c','zink_state.c','zink_surface.c','zink_synchronization.cpp',)
+    
+    zink_device_info=custom_target('zink_device_info.c',input=['zink_device_info.py'],output=['zink_device_info.h','zink_device_info.c'],command=[prog_python,'@INPUT@','@OUTPUT@',vk_api_xml])
+    
+    zink_instance=custom_target('zink_instance.c',input=['zink_instance.py'],output=['zink_instance.h','zink_instance.c'],command=[prog_python,'@INPUT@','@OUTPUT@',vk_api_xml])
+    
+    zink_nir_algebraic_c=custom_target('zink_nir_algebraic.c',input='nir_to_spirv/zink_nir_algebraic.py',output='zink_nir_algebraic.c',command=[prog_python,'@INPUT@','-p',dir_compiler_nir,],capture=True,depend_files=nir_algebraic_depends,)
+    
+    zink_c_args=[]
+    inc_zink_vk=[]
+    
+    if host_machine.system()=='darwin':
+      if with_moltenvk_dir!='':
+        fs=module_import('fs')# Vulkan SDK 1.3.250 to 1.3.268 support
+        moltenvk_includes=join_paths(with_moltenvk_dir,'MoltenVK','include')
+        if not fs.is_dir(moltenvk_includes):
+          moltenvk_includes=join_paths(with_moltenvk_dir,'macos','include')
+          if not fs.is_dir(moltenvk_includes):
+            moltenvk_includes=join_paths(with_moltenvk_dir,'include')
+            if not fs.is_dir(moltenvk_includes):
+              error(f'moltenvk includes cannot be found in moltenvk-dir="{with_moltenvk_dir}"')
+    
+    
+    
+        inc_zink_vk+=include_directories(moltenvk_includes)
+      else:
+        error('moltenvk-dir is required but not set.')
+    
+    
+      zink_c_args+=['-x','objective-c']# Put compiler into objective-C mode to allow for MacOS types, like IOSurface and CAMetalLayer
+      zink_c_args+=['-iframework','Foundation']
+    
+    
+    
+    libzink=static_library('zink',[files_libzink,zink_device_info,zink_instance,zink_nir_algebraic_c,vk_dispatch_table],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_vulkan_util,inc_zink_vk],link_args=[ld_args_build_id],dependencies=[idep_nir_headers,idep_mesautil,idep_vulkan_util_headers,idep_vulkan_wsi_defines,idep_vulkan_util,dep_libdrm,vulkan_wsi_deps],c_args=zink_c_args,)
+    
+    driver_zink=declare_dependency(compile_args='-DGALLIUM_ZINK',link_with=[libzink],)
+    
+    if with_tests:
+      test('zink_format_test',executable('zink_format_test',['zink_format_test.c','zink_format.c'],dependencies=[idep_mesautil,idep_vulkan_util],include_directories=[inc_gallium,inc_gallium_aux,inc_include,inc_src],),suite=['zink'],)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/zink/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_zink=declare_dependency()
+  
+  if with_gallium_d3d12:
+    set_relative_dir('src/gallium/drivers/d3d12')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/drivers/d3d12/meson.build
+    ########################################################################################################################
+    libd3d12_compiler_args=[]
+    _with_gallium_d3d12_graphics=get_option('gallium-d3d12-graphics')
+    with_gallium_d3d12_graphics=False
+    if not _with_gallium_d3d12_graphics.disabled():
+      with_gallium_d3d12_graphics=True
+      libd3d12_compiler_args += ['-DHAVE_GALLIUM_D3D12_GRAPHICS'] if isinstance(libd3d12_compiler_args, list) else '-DHAVE_GALLIUM_D3D12_GRAPHICS'
+    
+    
+    if not with_gallium_d3d12_video and not with_gallium_d3d12_graphics:
+      error('d3d12 gallium driver must have at least one of gallium-d3d12-video or gallium-d3d12-graphics enabled.')
+    
+    
+    files_libd3d12=files('d3d12_batch.cpp','d3d12_copy.cpp','d3d12_bufmgr.cpp','d3d12_context_common.cpp','d3d12_fence.cpp','d3d12_format.c','d3d12_residency.cpp','d3d12_resource.cpp','d3d12_resource_state.cpp','d3d12_screen.cpp',)
+    
+    if with_gallium_d3d12_graphics:
+      files_libd3d12+=['d3d12_blit.cpp','d3d12_draw.cpp','d3d12_surface.cpp','d3d12_context_graphics.cpp','d3d12_cmd_signature.cpp','d3d12_compiler.cpp','d3d12_compute_transforms.cpp','d3d12_descriptor_pool.cpp','d3d12_nir_passes.c','d3d12_pipeline_state.cpp','d3d12_query.cpp','d3d12_root_signature.cpp','d3d12_gs_variant.cpp','d3d12_lower_image_casts.c','d3d12_lower_point_sprite.c','d3d12_tcs_variant.cpp',]
+    
+    
+    if with_gallium_d3d12_video:
+      files_libd3d12+=['d3d12_video_dec.cpp','d3d12_video_dec_references_mgr.cpp','d3d12_video_buffer.cpp','d3d12_video_enc.cpp','d3d12_video_encoder_bitstream.cpp','d3d12_video_texture_array_dpb_manager.cpp','d3d12_video_array_of_textures_dpb_manager.cpp','d3d12_video_screen.cpp','d3d12_video_proc.cpp',]
+    
+      if _codecs.count('h264dec') > 0:
+        files_libd3d12+=['d3d12_video_dec_h264.cpp',]
+    
+    
+      if _codecs.count('h265dec') > 0:
+        files_libd3d12+=['d3d12_video_dec_hevc.cpp',]
+    
+    
+      if _codecs.count('av1dec') > 0:
+        files_libd3d12+=['d3d12_video_dec_av1.cpp',]
+    
+    
+      if _codecs.count('vp9dec') > 0:
+        files_libd3d12+=['d3d12_video_dec_vp9.cpp',]
+    
+    
+      if _codecs.count('h264enc') > 0:
+        files_libd3d12+=['d3d12_video_enc_h264.cpp','d3d12_video_encoder_references_manager_h264.cpp','d3d12_video_encoder_nalu_writer_h264.cpp','d3d12_video_encoder_bitstream_builder_h264.cpp',]
+    
+    
+      if _codecs.count('h265enc') > 0:
+        files_libd3d12+=['d3d12_video_enc_hevc.cpp','d3d12_video_encoder_bitstream_builder_hevc.cpp','d3d12_video_encoder_nalu_writer_hevc.cpp','d3d12_video_encoder_references_manager_hevc.cpp',]
+    
+    
+      if _codecs.count('av1enc') > 0:
+        files_libd3d12+=['d3d12_video_enc_av1.cpp','d3d12_video_encoder_references_manager_av1.cpp','d3d12_video_encoder_bitstream_builder_av1.cpp',]
+    
+    
+    
+    is_xbox=target_machine.system().startswith('Gaming.Xbox')
+    if host_machine.system()=='windows':
+      if is_xbox:
+        files_libd3d12+=files('d3d12_dxgi_xbox_screen.cpp')
+      else:
+        files_libd3d12+=files('d3d12_dxgi_screen.cpp')
+    
+    
+    if is_xbox==False:
+      files_libd3d12+=files('d3d12_dxcore_screen.cpp')
+    
+    
+    libd3d12=static_library('d3d12',[files_libd3d12,sha1_h],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_mesa,inc_gallium,inc_gallium_aux],dependencies=[idep_nir_headers,idep_libdxil_compiler,dep_dxheaders],c_args=libd3d12_compiler_args,cpp_args=libd3d12_compiler_args,)
+    
+    driver_d3d12=declare_dependency(compile_args='-DGALLIUM_D3D12',link_with=[libd3d12],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/drivers/d3d12/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  else:
+    driver_d3d12=declare_dependency()
+  
+  if with_gallium_clover or with_tests:
+    subdir('targets/pipe-loader')
+  
+  if with_gallium_clover:
+    set_relative_dir('src/gallium/frontends/clover')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/clover/meson.build
+    ########################################################################################################################
+    clover_cpp_args=[]
+    clover_opencl_cpp_args=['-DCL_TARGET_OPENCL_VERSION=300','-DCL_USE_DEPRECATED_OPENCL_1_0_APIS','-DCL_USE_DEPRECATED_OPENCL_1_1_APIS','-DCL_USE_DEPRECATED_OPENCL_1_2_APIS','-DCL_USE_DEPRECATED_OPENCL_2_0_APIS','-DCL_USE_DEPRECATED_OPENCL_2_1_APIS','-DCL_USE_DEPRECATED_OPENCL_2_2_APIS','-DLIBCLC_INCLUDEDIR="{}/"'.format(dep_clc.get_variable(pkgconfig='includedir')),'-DLIBCLC_LIBEXECDIR="{}/"'.format(dep_clc.get_variable(pkgconfig='libexecdir'))]
+    clover_spirv_cpp_args=[]
+    clover_incs=[inc_include,inc_src,inc_gallium,inc_gallium_aux]# we use them as template arguments. Disable the warning as there isn't
+    # anything we can do about it
+    if cpp.has_argument('-Wno-ignored-attributes'):
+      clover_cpp_args += ['-Wno-ignored-attributes'] if isinstance(clover_cpp_args, list) else '-Wno-ignored-attributes'
+    
+    
+    if with_opencl_icd:
+      clover_cpp_args += ['-DHAVE_CLOVER_ICD'] if isinstance(clover_cpp_args, list) else '-DHAVE_CLOVER_ICD'
+    
+    
+    if with_clover_spirv:
+      clover_spirv_cpp_args += ['-DHAVE_CLOVER_SPIRV'] if isinstance(clover_spirv_cpp_args, list) else '-DHAVE_CLOVER_SPIRV'
+    
+    
+    libclllvm=static_library('clllvm',files('llvm/codegen/bitcode.cpp','llvm/codegen/common.cpp','llvm/codegen/native.cpp','llvm/codegen.hpp','llvm/compat.hpp','llvm/invocation.cpp','llvm/invocation.hpp','llvm/metadata.hpp','llvm/util.hpp',),include_directories=clover_incs,cpp_args=[clover_cpp_args,clover_opencl_cpp_args,clover_spirv_cpp_args,'-DCLANG_RESOURCE_DIR="{}"'.format(join_paths(dep_llvm.get_variable(cmake='LLVM_LIBRARY_DIR',configtool='libdir'),'clang',dep_llvm.version(),'include',)),],gnu_symbol_visibility='hidden',dependencies=[dep_llvm,dep_elf,dep_llvmspirvlib,idep_mesautil],)
+    
+    idep_opencl_spirv=null_dep
+    if with_clover_spirv:
+      libclspirv=static_library('clspirv',files('spirv/invocation.cpp','spirv/invocation.hpp'),include_directories=clover_incs,cpp_args=[clover_opencl_cpp_args,clover_spirv_cpp_args],gnu_symbol_visibility='hidden',dependencies=[dep_spirv_tools,idep_mesautil],)
+    
+      libclnir=static_library('clnir',files('nir/invocation.cpp','nir/invocation.hpp'),include_directories=[clover_incs,inc_mesa],dependencies=[idep_nir,idep_vtn,idep_mesaclc],cpp_args=[clover_opencl_cpp_args,clover_spirv_cpp_args],gnu_symbol_visibility='hidden',)
+    
+      idep_opencl_spirv=declare_dependency(dependencies=[idep_nir],link_with=[libclspirv,libclnir],)
+    
+    
+    clover_files=files('api/context.cpp','api/device.cpp','api/dispatch.cpp','api/dispatch.hpp','api/event.cpp','api/interop.cpp','api/invalid.cpp','api/kernel.cpp','api/memory.cpp','api/platform.cpp','api/program.cpp','api/queue.cpp','api/sampler.cpp','api/transfer.cpp','api/util.hpp','core/binary.cpp','core/binary.hpp','core/compiler.hpp','core/context.cpp','core/context.hpp','core/device.cpp','core/device.hpp','core/error.hpp','core/event.cpp','core/event.hpp','core/format.cpp','core/format.hpp','core/kernel.cpp','core/kernel.hpp','core/memory.cpp','core/memory.hpp','core/object.hpp','core/platform.cpp','core/platform.hpp','core/printf.cpp','core/printf.hpp','core/program.cpp','core/program.hpp','core/property.hpp','core/queue.cpp','core/queue.hpp','core/resource.cpp','core/resource.hpp','core/sampler.cpp','core/sampler.hpp','core/timestamp.cpp','core/timestamp.hpp','util/adaptor.hpp','util/algebra.hpp','util/algorithm.hpp','util/compat.hpp','util/factor.hpp','util/functional.hpp','util/lazy.hpp','util/pointer.hpp','util/range.hpp','util/tuple.hpp',)
+    
+    libclover=static_library('clover',[clover_files,sha1_h],include_directories=clover_incs,cpp_args=[clover_opencl_cpp_args,clover_spirv_cpp_args,clover_cpp_args,],gnu_symbol_visibility='hidden',link_with=[libclllvm],dependencies=[idep_mesautil,idep_nir,idep_opencl_spirv],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/clover/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/opencl')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/opencl/meson.build
+    ########################################################################################################################
+    opencl_link_args=[]
+    opencl_link_deps=[]
+    opencl_version='1'
+    
+    if with_ld_version_script:
+      opencl_link_args+=['-Wl,--version-script',join_paths(meson.current_source_dir(),'opencl.sym')]
+      opencl_link_deps+=files('opencl.sym')
+    
+    
+    llvm_libdir=dep_llvm.get_variable(cmake='LLVM_LIBRARY_DIR',configtool='libdir')
+    opencl_libname='MesaOpenCL' if with_opencl_icd else 'OpenCL'
+    
+    polly_dep=null_dep
+    polly_isl_dep=null_dep
+    if dep_llvm.version().version_compare('>=10.0.0'):
+      polly_dep=cpp.find_library('Polly',dirs=llvm_libdir,required=False)
+      polly_isl_dep=cpp.find_library('PollyISL',dirs=llvm_libdir,required=False)
+    
+    
+    dep_clang=cpp.find_library('clang-cpp',dirs=llvm_libdir,required=False)# meson will return clang-cpp from system dirs if it's not found in llvm_libdir
+    linker_rpath_arg='-Wl,--rpath={}'.format(llvm_libdir)
+    clang_test_code='''
+      #include <clang/Basic/Version.h>
+      int main (void) {
+        size_t found_pos = clang::getClangFullVersion().find(CLANG_VERSION_STRING);
+        return found_pos == ::std::string::npos ? 1 : 0;
+      }
+    '''
+    can_check_clang=(not meson.is_cross_build() or meson.can_run_host_binaries()) and cpp.has_link_argument(linker_rpath_arg)
+    if can_check_clang:
+      test_run=cpp.run(clang_test_code,name='dep-clang-usable',dependencies=[dep_llvm,dep_clang],args=linker_rpath_arg)
+      dep_clang_usable=test_run.compiled() and test_run.returncode()==0
+    else:
+      dep_clang_usable=True
+    
+    if not _shared_llvm or not(dep_clang.found() and dep_clang_usable):
+      dep_clang=[cpp.find_library('clangCodeGen',dirs=llvm_libdir),cpp.find_library('clangFrontendTool',dirs=llvm_libdir),cpp.find_library('clangFrontend',dirs=llvm_libdir),cpp.find_library('clangDriver',dirs=llvm_libdir),cpp.find_library('clangSerialization',dirs=llvm_libdir),cpp.find_library('clangParse',dirs=llvm_libdir),cpp.find_library('clangSema',dirs=llvm_libdir),cpp.find_library('clangAnalysis',dirs=llvm_libdir),cpp.find_library('clangAST',dirs=llvm_libdir),cpp.find_library('clangASTMatchers',dirs=llvm_libdir),cpp.find_library('clangEdit',dirs=llvm_libdir),cpp.find_library('clangLex',dirs=llvm_libdir),cpp.find_library('clangBasic',dirs=llvm_libdir),polly_dep,polly_isl_dep,]
+      if dep_llvm.version().version_compare('>= 15.0'):
+        dep_clang+=cpp.find_library('clangSupport',dirs=llvm_libdir)
+    # check clang once more
+      if can_check_clang:
+        test_run=cpp.run(clang_test_code,name='dep-clang-usable',dependencies=[dep_llvm,dep_clang],args=linker_rpath_arg)
+        if not test_run.compiled() or test_run.returncode()!=0:
+          error('No usable clang found!')
+    
+    
+    
+    
+    ocldef_in=files(opencl_libname+'.def.in')[0]
+    ocldef=custom_target('ocldef.def',input=ocldef_in,output='ocldef.def',command=gen_vs_module_defs_normal_command,)
+    
+    libopencl=shared_library(opencl_libname,[],vs_module_defs=ocldef,link_args=[ld_args_gc_sections,opencl_link_args],link_depends=opencl_link_deps,link_whole=libclover,link_with=[libpipe_loader_dynamic,libgallium],dependencies=[idep_mesautil,dep_clock,dep_dl,dep_unwind,dep_elf,dep_clang,dep_version],name_prefix='' if host_machine.system()=='windows' else [],version='{}.0.0'.format(opencl_version),soversion='' if host_machine.system()=='windows' else opencl_version,install=True,)
+    
+    if with_opencl_icd:
+      _config=configuration_data()
+      _config.set('OPENCL_LIBNAME','MesaOpenCL')
+      _config.set('OPENCL_VERSION',opencl_version)
+      configure_file(configuration=_config,input='mesa.icd.in',output='mesa.icd',install=True,install_tag='runtime',install_dir=join_paths(get_option('sysconfdir'),'OpenCL','vendors'),)# .so is hardcoded in the icd as well
+      devenv.prepend('OCL_ICD_FILENAMES',(meson.current_build_dir() + 'libMesaOpenCL.so.{}'.format(opencl_version)) if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / 'libMesaOpenCL.so.{}'.format(opencl_version)))
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/opencl/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_gallium_rusticl:
+    set_relative_dir('src/gallium/frontends/rusticl')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/rusticl/meson.build
+    ########################################################################################################################
+    fs=module_import('fs')
+    rust=module_import('rust')
+    
+    libmesa_rust_util_files=files('util/lib.rs','util/assert.rs','util/bitset.rs','util/feature.rs','util/properties.rs','util/ptr.rs','util/string.rs',)
+    
+    libmesa_rust_files=files('mesa/lib.rs','mesa/compiler.rs','mesa/compiler/clc.rs','mesa/compiler/clc/spirv.rs','mesa/compiler/nir.rs','mesa/pipe.rs','mesa/pipe/context.rs','mesa/pipe/device.rs','mesa/pipe/fence.rs','mesa/pipe/screen.rs','mesa/pipe/transfer.rs',)
+    
+    rusticl_proc_macros_files=files('proc/lib.rs',)
+    
+    rusticl_files=files('lib.rs','api.rs','api/context.rs','api/device.rs','api/event.rs','api/icd.rs','api/kernel.rs','api/memory.rs','api/platform.rs','api/program.rs','api/queue.rs','api/types.rs','api/util.rs','core.rs','core/context.rs','core/device.rs','core/format.rs','core/kernel.rs','core/memory.rs','core/platform.rs','core/program.rs','core/queue.rs','core/util.rs','core/version.rs','core/gl.rs',)
+    
+    rusticl_args=['-Dunsafe_op_in_unsafe_fn','-Dclippy::all','-Aclippy::assertions_on_constants','-Aclippy::mutable_key_type','-Aclippy::not_unsafe_ptr_arg_deref','-Aclippy::redundant_field_names','-Aclippy::too_many_arguments','-Aclippy::type_complexity',]
+    
+    if with_platform_x11:
+      rusticl_args+=['--cfg','glx',]
+    
+    
+    rusticl_gen_args=['-Aclippy::all','-Aimproper_ctypes','-Aunused_unsafe','-Anon_camel_case_types','-Anon_snake_case','-Anon_upper_case_globals',]
+    
+    rusticl_bindgen_args=['--no-convert-floats','--use-array-pointers-in-arguments','--default-enum-style','rust','--with-derive-partialeq','--with-derive-eq','--with-derive-partialord','--with-derive-ord','--with-derive-hash','--with-derive-default','--anon-fields-prefix','anon_',]
+    
+    bindgen_version=find_program('bindgen').version()
+    
+    if bindgen_version=='unknown':
+      error('Failed to detect bindgen version. If you are using bindgen 0.69.0, please either update to 0.69.1 or downgrade to 0.68.1. You can install the latest version for your user with `cargo install bindgen-cli`.')
+    
+    
+    if bindgen_version.version_compare('< 0.65'):
+      error('rusticl requires bindgen 0.65 or newer. If your distribution does not ship a recent enough version, you can install the latest version for your user with `cargo install bindgen-cli`.')
+    
+    
+    rusticl_bindgen_c_args=['-fno-builtin-malloc',]
+    
+    cl_c_args=['-DCL_USE_DEPRECATED_OPENCL_1_0_APIS','-DCL_USE_DEPRECATED_OPENCL_1_1_APIS','-DCL_USE_DEPRECATED_OPENCL_1_2_APIS','-DCL_USE_DEPRECATED_OPENCL_2_0_APIS','-DCL_USE_DEPRECATED_OPENCL_2_1_APIS','-DCL_USE_DEPRECATED_OPENCL_2_2_APIS','-DCL_TARGET_OPENCL_VERSION=300',]
+    
+    rusticl_opencl_bindings_rs=rust.bindgen(input=['rusticl_opencl_bindings.h',opencl_headers,],output='rusticl_opencl_bindings.rs',include_directories=[inc_include,],dependencies=[dep_x11,],c_args=[rusticl_bindgen_c_args,pre_args,cl_c_args,],args=[rusticl_bindgen_args,'--disable-header-comment','--ignore-functions','--raw-line','unsafe impl std::marker::Sync for _cl_icd_dispatch {}','--raw-line','unsafe impl std::marker::Send for _cl_image_desc {}','--raw-line','unsafe impl std::marker::Sync for _cl_image_desc {}','--allowlist-type','cl_.*','--allowlist-type','cl.*_fn','--allowlist-var','CL_.*','--allowlist-var','GL_.*','--allowlist-var','MESA_GLINTEROP_.*','--allowlist-type','PFNEGLGETPROCADDRESSPROC','--allowlist-type','PFNGLXGETPROCADDRESSPROC','--allowlist-type','PFNMESAGLINTEROP.*','--new-type-alias-deref','cl_(mem|image|pipe|gl_texture)_info','--new-type-alias-deref','cl_kernel_(arg|work_group)_info','--new-type-alias-deref','cl_(event|profiling)_info','--constified-enum','MESA_GLINTEROP_.*',],)
+    
+    rusticl_opencl_gen=static_library('rusticl_opencl_gen',rusticl_opencl_bindings_rs,gnu_symbol_visibility='hidden',rust_abi='rust',rust_args=[rusticl_gen_args,],)
+    
+    rusticl_llvm_bindings_rs=rust.bindgen(input='rusticl_llvm_bindings.hpp',output='rusticl_llvm_bindings.rs',c_args=[rusticl_bindgen_c_args,pre_args,],dependencies=[dep_clang,dep_llvm,dep_llvmspirvlib,],args=['--generate','constructors,functions,types','--opaque-type','.*','--allowlist-function','clang::getClangFullVersion','--allowlist-function','llvm::LLVMContext::LLVMContext','--allowlist-function','llvm::writeSpirv',],)
+    
+    rusticl_llvm_gen=static_library('rusticl_llvm_gen',rusticl_llvm_bindings_rs,gnu_symbol_visibility='hidden',rust_abi='rust',rust_args=[rusticl_gen_args,],)
+    
+    rusticl_libc_bindings_rs=rust.bindgen(input='rusticl_libc_bindings.h',output='rusticl_libc_bindings.rs',dependencies=[dep_valgrind,],c_args=[rusticl_bindgen_c_args,pre_args,],args=[rusticl_bindgen_args,'--allowlist-function','close','--allowlist-function','dlsym','--allowlist-function','free','--allowlist-function','malloc',])
+    
+    _idep_mesa_bindings=declare_dependency(sources=spirv_info,)
+    
+    rusticl_mesa_bindings=rust.bindgen(input='rusticl_mesa_bindings.h',output='rusticl_mesa_bindings.rs',output_inline_wrapper='rusticl_mesa_bindings.c',include_directories=[inc_gallium,inc_gallium_aux,inc_include,inc_src,],dependencies=[_idep_mesa_bindings,idep_nir_headers,dep_valgrind,],c_args=[rusticl_bindgen_c_args,pre_args,],args=[rusticl_bindgen_args,'--allowlist-function','blob_.*','--allowlist-function','disk_cache_.*','--allowlist-type','float_controls','--allowlist-function','mesa_.*','--allowlist-var','OS_.*','--allowlist-function','rz?alloc_.*','--allowlist-function','SHA1.*','--allowlist-var','SHA1_.*','--allowlist-function','u_.*','--allowlist-function','util_format_.*','--allowlist-type','cl_sampler_.*_mode','--constified-enum-module','cl_sampler_.*_mode','--allowlist-function','clc_.*','--allowlist-type','clc_kernel_arg_access_qualifier','--bitfield-enum','clc_kernel_arg_access_qualifier','--allowlist-type','clc_kernel_arg_type_qualifier','--bitfield-enum','clc_kernel_arg_type_qualifier','--allowlist-type','gl_access_qualifier','--bitfield-enum','gl_access_qualifier','--allowlist-function','glsl_.*','--allowlist-function','nir_.*','--allowlist-var','nir_debug','--allowlist-var','NIR_DEBUG_.*','--bitfield-enum','nir_lower_int64_options','--bitfield-enum','nir_opt_if_options','--bitfield-enum','nir_variable_mode','--allowlist-function','should_.*_nir','--allowlist-function','spirv_.*','--allowlist-function','pipe_.*','--allowlist-var','PIPE_.*','--allowlist-type','pipe_endian','--bitfield-enum','pipe_map_flags','--allowlist-type','pipe_query_type','--constified-enum-module','pipe_query_type','--allowlist-type','pipe_resource_usage','--bitfield-enum','pipe_resource_usage','--allowlist-type','pipe_tex_filter','--constified-enum-module','pipe_tex_filter','--allowlist-type','pipe_tex_wrap','--constified-enum-module','pipe_tex_wrap','--allowlist-function','rusticl_.*','--allowlist-function','std(err|out)_ptr','--allowlist-var','WINSYS_HANDLE_TYPE_.*',],)
+    
+    rusticl_c=static_library('rusticl_c',['rusticl_nir.c','rusticl_nir.h','rusticl_system_bindings.c','rusticl_system_bindings.h',rusticl_mesa_bindings[1],'rusticl_mesa_bindings.h',sha1_h,],gnu_symbol_visibility='hidden',include_directories=[fs.relative_to(meson.project_build_root(),meson.current_source_dir()),inc_gallium,inc_gallium_aux,inc_include,inc_nir,inc_src,],c_args=[pre_args,cl_c_args,cc.get_supported_arguments('-Wno-missing-prototypes'),],dependencies=[idep_nir_headers,dep_valgrind,],)
+    
+    idep_rusticl_gen=declare_dependency(sources=[rusticl_opencl_bindings_rs,],)
+    
+    libmesa_rust_gen=static_library('mesa_rust_gen',rusticl_mesa_bindings[0],gnu_symbol_visibility='hidden',link_with=[libgallium,],dependencies=[idep_mesaclc,],rust_abi='rust',rust_args=[rusticl_gen_args,],)
+    
+    libc_rust_gen=static_library('libc_rust_gen',rusticl_libc_bindings_rs,gnu_symbol_visibility='hidden',rust_abi='rust',rust_args=[rusticl_gen_args,],)
+    
+    libmesa_rust_util=static_library('mesa_rust_util',[libmesa_rust_util_files],gnu_symbol_visibility='hidden',rust_abi='rust',rust_args=[rusticl_args,],)
+    
+    libmesa_rust=static_library('mesa_rust',[libmesa_rust_files],gnu_symbol_visibility='hidden',rust_abi='rust',rust_args=[rusticl_args,],link_with=[libc_rust_gen,libmesa_rust_gen,libmesa_rust_util,rusticl_c,])
+    
+    rusticl_proc_macros=rust.proc_macro('rusticl_proc_macros',[rusticl_proc_macros_files],rust_args=[rusticl_args,],)
+    
+    librusticl=static_library('rusticl',[rusticl_files],gnu_symbol_visibility='hidden',rust_abi='c',rust_args=[rusticl_args,],link_with=[libc_rust_gen,libmesa_rust,libmesa_rust_gen,libmesa_rust_util,rusticl_llvm_gen,rusticl_opencl_gen,rusticl_proc_macros,],dependencies=[idep_rusticl_gen,],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/rusticl/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/rusticl')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/rusticl/meson.build
+    ########################################################################################################################
+    opencl_version='1'
+    
+    rusticl_ld_args=[]
+    rusticl_ld_depends=[]
+    
+    if with_ld_version_script:
+      rusticl_ld_args+=['-Wl,--version-script',join_paths(meson.current_source_dir(),'rusticl.sym')]
+      rusticl_ld_depends+=files('rusticl.sym')
+    
+    
+    librusticl=shared_library('RusticlOpenCL','target.c',gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_gallium_winsys,],link_whole=librusticl,link_with=[libgalliumvl_stub,libpipe_loader_static,libswdri,libswkmsdri,libwsw,libws_null,],dependencies=[driver_asahi,driver_iris,driver_nouveau,driver_r600,driver_panfrost,driver_radeonsi,driver_swrast,driver_v3d,driver_zink,idep_nir,idep_vtn,],link_args=[ld_args_build_id,ld_args_gc_sections,ld_args_bsymbolic,rusticl_ld_args,],link_depends=rusticl_ld_depends,version='{}.0.0'.format(opencl_version),install=True,)
+    
+    _config=configuration_data()
+    _config.set('OPENCL_VERSION',opencl_version)
+    configure_file(configuration=_config,input='rusticl.icd.in',output='rusticl.icd',install=True,install_tag='runtime',install_dir=join_paths(get_option('sysconfdir'),'OpenCL','vendors'),)
+    
+    # .so is hardcoded in the icd as well
+    devenv.prepend('OCL_ICD_VENDORS',(meson.current_build_dir() + '') if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / ''))
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/rusticl/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_dri:
+    set_relative_dir('src/gallium/frontends/dri')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/dri/meson.build
+    ########################################################################################################################
+    inc_st_dri=include_directories('.')
+    deps_for_libdri=[]
+    
+    files_libdri=files('dri_context.c','dri_context.h','dri_drawable.c','dri_drawable.h','dri_helpers.c','dri_helpers.h','dri_query_renderer.c','dri_query_renderer.h','dri_screen.c','dri_screen.h','dri_util.c','dri_util.h',)
+    
+    if with_platform_x11:
+      deps_for_libdri+=dep_xcb
+    
+    
+    if with_dri:
+      files_libdri+=files('drisw.c')
+    
+    
+    if with_dri2:
+      files_libdri+=files('dri2.c')
+    
+    
+    libdri_c_args=[]
+    if with_gallium_zink and not with_platform_android:
+      if with_glvnd:
+        libdri_c_args += ['-DKOPPER_LIB_NAMES="libEGL_{} and libGLX_{}"'.format(glvnd_vendor_name)] if isinstance(libdri_c_args, list) else '-DKOPPER_LIB_NAMES="libEGL_{} and libGLX_{}"'.format(glvnd_vendor_name)
+      else:
+        libdri_c_args += ['-DKOPPER_LIB_NAMES="libEGL and libGLX"'] if isinstance(libdri_c_args, list) else '-DKOPPER_LIB_NAMES="libEGL and libGLX"'
+    
+      files_libdri+=files('kopper.c')
+      deps_for_libdri+=vulkan_wsi_deps
+    
+    
+    if with_gallium_softpipe:
+      libdri_c_args += ['-DGALLIUM_SOFTPIPE'] if isinstance(libdri_c_args, list) else '-DGALLIUM_SOFTPIPE'
+    
+    
+    libdri=static_library('dri',[files_libdri,sha1_h],include_directories=[inc_include,inc_util,inc_mesa,inc_mapi,inc_src,inc_gallium,inc_gallium_aux,inc_util,inc_gallium_drivers,inc_loader,],c_args=[libdri_c_args],gnu_symbol_visibility='hidden',dependencies=[dep_libdrm,idep_mesautil,deps_for_libdri,],)
+    
+    if with_dri:
+      dri_req_private=[]
+      if dep_libdrm.found():
+        dri_req_private=['libdrm >= {}'.format(_drm_ver)]
+    
+    
+      pkg.generate(name='dri',filebase='dri',description='Direct Rendering Infrastructure',version=meson.project_version(),variables=['dridriverdir={}'.format(dri_drivers_path)],requires_private=dri_req_private,)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/dri/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/dri')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/dri/meson.build
+    ########################################################################################################################
+    gallium_dri_c_args=[]
+    gallium_dri_ld_args=[]
+    gallium_dri_link_depends=[]
+    gallium_dri_drivers=[]
+    
+    dri_sym=configure_file(input='dri.sym.in',output='dri.sym',configuration=sym_config)
+    
+    if with_ld_version_script:
+      gallium_dri_ld_args+=['-Wl,--version-script',join_paths(meson.current_build_dir(),'dri.sym')]
+      gallium_dri_link_depends+=dri_sym
+    
+    if with_ld_dynamic_list:
+      gallium_dri_ld_args+=['-Wl,--dynamic-list',join_paths(meson.current_source_dir(),'../dri.dyn')]
+      gallium_dri_link_depends+=files('../dri.dyn')
+    
+    
+    libgallium_dri=shared_library('gallium_dri',files('target.c'),include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_util,inc_gallium_drivers,inc_gallium_winsys,include_directories('../../frontends/dri'),],gnu_symbol_visibility='hidden',link_args=[ld_args_build_id,ld_args_gc_sections,gallium_dri_ld_args],link_depends=gallium_dri_link_depends,link_with=[libdri,libmesa,libgalliumvl,libgallium,libglapi,libloader,libpipe_loader_static,libws_null,libwsw,libswdri,libswkmsdri,],dependencies=[dep_selinux,dep_libdrm,dep_llvm,dep_thread,idep_xmlconfig,idep_mesautil,driver_swrast,driver_r300,driver_r600,driver_radeonsi,driver_nouveau,driver_kmsro,driver_v3d,driver_vc4,driver_freedreno,driver_etnaviv,driver_tegra,driver_i915,driver_svga,driver_virgl,driver_panfrost,driver_iris,driver_lima,driver_zink,driver_d3d12,driver_asahi,driver_crocus],install=True,install_dir=dri_drivers_path,name_suffix='so',)
+    
+    for d in [[with_gallium_kmsro,['armada-drm_dri.so','exynos_dri.so','gm12u320_dri.so','hdlcd_dri.so','hx8357d_dri.so','ili9163_dri.so','ili9225_dri.so','ili9341_dri.so','ili9486_dri.so','imx-drm_dri.so','imx-dcss_dri.so','imx-lcdif_dri.so','ingenic-drm_dri.so','kirin_dri.so','komeda_dri.so','mali-dp_dri.so','mcde_dri.so','mediatek_dri.so','meson_dri.so','mi0283qt_dri.so','mxsfb-drm_dri.so','panel-mipi-dbi_dri.so','pl111_dri.so','rcar-du_dri.so','repaper_dri.so','rockchip_dri.so','rzg2l-du_dri.so','ssd130x_dri.so','st7586_dri.so','st7735r_dri.so','sti_dri.so','stm_dri.so','sun4i-drm_dri.so','udl_dri.so','vkms_dri.so','zynqmp-dpsub_dri.so',]],[with_gallium_radeonsi,'radeonsi_dri.so'],[with_gallium_nouveau,'nouveau_dri.so'],[with_gallium_freedreno,['msm_dri.so','kgsl_dri.so']],[with_gallium_softpipe,'swrast_dri.so'],[with_gallium_softpipe and with_gallium_drisw_kms,'kms_swrast_dri.so'],[with_gallium_v3d,'v3d_dri.so'],[with_gallium_vc4,'vc4_dri.so'],[with_gallium_panfrost,['panfrost_dri.so','panthor_dri.so']],[with_gallium_etnaviv,'etnaviv_dri.so'],[with_gallium_tegra,'tegra_dri.so'],[with_gallium_crocus,'crocus_dri.so'],[with_gallium_iris,'iris_dri.so'],[with_gallium_i915,'i915_dri.so'],[with_gallium_r300,'r300_dri.so'],[with_gallium_r600,'r600_dri.so'],[with_gallium_svga,'vmwgfx_dri.so'],[with_gallium_virgl or (with_gallium_freedreno and freedreno_kmds.count('virtio') > 0),'virtio_gpu_dri.so'],[with_gallium_lima,'lima_dri.so'],[with_gallium_zink,'zink_dri.so'],[with_gallium_d3d12,'d3d12_dri.so'],[with_gallium_asahi,'asahi_dri.so']]:
+      if d[0]:
+        gallium_dri_drivers+=d[1]
+    
+    
+    
+    # This only works on Unix-like oses, which is probably fine for dri
+    prog_ln=find_program('ln',required=False)
+    if prog_ln.found():
+      devenv.set('LIBGL_DRIVERS_PATH',meson.current_build_dir())
+    
+      for d in gallium_dri_drivers:
+        custom_target('devenv_{}'.format(d),input=libgallium_dri,output=d,command=[prog_ln,'-f','@INPUT@','@OUTPUT@'],build_by_default=True,)
+    
+    
+    
+    meson.add_install_script(install_megadrivers_py.full_path(),libgallium_dri.full_path(),dri_drivers_path,gallium_dri_drivers,install_tag='runtime',)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/dri/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_osmesa:
+    set_relative_dir('src/gallium/frontends/osmesa')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/osmesa/meson.build
+    ########################################################################################################################
+    osmesa_st_c_args=[]
+    if with_platform_windows:
+      if not with_shared_glapi:
+        osmesa_st_c_args+=['-D_GLAPI_NO_EXPORTS']
+    
+    
+    
+    libosmesa_st=static_library('osmesa_st','osmesa.c',c_args=osmesa_st_c_args,include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_mapi,inc_mesa,],dependencies=[idep_mesautil],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/osmesa/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/osmesa')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/osmesa/meson.build
+    ########################################################################################################################
+    osmesa_link_with=[]
+    osmesa_link_args=[]
+    osmesa_link_deps=[]
+    
+    if with_shared_glapi:
+      osmesa_link_with+=libglapi
+    
+    if with_ld_version_script:
+      osmesa_link_args+=['-Wl,--version-script',join_paths(meson.current_source_dir(),'osmesa.sym')]
+      osmesa_link_deps+=files('osmesa.sym')
+    
+    
+    osmesa_def=custom_target('osmesa.def',input='osmesa.def.in',output='osmesa.def',command=gen_vs_module_defs_normal_command,)
+    
+    libosmesa=shared_library(osmesa_lib_name,'target.c',gnu_symbol_visibility='hidden',link_args=[ld_args_gc_sections,osmesa_link_args],vs_module_defs=osmesa_def,include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_gallium_winsys,inc_gallium_drivers,],link_depends=osmesa_link_deps,link_whole=[libosmesa_st,libglapi_static],link_with=[libmesa,libgallium,libws_null,osmesa_link_with,],dependencies=[dep_ws2_32,dep_selinux,dep_thread,dep_clock,dep_unwind,driver_swrast],name_prefix='' if host_machine.system()=='windows' else [],soversion='' if host_machine.system()=='windows' else '8',version='8.0.0',darwin_versions='9.0.0',install=True,)
+    
+    if with_symbols_check:
+      test('osmesa-symbols-check',symbols_check,args=['--lib',libosmesa,'--symbols-file',files('osmesa-symbols.txt'),symbols_check_args,],suite=['gallium'],)
+    
+    
+    pkg.generate(name='osmesa',description='Mesa Off-screen Rendering Library',version='8.0.0',libraries=libosmesa,libraries_private=gl_priv_libs,)
+    
+    if with_tests:
+      test('osmesa-render',executable('osmesa-render','test-render.cpp',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],link_with=libosmesa,dependencies=[idep_gtest],),suite='gallium',protocol='gtest',)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/osmesa/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_glx=='xlib':
+    set_relative_dir('src/gallium/winsys/sw/xlib')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/winsys/sw/xlib/meson.build
+    ########################################################################################################################
+    libws_xlib=static_library('ws_xlib',files('xlib_sw_winsys.c'),gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],dependencies=[dep_x11,dep_xext,dep_xcb],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/winsys/sw/xlib/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/frontends/glx/xlib')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/glx/xlib/meson.build
+    ########################################################################################################################
+    libxlib=static_library('xlib',files('glx_api.c','glx_getproc.c','glx_usefont.c','xm_api.c','xm_st.c'),gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_mapi,inc_mesa],dependencies=[dep_x11,dep_xext,dep_xcb,dep_glproto,idep_mesautil],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/glx/xlib/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    subdir('targets/libgl-xlib')
+  
+  if with_gallium_vdpau:
+    set_relative_dir('src/gallium/frontends/vdpau')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/vdpau/meson.build
+    ########################################################################################################################
+    VDPAU_MAJOR=1
+    VDPAU_MINOR=0
+    
+    libvdpau_st=static_library('vdpau_st',files('bitmap.c','decode.c','device.c','ftab.c','htab.c','mixer.c','output.c','preemption.c','presentation.c','query.c','surface.c',),c_args=['-DVER_MAJOR={}'.format(VDPAU_MAJOR),'-DVER_MINOR={}'.format(VDPAU_MINOR),],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_util,inc_gallium,inc_gallium_aux,],dependencies=[dep_vdpau,dep_xcb,dep_x11_xcb,dep_xcb_dri2,dep_libdrm,idep_mesautil],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/vdpau/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/vdpau')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/vdpau/meson.build
+    ########################################################################################################################
+    vdpau_link_args=[]
+    vdpau_link_depends=[]
+    vdpau_drivers=[]
+    
+    vdpau_sym=configure_file(input='vdpau.sym.in',output='vdpau.sym',configuration=sym_config)
+    
+    if with_ld_version_script:
+      vdpau_link_args+=['-Wl,--version-script',join_paths(meson.current_build_dir(),'vdpau.sym')]
+      vdpau_link_depends+=vdpau_sym
+    
+    if with_ld_dynamic_list:
+      vdpau_link_args+=['-Wl,--dynamic-list',join_paths(meson.current_source_dir(),'../dri.dyn')]
+      vdpau_link_depends+=files('../dri.dyn')
+    
+    
+    link_with_libvdpau_gallium=[libgalliumvlwinsys,libgalliumvl,libgallium,libpipe_loader_static,libws_null,libwsw,libswdri,libswkmsdri,]
+    
+    if with_glx=='xlib':
+      link_with_libvdpau_gallium+=[libws_xlib]
+    
+    
+    libvdpau_gallium=shared_library('vdpau_gallium','target.c',gnu_symbol_visibility='hidden',link_args=[vdpau_link_args,ld_args_gc_sections],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_util,inc_gallium_winsys,inc_gallium_drivers,],link_whole=[libvdpau_st],link_with=link_with_libvdpau_gallium,dependencies=[idep_mesautil,driver_r600,driver_radeonsi,driver_nouveau,driver_d3d12,driver_virgl,],link_depends=vdpau_link_depends,soversion='{}.{}.0'.format(VDPAU_MAJOR,VDPAU_MINOR),install=True,install_dir=vdpau_drivers_path,name_suffix='so',)
+    for d in [[with_gallium_r600,'r600'],[with_gallium_radeonsi,'radeonsi'],[with_gallium_nouveau,'nouveau'],[with_gallium_virgl,'virtio_gpu'],[with_gallium_d3d12_video,'d3d12']]:
+      if d[0]:
+        vdpau_drivers += ['libvdpau_{}.so.{}.{}.0'.format(d[1],VDPAU_MAJOR,VDPAU_MINOR)] if isinstance(vdpau_drivers, list) else 'libvdpau_{}.so.{}.{}.0'.format(d[1],VDPAU_MAJOR,VDPAU_MINOR)
+    
+    
+    
+    meson.add_install_script(install_megadrivers_py.full_path(),libvdpau_gallium.full_path(),vdpau_drivers_path,vdpau_drivers,install_tag='runtime',)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/vdpau/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_gallium_omx!='disabled':
+    set_relative_dir('src/gallium/frontends/omx')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/omx/meson.build
+    ########################################################################################################################
+    inc_st_omx=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux]
+    dep_st_omx=[dep_omx,dep_x11_xcb,dep_xcb,dep_xcb_dri2,dep_xcb_dri3,dep_libdrm,]
+    
+    files_omx=files('vid_dec_common.c','vid_dec_h264_common.c','vid_enc_common.c','vid_omx_common.c')
+    
+    if with_gallium_omx=='bellagio':
+      files_omx+=files('bellagio/entrypoint.c','bellagio/vid_dec.c','bellagio/vid_dec_mpeg12.c','bellagio/vid_dec_h264.c','bellagio/vid_dec_h265.c','bellagio/vid_dec_av1.c','bellagio/vid_enc.c')
+    elif with_gallium_omx=='tizonia':
+      files_omx+=files('tizonia/entrypoint.c','tizonia/h264d.c','tizonia/h264dprc.c','tizonia/h264dinport.c','tizonia/h264e.c','tizonia/h264eprc.c','tizonia/h264einport.c','tizonia/h264eoutport.c')
+      inc_st_omx=[inc_st_omx,inc_loader,inc_gbm,inc_st_dri,inc_egl,inc_egl_dri2,]
+      dep_st_omx=[dep_st_omx,dep_omx_other]
+    
+    
+    libomx_st=static_library('omx_st',files_omx,c_args=['-fcommon'],gnu_symbol_visibility='hidden',include_directories=inc_st_omx,dependencies=[dep_st_omx,idep_mesautil],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/omx/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/omx')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/omx/meson.build
+    ########################################################################################################################
+    omx_link_args=[]
+    omx_link_depends=[]
+    
+    omx_sym=configure_file(input='omx.sym.in',output='omx.sym',configuration=sym_config)
+    
+    if with_ld_version_script:
+      omx_link_args+=['-Wl,--version-script',join_paths(meson.current_build_dir(),'omx.sym')]
+      omx_link_depends+=omx_sym
+    
+    
+    libomx_gallium=shared_library('omx_mesa','target.c',gnu_symbol_visibility='hidden',link_args=[omx_link_args,ld_args_gc_sections],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_util,inc_gallium_winsys,inc_gallium_drivers,],link_whole=[libomx_st],link_with=[libgalliumvlwinsys,libgalliumvl,libgallium,libpipe_loader_static,libws_null,libwsw,libswdri,libswkmsdri,],link_depends=omx_link_depends,dependencies=[idep_mesautil,driver_r600,driver_radeonsi,driver_nouveau],install=True,install_dir=omx_drivers_path,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/omx/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_gallium_va:
+    set_relative_dir('src/gallium/frontends/va')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/va/meson.build
+    ########################################################################################################################
+    libva_version=dep_va.version().split('.')
+    
+    libva_st=static_library('va_st',files('buffer.c','config.c','context.c','display.c','image.c','picture.c','picture_mpeg12.c','picture_mpeg4.c','picture_h264.c','picture_hevc.c','picture_vc1.c','picture_mjpeg.c','picture_vp9.c','picture_av1.c','postproc.c','subpicture.c','surface.c','picture_h264_enc.c','picture_hevc_enc.c','picture_av1_enc.c',),c_args=['-DVA_DRIVER_INIT_FUNC=__vaDriverInit_{}_{}'.format(libva_version[0],libva_version[1]),],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],dependencies=[dep_va_headers,dep_x11_xcb,dep_xcb,dep_xcb_dri2,dep_xcb_dri3,dep_libdrm,idep_mesautil,],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/va/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/va')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/va/meson.build
+    ########################################################################################################################
+    va_link_args=[]
+    va_link_depends=[]
+    va_drivers=[]
+    
+    va_sym=configure_file(input='va.sym.in',output='va.sym',configuration=sym_config)
+    
+    if with_ld_version_script:
+      va_link_args+=['-Wl,--version-script',join_paths(meson.current_build_dir(),'va.sym')]
+      va_link_depends+=va_sym
+    
+    if with_ld_dynamic_list:
+      va_link_args+=['-Wl,--dynamic-list',join_paths(meson.current_source_dir(),'../dri.dyn')]
+      va_link_depends+=files('../dri.dyn')
+    
+    
+    link_with_libva_gallium=[libgalliumvlwinsys,libgalliumvl,libgallium,libpipe_loader_static,libws_null,libwsw,libswdri,libswkmsdri,]
+    
+    if with_glx=='xlib':
+      link_with_libva_gallium+=[libws_xlib]
+    
+    
+    devenv.set('LIBVA_DRIVERS_PATH',meson.current_build_dir())
+    
+    if host_machine.system()=='windows':
+      link_with_libva_gallium+=[libwsgdi]
+    
+      libva_init_version=dep_va.version().split('.')
+      vaon12_def_input=configure_file(configuration={'__vaDriverInit_X_Y':'__vaDriverInit_{}_{}'.format(libva_init_version[0],libva_init_version[1])+'@4'},input='vaon12.def.in',output='vaon12.def.in',)
+    
+      vaon12_def=custom_target('vaon12.def',input=vaon12_def_input,output='vaon12.def',command=gen_vs_module_defs_normal_command,)
+    
+      libva_gallium=shared_library('vaon12_drv_video','target.c',link_args=[va_link_args,ld_args_gc_sections,ld_args_build_id],vs_module_defs=vaon12_def,include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_util,inc_gallium_winsys,inc_gallium_drivers,inc_gallium_winsys_sw],link_whole=[libva_st],link_with=link_with_libva_gallium,dependencies=[driver_d3d12,idep_mesautil],link_depends=va_link_depends,install=True,name_suffix='dll',name_prefix='',)
+    else:
+      libva_gallium=shared_library('gallium_drv_video','target.c',gnu_symbol_visibility='hidden',link_args=[va_link_args,ld_args_gc_sections,ld_args_build_id],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_util,inc_gallium_winsys,inc_gallium_drivers,],link_whole=[libva_st],link_with=link_with_libva_gallium,dependencies=[dep_libdrm,driver_r600,driver_radeonsi,driver_nouveau,driver_d3d12,driver_virgl,idep_mesautil,],link_depends=va_link_depends,install=True,install_dir=va_drivers_path,name_suffix='so',)
+    
+      for d in [[with_gallium_r600,'r600'],[with_gallium_radeonsi,'radeonsi'],[with_gallium_nouveau,'nouveau'],[with_gallium_virgl,'virtio_gpu'],[with_gallium_d3d12_video,'d3d12']]:
+        if d[0]:
+          va_drivers += ['{}_drv_video.so'.format(d[1])] if isinstance(va_drivers, list) else '{}_drv_video.so'.format(d[1])
+    
+    
+    
+      meson.add_install_script(install_megadrivers_py.full_path(),libva_gallium.full_path(),va_drivers_path,va_drivers,install_tag='runtime',)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/va/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_gallium_xa:
+    set_relative_dir('src/gallium/frontends/xa')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/xa/meson.build
+    ########################################################################################################################
+    xa_version=['2','5','0']
+    
+    xa_conf=configuration_data()
+    xa_conf.set('XA_MAJOR',xa_version[0])
+    xa_conf.set('XA_MINOR',xa_version[1])
+    xa_conf.set('XA_PATCH',xa_version[2])
+    
+    xa_tracker_h=configure_file(configuration=xa_conf,input='xa_tracker.h.in',output='xa_tracker.h',install_dir=get_option('includedir'),)
+    
+    libxa_st=static_library('xa_st',[xa_tracker_h,files('xa_composite.c','xa_context.c','xa_renderer.c','xa_tgsi.c','xa_tracker.c','xa_yuv.c',)],c_args=['-pedantic'],gnu_symbol_visibility='hidden',dependencies=idep_mesautil,include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],)
+    
+    install_headers('xa_composite.h','xa_context.h')
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/xa/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/xa')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/xa/meson.build
+    ########################################################################################################################
+    xa_link_args=[]
+    xa_link_depends=[]
+    
+    if with_ld_version_script:
+      xa_link_args+=['-Wl,--version-script',join_paths(meson.current_source_dir(),'xa.sym')]
+      xa_link_depends+=files('xa.sym')
+    
+    
+    _xa_version='.'.join(xa_version)
+    
+    libxatracker=shared_library('xatracker','target.c',gnu_symbol_visibility='hidden',link_args=[xa_link_args,ld_args_gc_sections],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_util,inc_gallium_winsys,inc_gallium_drivers,],link_whole=[libxa_st],link_with=[libgalliumvl_stub,libgallium,libpipe_loader_static,libws_null,libwsw,libswdri,libswkmsdri,],link_depends=xa_link_depends,dependencies=[idep_mesautil,driver_nouveau,driver_i915,driver_svga,driver_freedreno,],version=_xa_version,install=True,)
+    
+    pkg.generate(name='xatracker',description='Xorg gallium3D acceleration library',version=_xa_version,libraries=libxatracker,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/xa/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_platform_haiku:
+    set_relative_dir('src/gallium/frontends/hgl')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/hgl/meson.build
+    ########################################################################################################################
+    files_libsthgl=files('hgl_context.h','hgl.c',)
+    
+    libsthgl_c_args=[]
+    if with_gallium_softpipe:
+      libsthgl_c_args += ['-DGALLIUM_SOFTPIPE'] if isinstance(libsthgl_c_args, list) else '-DGALLIUM_SOFTPIPE'
+    
+    
+    libsthgl=static_library('sthgl',files_libsthgl,include_directories=[inc_include,inc_util,inc_mesa,inc_mapi,inc_src,inc_gallium,inc_gallium_aux],c_args=[libsthgl_c_args],gnu_symbol_visibility='hidden',)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/hgl/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_gallium_st_nine:
+    set_relative_dir('src/gallium/frontends/nine')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/nine/meson.build
+    ########################################################################################################################
+    nine_st_files=files('adapter9.c','authenticatedchannel9.c','basetexture9.c','buffer9.c','cryptosession9.c','cubetexture9.c','device9.c','device9ex.c','device9video.c','guid.c','indexbuffer9.c','iunknown.c','nine_buffer_upload.c','nine_debug.c','nine_dump.c','nineexoverlayextension.c','nine_ff.c','nine_helpers.c','nine_lock.c','nine_memory_helper.c','nine_pipe.c','nine_quirk.c','nine_queue.c','nine_shader.c','nine_state.c','pixelshader9.c','query9.c','resource9.c','stateblock9.c','surface9.c','swapchain9.c','swapchain9ex.c','texture9.c','threadpool.c','vertexbuffer9.c','vertexdeclaration9.c','vertexshader9.c','volume9.c','volumetexture9.c',)
+    
+    libnine_st=static_library('nine_st',nine_st_files,gnu_symbol_visibility='hidden',include_directories=[inc_d3d9,inc_gallium,inc_include,inc_src,inc_gallium_aux,],dependencies=[dep_thread,idep_nir,idep_nir_headers],link_with=[libmesa])
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/nine/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/d3dadapter9')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/d3dadapter9/meson.build
+    ########################################################################################################################
+    nine_version=['1','0','0']
+    
+    gallium_nine_c_args=[]
+    gallium_nine_ld_args=[]
+    gallium_nine_link_depends=[]
+    gallium_nine_link_with=[libgallium,libnine_st,libpipe_loader_static,libws_null,libwsw,libswdri,libswkmsdri,libgalliumvl_stub,]
+    
+    if with_ld_version_script:
+      gallium_nine_ld_args+=['-Wl,--version-script',join_paths(meson.current_source_dir(),'d3dadapter9.sym')]
+      gallium_nine_link_depends+=files('d3dadapter9.sym')
+    
+    
+    libgallium_nine=shared_library('d3dadapter9',files('description.c','getproc.c','drm.c'),include_directories=[inc_include,inc_src,inc_loader,inc_mapi,inc_mesa,inc_util,inc_gallium,inc_gallium_aux,inc_gallium_winsys,inc_gallium_drivers,inc_d3d9,include_directories('../../frontends/nine'),],c_args=[gallium_nine_c_args],gnu_symbol_visibility='hidden',link_args=[ld_args_build_id,ld_args_gc_sections,gallium_nine_ld_args],link_depends=gallium_nine_link_depends,link_with=gallium_nine_link_with,dependencies=[dep_selinux,dep_libdrm,dep_llvm,dep_thread,idep_xmlconfig,idep_mesautil,idep_nir,driver_asahi,driver_v3d,driver_crocus,driver_etnaviv,driver_freedreno,driver_kmsro,driver_lima,driver_nouveau,driver_panfrost,driver_r300,driver_r600,driver_radeonsi,driver_svga,driver_swrast,driver_i915,driver_iris,driver_v3d,driver_vc4,driver_zink],name_prefix='',version='.'.join(nine_version),install=True,install_dir=d3d_drivers_path,)
+    
+    pkg.generate(name='d3d',description='Native D3D driver modules',version='.'.join(nine_version),requires_private='libdrm >= '+dep_libdrm.version(),variables=['moduledir={}'.format(d3d_drivers_path)],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/d3dadapter9/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_gallium_st_d3d10umd:
+    set_relative_dir('src/gallium/frontends/d3d10umd')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/d3d10umd/meson.build
+    ########################################################################################################################
+    inc_d3d10umd=include_directories('.')
+    _c_args_d3d10umd=[]
+    
+    if cc.get_argument_syntax()=='gcc':
+      _c_args_d3d10umd += ['-Wno-unknown-pragmas'] if isinstance(_c_args_d3d10umd, list) else '-Wno-unknown-pragmas'
+    
+    
+    libd3d10umd=static_library('d3d10umd',files('Adapter.cpp','Debug.cpp','Device.cpp','Draw.cpp','DxgiFns.cpp','Format.cpp','InputAssembly.cpp','OutputMerger.cpp','Query.cpp','Rasterizer.cpp','Resource.cpp','Shader.cpp','ShaderDump.cpp','ShaderParse.c','ShaderTGSI.c','D3DKMT.cpp',),c_args=_c_args_d3d10umd,cpp_args=_c_args_d3d10umd,include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_winddk,],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/d3d10umd/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/d3d10umd')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/d3d10umd/meson.build
+    ########################################################################################################################
+    libgallium_d3d10_def=custom_target('d3d10.def',input='d3d10.def.in',output='d3d10.def',command=gen_vs_module_defs_normal_command,)
+    
+    gallium_d3d10_name=get_option('gallium-d3d10-dll-name')
+    libgallium_d3d10=shared_library(gallium_d3d10_name,['d3d10_gdi.c'],vs_module_defs=libgallium_d3d10_def,include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_d3d10umd,inc_gallium_winsys,inc_gallium_winsys_sw,inc_gallium_drivers,inc_winddk],link_whole=[libd3d10umd],link_with=[libgallium,libwsgdi],dependencies=[dep_ws2_32,idep_nir,driver_swrast],name_prefix='',install=True,)
+    
+    if with_tests:
+      test('d3d10',executable('test_d3d10',files('tests/tri.cpp'),cpp_args=[cpp_msvc_compat_args],dependencies=[cpp.find_library('d3d11')],link_with=[libgallium_d3d10],),suite=['d3d10'],)
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/d3d10umd/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_platform_windows:
+    if with_opengl:
+      set_relative_dir('src/gallium/frontends/wgl')
+      ########################################################################################################################
+      ### Begin conversion from: src/gallium/frontends/wgl/meson.build
+      ########################################################################################################################
+      inc_wgl=include_directories('.')
+      _c_args_wgl=[]
+      if not with_shared_glapi:
+        _c_args_wgl += ['-D_GLAPI_NO_EXPORTS'] if isinstance(_c_args_wgl, list) else '-D_GLAPI_NO_EXPORTS'
+      
+      
+      _wgl_deps=[idep_xmlconfig,driver_zink]
+      if with_gallium_zink:
+        _wgl_deps+=idep_vulkan_wsi_defines
+      
+      
+      files_libwgl=files('stw_context.c','stw_device.c','stw_ext_context.c','stw_ext_extensionsstring.c','stw_ext_interop.c','stw_ext_pbuffer.c','stw_ext_pixelformat.c','stw_ext_rendertexture.c','stw_ext_swapinterval.c','stw_framebuffer.c','stw_getprocaddress.c','stw_image.c','stw_nopfuncs.c','stw_nopfuncs.h','stw_pixelformat.c','stw_st.c','stw_tls.c',)
+      
+      if target_machine.system().startswith('Gaming.Xbox'):
+        files_libwgl+=files('stw_gdishim.c')
+      
+      
+      libwgl=static_library('wgl',files_libwgl,c_args=['-D_GDI32_',_c_args_wgl],include_directories=[inc_include,inc_src,inc_gallium,inc_gallium_aux,inc_mapi,inc_mesa,],dependencies=_wgl_deps,)
+      
+      ########################################################################################################################
+      ### End conversion from: src/gallium/frontends/wgl/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/gallium')
+      if with_gallium_d3d12:
+        set_relative_dir('src/gallium/winsys/d3d12/wgl')
+        ########################################################################################################################
+        ### Begin conversion from: src/gallium/winsys/d3d12/wgl/meson.build
+        ########################################################################################################################
+        files_libd3d12winsys=files('d3d12_wgl_winsys.c')
+        if target_machine.system().startswith('Gaming.Xbox'):
+          files_libd3d12winsys+=files('d3d12_wgl_framebuffer_xbox.cpp')
+        else:
+          files_libd3d12winsys+=files('d3d12_wgl_framebuffer.cpp')
+        
+        
+        libd3d12winsys=static_library('d3d12winsys',files_libd3d12winsys,include_directories=[inc_src,inc_wgl,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_drivers],dependencies=[dep_dxheaders,idep_nir_headers,idep_libdxil_compiler],gnu_symbol_visibility='hidden',)
+        
+        winsys_d3d12_wgl=declare_dependency(link_with=[libd3d12winsys],)
+        
+        ########################################################################################################################
+        ### End conversion from: src/gallium/winsys/d3d12/wgl/meson.build
+        ########################################################################################################################
+        set_relative_dir('src/gallium')
+      else:
+        winsys_d3d12_wgl=declare_dependency()
+  
+      set_relative_dir('src/gallium/targets/wgl')
+      ########################################################################################################################
+      ### Begin conversion from: src/gallium/targets/wgl/meson.build
+      ########################################################################################################################
+      gallium_wgl_link_args=[]
+      
+      wgl_def=custom_target('gallium_wgl.def',input='gallium_wgl.def.in',output='gallium_wgl.def',command=gen_vs_module_defs_normal_command,)
+      
+      gallium_wgl_name=get_option('gallium-wgl-dll-name')
+      libgallium_wgl=shared_library(gallium_wgl_name,['wgl.c'],vs_module_defs=wgl_def,include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux,inc_wgl,inc_gallium_winsys,inc_gallium_winsys_sw,inc_gallium_drivers,],link_whole=[libwgl],link_with=[libgallium,libglsl,libmesa,libwsgdi,libglapi_static,libglapi,libgalliumvl_stub,],dependencies=[dep_ws2_32,idep_nir,idep_mesautil,driver_swrast,driver_d3d12,driver_zink,winsys_d3d12_wgl],link_args=gallium_wgl_link_args,name_prefix='',install=True,)
+      libgallium_wgl_build_dir=meson.current_build_dir()
+      
+      ########################################################################################################################
+      ### End conversion from: src/gallium/targets/wgl/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/gallium')
+      subdir('targets/libgl-gdi')
+  
+  
+  if with_tests:
+    set_relative_dir('src/gallium/tests')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/tests/meson.build
+    ########################################################################################################################
+    if not with_platform_windows:
+      set_relative_dir('src/gallium/tests/trivial')
+      ########################################################################################################################
+      ### Begin conversion from: src/gallium/tests/trivial/meson.build
+      ########################################################################################################################
+      for t in ['tri','quad-tex']:
+        executable(t,'{}.c'.format(t),include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],link_with=[libgallium,libpipe_loader_dynamic],dependencies=idep_mesautil,install=False,)
+      
+      
+      ########################################################################################################################
+      ### End conversion from: src/gallium/tests/trivial/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/gallium/tests')
+    
+    if with_gallium_softpipe:
+      set_relative_dir('src/gallium/tests/unit')
+      ########################################################################################################################
+      ### Begin conversion from: src/gallium/tests/unit/meson.build
+      ########################################################################################################################
+      for t in ['pipe_barrier_test','u_cache_test','u_half_test','translate_test','u_prim_verts_test']:
+        exe=executable(t,'{}.c'.format(t),include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],link_with=libgallium,dependencies=idep_mesautil,install=False,)
+        if (t=='translate_test'):
+          if ['x86','x86_64'].count(host_machine.cpu_family()) > 0:
+            for arg in ['x86','nosse','sse','sse2','sse3','sse4.1']:
+              test('translate_test '+arg,exe,args=[arg])
+      
+      
+        elif t!='u_cache_test':
+          test(t,exe,suite='gallium',should_fail=meson.get_external_property('xfail','').count(t) > 0,)
+      
+      
+      
+      ########################################################################################################################
+      ### End conversion from: src/gallium/tests/unit/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/gallium/tests')
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/tests/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  if with_swrast_vk:
+    set_relative_dir('src/gallium/frontends/lavapipe')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/lavapipe/meson.build
+    ########################################################################################################################
+    lvp_entrypoints=custom_target('lvp_entrypoints',input=[vk_entrypoints_gen,vk_api_xml],output=['lvp_entrypoints.h','lvp_entrypoints.c'],command=[prog_python,'@INPUT0@','--xml','@INPUT1@','--proto','--weak','--out-h','@OUTPUT0@','--out-c','@OUTPUT1@','--prefix','lvp','--beta',str(with_vulkan_beta),],depend_files=vk_entrypoints_gen_depend_files,)
+    
+    liblvp_files=files('lvp_acceleration_structure.c','lvp_device.c','lvp_device_generated_commands.c','lvp_cmd_buffer.c','lvp_descriptor_set.c','lvp_execute.c','lvp_util.c','lvp_image.c','lvp_formats.c','lvp_inline_uniforms.c','lvp_lower_exec_graph.c','lvp_lower_vulkan_resource.c','lvp_lower_vulkan_resource.h','lvp_lower_input_attachments.c','lvp_nir_lower_ray_queries.c','lvp_nir_lower_sparse_residency.c','lvp_nir_ray_tracing.c','lvp_nir_ray_tracing.h','lvp_pipe_sync.c','lvp_pipeline.c','lvp_pipeline_cache.c','lvp_query.c','lvp_ray_tracing_pipeline.c','lvp_wsi.c')
+    
+    lvp_deps=[]
+    lvp_flags=[]
+    
+    if with_platform_x11:
+      lvp_deps+=dep_xcb_dri3
+    
+    
+    if with_platform_wayland:
+      lvp_deps+=dep_wayland_client
+    
+    
+    liblavapipe_st=static_library('lavapipe_st',[liblvp_files,lvp_entrypoints,sha1_h],c_args=[c_msvc_compat_args,lvp_flags],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_util,inc_gallium,inc_gallium_aux,inc_llvmpipe],dependencies=[dep_llvm,idep_nir,idep_mesautil,idep_vulkan_util,idep_vulkan_wsi,idep_vulkan_runtime,lvp_deps])
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/lavapipe/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/lavapipe')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/lavapipe/meson.build
+    ########################################################################################################################
+    libvulkan_lvp=shared_library('vulkan_lvp',['target.c'],vs_module_defs=vulkan_api_def,include_directories=[inc_src,inc_util,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_winsys,inc_gallium_drivers],link_whole=[liblavapipe_st],link_with=[libpipe_loader_static,libgallium,libwsw,libswdri,libws_null,libswkmsdri],gnu_symbol_visibility='hidden',link_args=[ld_args_bsymbolic,ld_args_gc_sections],override_options=['b_lundef={}'.format('false' if host_machine.system()=='darwin' else str(get_option('b_lundef')))],dependencies=driver_swrast,name_prefix='' if host_machine.system()=='windows' else [],install=True,)
+    
+    if host_machine.system()=='windows':
+      icd_lib_path=module_import('fs').relative_to(get_option('bindir'),with_vulkan_icd_dir)
+      icd_file_name='vulkan_lvp.dll'
+    else:
+      icd_lib_path=join_paths(get_option('prefix'),get_option('libdir'))
+      icd_file_name='libvulkan_lvp.{}'.format('dylib' if host_machine.system()=='darwin' else 'so')
+    
+    
+    icd_command=[prog_python,'@INPUT0@','--api-version','1.3','--xml','@INPUT1@','--lib-path',join_paths(icd_lib_path,icd_file_name),'--out','@OUTPUT@',]
+    if host_machine.system()=='windows':
+      icd_command += ['--use-backslash'] if isinstance(icd_command, list) else '--use-backslash'
+    
+    
+    lvp_icd=custom_target('lvp_icd',input=[vk_icd_gen,vk_api_xml],output='lvp_icd.{}.json'.format(host_machine.cpu()),command=icd_command,build_by_default=True,install_dir=with_vulkan_icd_dir,install_tag='runtime',install=True,)
+    
+    _dev_icdname='lvp_devenv_icd.{}.json'.format(host_machine.cpu())
+    _dev_icd=custom_target('lvp_devenv_icd',input=[vk_icd_gen,vk_api_xml],output=_dev_icdname,command=[prog_python,'@INPUT0@','--api-version','1.1','--xml','@INPUT1@','--lib-path',(meson.current_build_dir() + icd_file_name) if isinstance(meson.current_build_dir(), str) else (meson.current_build_dir() / icd_file_name),'--out','@OUTPUT@',],build_by_default=True,)
+    
+    devenv.append('VK_DRIVER_FILES',_dev_icd.full_path())
+    # Deprecated: replaced by VK_DRIVER_FILES above
+    devenv.append('VK_ICD_FILENAMES',_dev_icd.full_path())
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/lavapipe/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  
+  if with_teflon:
+    set_relative_dir('src/gallium/frontends/teflon')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/frontends/teflon/meson.build
+    ########################################################################################################################
+    libtfl_files=files('tfl_device.c')
+    
+    libteflon_st=static_library('teflon_st',[libtfl_files,sha1_h],c_args=[],gnu_symbol_visibility='hidden',include_directories=[inc_include,inc_src,inc_util,inc_gallium,inc_gallium_aux],dependencies=[idep_mesautil])
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/frontends/teflon/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+    set_relative_dir('src/gallium/targets/teflon')
+    ########################################################################################################################
+    ### Begin conversion from: src/gallium/targets/teflon/meson.build
+    ########################################################################################################################
+    libteflon=shared_library('teflon',['target.c'],include_directories=[inc_src,inc_util,inc_include,inc_gallium,inc_gallium_aux,inc_gallium_winsys,inc_gallium_drivers],link_whole=[libteflon_st],link_with=[libpipe_loader_static,libws_null,libwsw,libswdri,libswkmsdri,libgallium],gnu_symbol_visibility='hidden',link_args=ld_args_build_id,dependencies=[driver_etnaviv,idep_nir,],install=True,)
+    
+    if with_tests:
+      tensorflow_lite=shared_library('tensorflow-lite',['tflite-stub.c'],include_directories=[inc_include],install=False,)
+    
+      tflite_flatbuffer_h_name='tflite-schema-v2.15.0_generated.h'
+      tflite_flatbuffer_h=custom_target('tflite_flatbuffer.h',output=tflite_flatbuffer_h_name,input='tflite-schema-v2.15.0.fbs',command=[prog_flatc,'--cpp','--cpp-ptr-type','std::shared_ptr','--gen-object-api','-o',meson.current_build_dir(),'@INPUT@'],)
+    
+      executable('test_teflon','test_teflon.cpp','test_executor.cpp',tflite_flatbuffer_h,dependencies=[idep_mesautil,idep_gtest],link_with=[tensorflow_lite],include_directories=[inc_include],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/gallium/targets/teflon/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/gallium')
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/gallium/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+  if with_glx=='dri':
+    set_relative_dir('src/glx')
+    ########################################################################################################################
+    ### Begin conversion from: src/glx/meson.build
+    ########################################################################################################################
+    inc_glx=include_directories('.')
+    
+    set_relative_dir('src/glx/apple')
+    ########################################################################################################################
+    ### Begin conversion from: src/glx/apple/meson.build
+    ########################################################################################################################
+    files_libappleglx=files('apple_cgl.c','apple_cgl.h','appledri.c','appledri.h','appledristr.h','apple_glapi.c','apple_glx.c','apple_glx_context.c','apple_glx_context.h','apple_glx_drawable.c','apple_glx_drawable.h','apple_glx.h','apple_glx_log.c','apple_glx_log.h','apple_glx_pbuffer.c','apple_glx_pixmap.c','apple_glx_surface.c','apple_visual.c','apple_visual.h','apple_xgl_api.h','apple_xgl_api_read.c','apple_xgl_api_stereo.c','apple_xgl_api_viewport.c','glx_empty.c',)
+    
+    dep_xplugin=null_dep
+    if with_dri_platform=='apple':
+      dep_xplugin=meson.get_compiler('c').find_library('Xplugin')
+    
+    
+    libappleglx=static_library('glxapple',[files_libappleglx,glapitable_h],include_directories=[inc_mesa,inc_glx,inc_src,inc_include,inc_glapi,inc_loader],dependencies=[dep_xext,dep_xplugin],gnu_symbol_visibility='hidden',build_by_default=False,)
+    
+    ########################################################################################################################
+    ### End conversion from: src/glx/apple/meson.build
+    ########################################################################################################################
+    set_relative_dir('src/glx')
+    if with_dri_platform=='windows':
+      set_relative_dir('src/glx/windows')
+      ########################################################################################################################
+      ### Begin conversion from: src/glx/windows/meson.build
+      ########################################################################################################################
+      files_windowsdriproto=files('windowsdriconst.h','windowsdristr.h',)
+      
+      install_headers(files_windowsdriproto,subdir='X11/extensions',)
+      
+      pkg.generate(name='windowsdriproto',description='Windows-DRI extension headers',version='1.0.0',)
+      
+      # library for using the Windows-DRI server extension
+      files_libwindowsdri=files('xwindowsdri.c','xwindowsdri.h',)
+      
+      libwindowsdri=static_library('driwindows',[files_libwindowsdri,files_windowsdriproto],dependencies=dep_xext,build_by_default=False,)# library for native GL on windows
+      files_libwindowsglx=files('windowsgl.c','windowsgl.h','windowsgl_internal.h','windows_drawable.c','wgl.c','wgl.h',)
+      
+      libwindowsglx=static_library('glxwindows',[files_libwindowsglx,files_windowsdriproto],include_directories=[inc_include,inc_src,inc_glapi],gnu_symbol_visibility='hidden',build_by_default=False,)
+      
+      ########################################################################################################################
+      ### End conversion from: src/glx/windows/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/glx')
+    
+    
+    files_libglx=files('clientattrib.c','clientinfo.c','compsize.c','create_context.c','dri_common.c','dri_common.h','dri_common_query_renderer.c','dri_common_interop.c','drisw_glx.c','drisw_priv.h','eval.c','glxclient.h','glxcmds.c','glxconfig.c','glxconfig.h','glxcurrent.c','glx_error.c','glx_error.h','glxext.c','glxextensions.c','glxextensions.h','glxhash.c','glxhash.h','glx_pbuffer.c','glx_query.c','indirect_glx.c','indirect_init.h','indirect_texture_compression.c','indirect_transpose_matrix.c','indirect_vertex_array.c','indirect_vertex_array.h','indirect_vertex_array_priv.h','indirect_vertex_program.c','indirect_window_pos.c','packrender.h','packsingle.h','pixel.c','pixelstore.c','query_renderer.c','render2.c','renderpix.c','single2.c','singlepix.c','vertarr.c','xfont.c',)
+    
+    extra_libs_libglx=[]
+    extra_deps_libgl=[]
+    extra_ld_args_libgl=[]# dri2
+    if (with_dri_platform=='drm' and dep_libdrm.found()) or with_dri_platform=='apple':
+      files_libglx+=files('dri2.c','dri2_glx.c','dri2.h','dri2_priv.h',)
+    
+    
+    if with_dri3:
+      files_libglx+=files('dri3_glx.c','dri3_priv.h')
+    
+    
+    if with_dri_platform=='apple':
+      files_libglx+=files('applegl_glx.c')
+      extra_libs_libglx+=libappleglx
+    elif with_dri_platform=='windows':
+      files_libglx+=files('driwindows_glx.c')
+      extra_libs_libglx+=[libwindowsdri,libwindowsglx,]
+      extra_deps_libgl=[meson.get_compiler('c').find_library('gdi32'),meson.get_compiler('c').find_library('opengl32')]
+      extra_ld_args_libgl='-Wl,--disable-stdcall-fixup'
+    
+    
+    if not with_glvnd:
+      gl_lib_name='GL'
+      gl_lib_version='1.2.0'
+    else:
+      gl_lib_name='GLX_{}'.format(glvnd_vendor_name)
+      gl_lib_version='0.0.0'
+      files_libglx+=files('g_glxglvnddispatchfuncs.c','g_glxglvnddispatchindices.h','glxglvnd.c','glxglvnd.h','glxglvnddispatchfuncs.h',)
+    
+    
+    libglx=static_library('glx',[files_libglx,glx_generated],include_directories=[inc_include,inc_src,inc_glapi,inc_loader],c_args=['-DGL_LIB_NAME="lib{}.so.{}"'.format(gl_lib_name,gl_lib_version.split('.')[0]),],gnu_symbol_visibility='hidden',link_with=[libloader,libloader_dri3_helper,extra_libs_libglx,],dependencies=[idep_mesautil,idep_xmlconfig,dep_libdrm,dep_dri2proto,dep_glproto,dep_x11,dep_xext,dep_glvnd,dep_xxf86vm,dep_xshmfence,dep_xfixes,],)
+    
+    libgl=shared_library(gl_lib_name,[],link_with=[libglapi_static,libglapi],link_whole=libglx,link_args=[ld_args_bsymbolic,ld_args_gc_sections,extra_ld_args_libgl],dependencies=[dep_libdrm,dep_dl,dep_m,dep_thread,dep_x11,dep_xcb_glx,dep_xcb,dep_x11_xcb,dep_xcb_dri2,dep_xext,dep_xfixes,dep_xxf86vm,dep_xcb_shm,extra_deps_libgl,],version=gl_lib_version,darwin_versions='4.0.0',install=True,)
+    
+    if with_tests:
+      set_relative_dir('src/glx/tests')
+      ########################################################################################################################
+      ### Begin conversion from: src/glx/tests/meson.build
+      ########################################################################################################################
+      if with_shared_glapi:
+        files_glx_test=files('clientinfo_unittest.cpp','create_context_unittest.cpp','enum_sizes.cpp','fake_glx_screen.cpp','fake_glx_screen.h','indirect_api.cpp','mock_xdisplay.h','query_renderer_unittest.cpp',)
+        if with_dri2:
+          files_glx_test+=files('query_renderer_implementation_unittest.cpp')
+      
+      
+        test('dispatch-index-check',files('dispatch-index-check'),suite=['glx'],)
+        test('glx-test',executable('glx-test',[files_glx_test,glx_indirect_size_h,main_dispatch_h],link_with=[libglx,libglapi,libloader],include_directories=[inc_src,inc_include,inc_mesa,inc_mapi,inc_glx,inc_loader,],dependencies=[dep_libdrm,dep_glproto,dep_thread,idep_gtest]),suite=['glx'],protocol='gtest',)
+      
+      
+      ########################################################################################################################
+      ### End conversion from: src/glx/tests/meson.build
+      ########################################################################################################################
+      set_relative_dir('src/glx')
+    
+    
+    ########################################################################################################################
+    ### End conversion from: src/glx/meson.build
+    ########################################################################################################################
+    set_relative_dir('src')
+# This has to be here since it requires libgallium, and subdir cannot
+  # contain ..
+  if with_tests:
+    set_relative_dir('src/mesa/main/tests')
+    ########################################################################################################################
+    ### Begin conversion from: src/mesa/main/tests/meson.build
+    ########################################################################################################################
+    files_main_test=files('enum_strings.cpp','disable_windows_include.c',)
+    # disable_windows_include.c includes this generated header.
+    files_main_test+=main_marshal_generated_h
+    link_main_test=[]
+    
+    if with_shared_glapi:
+      files_main_test+=files('mesa_formats.cpp','mesa_extensions.cpp','program_state_string.cpp',)
+      link_main_test+=libglapi
+    else:
+      files_main_test+=files('stubs.cpp')
+    
+    
+    test('main-test',executable('main_test',[files_main_test,main_dispatch_h],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],dependencies=[idep_gtest,dep_clock,dep_dl,dep_thread,idep_nir_headers,idep_mesautil],link_with=[libmesa,libgallium,link_main_test],),suite=['mesa'],protocol='gtest',)
+    
+    ########################################################################################################################
+    ### End conversion from: src/mesa/main/tests/meson.build
+    ########################################################################################################################
+    set_relative_dir('src')
+
+  if with_tests and with_shared_glapi:
+    set_relative_dir('src/mesa/state_tracker/tests')
+    ########################################################################################################################
+    ### Begin conversion from: src/mesa/state_tracker/tests/meson.build
+    ########################################################################################################################
+    test('st_format_test',executable('st_format_test',['st_format.c'],include_directories=[inc_include,inc_src,inc_mapi,inc_mesa,inc_gallium,inc_gallium_aux],link_with=[libmesa,libglapi,libgallium,],dependencies=[idep_gtest,idep_mesautil],),suite=['st_mesa'],)
+    
+    ########################################################################################################################
+    ### End conversion from: src/mesa/state_tracker/tests/meson.build
+    ########################################################################################################################
+    set_relative_dir('src')
+
+
+if with_egl:
+  set_relative_dir('src/egl')
+  ########################################################################################################################
+  ### Begin conversion from: src/egl/meson.build
+  ########################################################################################################################
+  inc_egl=include_directories('.','main')
+  inc_egl_dri2=include_directories('drivers/dri2')
+  
+  c_args_for_egl=[asan_c_args]
+  cpp_args_for_egl=[]
+  link_for_egl=[]
+  deps_for_egl=[]
+  incs_for_egl=[inc_include,inc_src,inc_egl]
+  
+  if with_gallium_softpipe:
+    c_args_for_egl += ['-DGALLIUM_SOFTPIPE'] if isinstance(c_args_for_egl, list) else '-DGALLIUM_SOFTPIPE'
+  
+  
+  files_egl=files('main/eglapi.c','main/eglarray.c','main/eglarray.h','main/eglconfigdebug.c','main/eglconfigdebug.h','main/eglconfig.c','main/eglconfig.h','main/eglcontext.c','main/eglcontext.h','main/eglcurrent.c','main/eglcurrent.h','main/egldefines.h','main/egldevice.c','main/egldevice.h','main/egldisplay.c','main/egldisplay.h','main/egldriver.h','main/eglglobals.c','main/eglglobals.h','main/eglimage.c','main/eglimage.h','main/egllog.c','main/egllog.h','main/eglsurface.c','main/eglsurface.h','main/eglsync.c','main/eglsync.h','main/eglentrypoint.h','main/egltypedefs.h',)
+  
+  g_egldispatchstubs_c=custom_target('g_egldispatchstubs.c',input=['generate/gen_egl_dispatch.py','generate/egl.xml','generate/egl_other.xml'],output='g_egldispatchstubs.c',command=[prog_python,'@INPUT0@','source','@INPUT1@','@INPUT2@',],depend_files=[files('generate/eglFunctionList.py'),genCommon_py,],capture=True,)
+  
+  g_egldispatchstubs_h=custom_target('g_egldispatchstubs.h',input=['generate/gen_egl_dispatch.py','generate/egl.xml','generate/egl_other.xml'],output='g_egldispatchstubs.h',command=[prog_python,'@INPUT0@','header','@INPUT1@','@INPUT2@',],depend_files=[files('generate/eglFunctionList.py'),genCommon_py,],capture=True,)
+  
+  if with_dri2:
+    files_egl+=files('drivers/dri2/egl_dri2.c','drivers/dri2/egl_dri2.h',)
+    files_egl+=sha1_h
+    deps_for_egl+=idep_xmlconfig
+    link_for_egl+=libloader
+    incs_for_egl+=inc_loader
+    incs_for_egl+=inc_gallium
+    incs_for_egl+=inc_gallium_aux
+    incs_for_egl+=inc_mesa
+    incs_for_egl+=inc_st_dri
+  
+    files_egl+=files('drivers/dri2/platform_device.c','drivers/dri2/platform_surfaceless.c',)
+  
+    if with_platform_x11:
+      files_egl+=files('drivers/dri2/platform_x11.c')
+      if with_dri3:
+        files_egl+=files('drivers/dri2/platform_x11_dri3.c')
+        link_for_egl+=libloader_dri3_helper
+  
+      deps_for_egl+=[dep_x11_xcb,dep_xcb_dri2,dep_xcb_xrandr,dep_xcb_xfixes]
+  
+    if with_gbm and not with_platform_android:
+      files_egl+=files('drivers/dri2/platform_drm.c')
+      link_for_egl+=libgbm
+      incs_for_egl+=[inc_gbm,include_directories('../gbm/main')]
+      deps_for_egl+=dep_libdrm
+  
+    if with_platform_wayland:
+      deps_for_egl+=[dep_wayland_client,dep_wayland_server,dep_wayland_egl_headers]
+      link_for_egl+=[libwayland_drm,libloader_wayland_helper]
+      files_egl+=files('drivers/dri2/platform_wayland.c')
+      files_egl+=wp_files['linux-dmabuf-unstable-v1']
+      files_egl+=[wayland_drm_client_protocol_h]
+      incs_for_egl+=include_directories('wayland/wayland-drm')
+  
+    if with_platform_android:
+      deps_for_egl+=[dep_android,idep_u_gralloc]
+      files_egl+=files('drivers/dri2/platform_android.c')
+  
+  elif with_platform_haiku:
+    c_args_for_egl+=['-D_EGL_BUILT_IN_DRIVER_HAIKU',]
+    files_egl+=files('drivers/haiku/egl_haiku.cpp')
+  
+    incs_for_egl+=[inc_gallium,inc_gallium_aux,inc_gallium_drivers,inc_gallium_winsys,inc_gallium_winsys_sw]
+    incs_for_egl+=[inc_mesa,inc_mapi]
+    incs_for_egl+=[include_directories('../gallium/frontends/hgl')]
+  
+    link_for_egl+=[libmesa,libgallium,libswhgl,libsthgl]
+    deps_for_egl+=[cpp.find_library('be'),driver_swrast]
+  elif with_platform_windows:
+    c_args_for_egl+=['-DEGLAPI=','-DPUBLIC=']
+    files_egl+=files('drivers/wgl/egl_wgl.c')
+    incs_for_egl+=[inc_wgl,inc_gallium,inc_gallium_aux,inc_mesa,inc_mapi]
+    link_for_egl+=libgallium_wgl
+  
+  
+  if cc.has_function('mincore'):
+    c_args_for_egl += ['-DHAVE_MINCORE'] if isinstance(c_args_for_egl, list) else '-DHAVE_MINCORE'
+  
+  
+  if not with_glvnd:
+    egl_lib_name='EGL'+get_option('egl-lib-suffix')
+    egl_lib_version='1.0.0'
+    egl_lib_soversion='' if host_machine.system()=='windows' else '1'
+  else:
+    egl_lib_name='EGL_{}'.format(glvnd_vendor_name)
+    egl_lib_version='0.0.0'
+    egl_lib_soversion='0'
+    deps_for_egl+=dep_glvnd
+    files_egl+=[g_egldispatchstubs_h,g_egldispatchstubs_c]
+    files_egl+=files('main/eglglvnd.c','main/egldispatchstubs.c')
+    glvnd_config=configuration_data()
+    glvnd_config.set('glvnd_vendor_name',get_option('glvnd-vendor-name'))
+    configure_file(configuration=glvnd_config,input='main/50_mesa.json',output='50_{}.json'.format(glvnd_vendor_name),install=True,install_tag='runtime',install_dir=join_paths(get_option('datadir'),'glvnd','egl_vendor.d'))
+  
+  
+  egl_def=custom_target('egl.def',input='main/egl.def.in',output='egl.def',command=gen_vs_module_defs_normal_command,)
+  
+  libegl=shared_library(egl_lib_name,files_egl,c_args=[c_args_for_egl,'-D_EGL_NATIVE_PLATFORM=_EGL_PLATFORM_{}'.format(egl_native_platform.upper()),],cpp_args=[cpp_args_for_egl],gnu_symbol_visibility='hidden',include_directories=incs_for_egl,link_with=[link_for_egl,libglapi],link_args=[ld_args_bsymbolic,ld_args_gc_sections],dependencies=[deps_for_egl,dep_dl,dep_libdrm,dep_clock,dep_thread,idep_mesautil],install=True,version=egl_lib_version,soversion=egl_lib_soversion,name_prefix='lib' if host_machine.system()=='windows' else [],vs_module_defs=egl_def)
+  
+  if not with_glvnd:
+    pkg.generate(name='egl',description='Mesa EGL Library',version=meson.project_version(),libraries=libegl,libraries_private=gl_priv_libs,requires_private=gl_priv_reqs,extra_cflags=gl_pkgconfig_c_flags,)
+  
+  
+  if with_symbols_check:
+    if with_glvnd:
+      egl_symbols=files('egl-glvnd-symbols.txt')
+    else:
+      egl_symbols=files('egl-symbols.txt')
+  
+    test('egl-symbols-check',symbols_check,args=['--lib',libegl,'--symbols-file',egl_symbols,symbols_check_args,],suite=['egl'],)
+    test('egl-entrypoint-check',prog_python,args=files('egl-entrypoint-check.py','main/eglentrypoint.h'),suite=['egl'],)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/egl/meson.build
+  ########################################################################################################################
+  set_relative_dir('src')
+# This must be after at least mesa, glx, and gallium, since libgl will be
+# defined in one of those subdirs depending on the glx provider.
+if with_glx!='disabled' and not with_glvnd:
+  pkg.generate(name='gl',description='Mesa OpenGL Library',version=meson.project_version(),libraries=libgl,libraries_private=gl_priv_libs,requires_private=gl_priv_reqs,variables=['glx_tls=yes'],)
+
+
+set_relative_dir('src/tool')
+########################################################################################################################
+### Begin conversion from: src/tool/meson.build
+########################################################################################################################
+if with_perfetto and dep_libdrm.found():
+  set_relative_dir('src/tool/pps')
+  ########################################################################################################################
+  ### Begin conversion from: src/tool/pps/meson.build
+  ########################################################################################################################
+  pps_sources=['pps.cc','pps_device.cc','pps_driver.cc','pps_counter.cc',]
+  
+  include_pps=include_directories('../')
+  
+  dep_drm=dependency('libdrm')
+  pps_deps=[dep_drm,dep_perfetto]
+  pps_deps+=pps_datasources
+  
+  lib_pps=static_library('pps',sources=pps_sources,include_directories=[include_pps,inc_src,pps_includes],dependencies=pps_deps,)
+  
+  dep_pps=declare_dependency(link_with=lib_pps,include_directories=[include_pps,inc_src])
+  
+  producer_sources=['pps_datasource.cc','pps_producer.cc']
+  
+  executable('pps-producer',sources=producer_sources,include_directories=[include_pps,inc_src],dependencies=[dep_pps,dep_perfetto],install=True)
+  
+  config_sources=['pps_config.cc']
+  
+  dep_docopt=dependency('docopt',required=False)
+  
+  if dep_docopt.found():
+    executable('pps-config',sources=config_sources,include_directories=[include_pps,inc_src],dependencies=[dep_pps,dep_docopt],install=True)
+  
+  
+  ########################################################################################################################
+  ### End conversion from: src/tool/pps/meson.build
+  ########################################################################################################################
+  set_relative_dir('src/tool')
+
+
+if with_tools.count('dlclose-skip') > 0:
+  subdir('dlclose-skip')
+
+
+########################################################################################################################
+### End conversion from: src/tool/meson.build
+########################################################################################################################
+set_relative_dir('src')
+
+########################################################################################################################
+### End conversion from: src/meson.build
+########################################################################################################################
+set_relative_dir('')
+
+meson.add_devenv(devenv)
+
+sphinx=find_program('sphinx-build',version='>= 4.3',required=get_option('html-docs'))
+if sphinx.found():
+  set_relative_dir('docs')
+  ########################################################################################################################
+  ### Begin conversion from: docs/meson.build
+  ########################################################################################################################
+  get_option('html-docs').require(run_command(prog_python,'-c','''
+  try:
+    from packaging.version import Version
+  except:
+    from distutils.version import StrictVersion as Version
+  import hawkmoth
+  assert Version(hawkmoth.__version__) >= Version("0.16.0")
+    ''',check=False).returncode()==0,error_message='hawkmoth >= 0.16.0 required')
+  
+  html_docs=custom_target('html',depfile='docs.d',depend_files=files('conf.py'),command=[sphinx,'-b','html','-q','-Ddepfile=@DEPFILE@',meson.current_source_dir(),'@OUTPUT@'],output='html',build_by_default=get_option('html-docs').enabled(),)
+  
+  html_docs_path=get_option('html-docs-path')
+  if html_docs_path=='':
+    html_docs_path=join_paths(get_option('datadir'),'doc','mesa')
+  
+  
+  install_subdir(html_docs.full_path(),install_dir=html_docs_path,exclude_files=['.buildinfo'],exclude_directories=['.doctrees'],strip_directory=True)
+  
+  ########################################################################################################################
+  ### End conversion from: docs/meson.build
+  ########################################################################################################################
+  set_relative_dir('')
+
+
+summary({'prefix':get_option('prefix'),'libdir':get_option('libdir'),'includedir':get_option('includedir'),},section='Directories')
+
+summary({'c_cpp_args':c_cpp_args,},section='Common C and C++ arguments')
+
+summary({'OpenGL':with_opengl,'ES1':with_gles1,'ES2':with_gles2,'Shared glapi':with_shared_glapi,'GLVND':with_glvnd,},section='OpenGL',bool_yn=True)
+
+summary({'Platform':with_dri_platform,'Driver dir':dri_drivers_path,},section='DRI',bool_yn=True,list_sep=' ')
+
+summary({'Enabled':with_glx!='disabled','Provider':'None' if with_glx=='disabled' else with_glx},section='GLX',bool_yn=True,list_sep=' ')
+
+egl_summary={'Enabled':with_egl}
+if with_egl:
+  egl_drivers=[]
+  if with_dri:
+    egl_drivers += ['builtin:egl_dri2'] if isinstance(egl_drivers, list) else 'builtin:egl_dri2'
+
+  if with_dri3:
+    egl_drivers += ['builtin:egl_dri3'] if isinstance(egl_drivers, list) else 'builtin:egl_dri3'
+
+  if with_platform_windows:
+    egl_drivers += ['builtin:wgl'] if isinstance(egl_drivers, list) else 'builtin:wgl'
+
+  egl_summary |= {'Drivers':egl_drivers}
+  egl_summary |= {'Platforms':_platforms}
+
+summary(egl_summary,section='EGL',bool_yn=True,list_sep=' ')
+
+gbm_summary={'Enabled':with_gbm}
+if with_gbm:
+  gbm_summary |= {'Backends path':gbm_backends_path}
+
+summary(gbm_summary,section='GBM',bool_yn=True,list_sep=' ')
+
+vulkan_summary={'Drivers':_vulkan_drivers if len(_vulkan_drivers)!=0 else False}
+if with_any_vk:
+  vulkan_summary |= {'Platforms':_platforms}
+  vulkan_summary |= {'ICD dir':with_vulkan_icd_dir}
+  if with_any_vulkan_layers:
+    vulkan_summary |= {'Layers':get_option('vulkan-layers')}
+
+  vulkan_summary |= {'Intel Ray tracing':with_intel_vk_rt}
+
+summary(vulkan_summary,section='Vulkan',bool_yn=True,list_sep=' ')
+
+video_summary={'Codecs':_codecs if len(_codecs)!=0 else False}
+video_apis=[]
+if with_gallium_vdpau:
+  video_apis += ['vdpau'] if isinstance(video_apis, list) else 'vdpau'
+
+if with_gallium_va:
+  video_apis += ['va'] if isinstance(video_apis, list) else 'va'
+
+if with_any_vk:
+  video_apis += ['vulkan'] if isinstance(video_apis, list) else 'vulkan'
+
+if with_gallium_xa:
+  video_apis += ['xa'] if isinstance(video_apis, list) else 'xa'
+
+if with_gallium_omx!='disabled':
+  video_apis += ['omx'] if isinstance(video_apis, list) else 'omx'
+
+video_summary |= {'APIs':video_apis if len(video_apis)!=0 else False}
+summary(video_summary,section='Video',bool_yn=True,list_sep=' ')
+
+llvm_summary={'Enabled':with_llvm}
+if with_llvm:
+  llvm_summary |= {'Version':dep_llvm.version()}
+
+summary(llvm_summary,section='LLVM',bool_yn=True,list_sep=' ')
+
+gallium_summary={'Enabled':with_gallium}
+if with_gallium:
+  gallium_summary |= {'Drivers':gallium_drivers}
+  gallium_summary |= {'Platforms':_platforms}
+
+  gallium_frontends=['mesa']
+  if with_gallium_xa:
+    gallium_frontends += ['xa'] if isinstance(gallium_frontends, list) else 'xa'
+
+  if with_gallium_vdpau:
+    gallium_frontends += ['vdpau'] if isinstance(gallium_frontends, list) else 'vdpau'
+
+  if with_gallium_omx!='disabled':
+    gallium_frontends += ['omx'+with_gallium_omx] if isinstance(gallium_frontends, list) else 'omx'+with_gallium_omx
+
+  if with_gallium_va:
+    gallium_frontends += ['va'] if isinstance(gallium_frontends, list) else 'va'
+
+  if with_gallium_st_nine:
+    gallium_frontends += ['nine'] if isinstance(gallium_frontends, list) else 'nine'
+
+  if with_gallium_clover:
+    gallium_frontends += ['clover'] if isinstance(gallium_frontends, list) else 'clover'
+
+  if with_gallium_rusticl:
+    gallium_frontends += ['rusticl'] if isinstance(gallium_frontends, list) else 'rusticl'
+
+  gallium_summary |= {'Frontends':gallium_frontends}
+  gallium_summary |= {'Off-screen rendering (OSMesa)':'lib'+osmesa_lib_name if with_osmesa else False}
+  gallium_summary |= {'HUD lm-sensors':dep_lmsensors.found()}
+
+summary(gallium_summary,section='Gallium',bool_yn=True,list_sep=' ')
+
+perfetto_summary={'Enabled':with_perfetto}
+if with_perfetto and with_any_datasource:
+  perfetto_summary |= {'Data source':with_datasources}
+
+summary(perfetto_summary,section='Perfetto',bool_yn=True,list_sep=' ')
+
+teflon_summary={'Enabled':with_teflon}
+summary(teflon_summary,section='Teflon (TensorFlow Lite delegate)',bool_yn=True,list_sep=' ')
+
+########################################################################################################################
+### End conversion from: meson.build
+########################################################################################################################
+### Close the build definition file
+close_output_file()
diff --git a/meson.build b/meson.build
index 35749b6d29d..bd31409a8c4 100644
--- a/meson.build
+++ b/meson.build
@@ -415,7 +415,7 @@ if with_glx == 'dri'
 endif
 
 if not with_opengl and with_glx != 'disabled'
-  error('Building GLX without OpenGL is not supported.') \
+  error('Building GLX without OpenGL is not supported.')
 endif
 
 if not (with_dri or with_gallium or with_glx != 'disabled')
diff --git a/python-build/build-android-turnip.sh b/python-build/build-android-turnip.sh
index a0aa9a1e1dc..0372ec7cd9d 100755
--- a/python-build/build-android-turnip.sh
+++ b/python-build/build-android-turnip.sh
@@ -30,11 +30,10 @@ fi
 PYTHONPATH=$BIN_DIR python3 generate_android_build.py \
     -Dplatforms=android \
     -Dgallium-drivers= \
-    -Dvulkan-drivers=freedreno \
-    -Dfreedreno-kmds=kgsl \
+    -Dvulkan-drivers=virtio \
     -Dplatform-sdk-version=33
 
-source $ROOT_DIR/build/envsetup.sh
-lunch aosp_trout_arm64-trunk_staging-userdebug
+#source $ROOT_DIR/build/envsetup.sh
+#lunch aosp_trout_arm64-trunk_staging-userdebug
 
-m vulkan_freedreno
+#m vulkan_freedreno
diff --git a/python-build/meson2python.py b/python-build/meson2python.py
index df7f46b6793..1ae714d05ec 100644
--- a/python-build/meson2python.py
+++ b/python-build/meson2python.py
@@ -76,7 +76,6 @@ meson_grammar = r"""
     FOREACH: /foreach/
     GREATER: />/
     GREATER_OR_EQUAL: />=/
-    # Raise priorities to avoid elif parsed as a statement
     ELIF.1: /elif/
     ELSE.1: /else/
     ENDIF.1: /endif/
@@ -109,7 +108,6 @@ meson_grammar = r"""
     %import common.WS
 
     %ignore WS
-    # Comments would be nice to keep, but parsing fails end-of-line comments
     %ignore COMMENT
 """
 
-- 
2.39.2

