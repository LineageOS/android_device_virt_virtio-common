#
# Copyright (C) 2024 The LineageOS Project
#
# SPDX-License-Identifier: Apache-2.0
#

serial

if insmod efi_gop; then
	terminal_output gfxterm serial
	loadfont /boot/grub/fonts/unicode.pf2

	insmod gfxmenu
	insmod jpeg
	insmod png
	insmod tga

	if [ -f /boot/grub/themes/@BOOTMGR_THEME@/theme.cfg ]; then
		source /boot/grub/themes/@BOOTMGR_THEME@/theme.cfg
	fi
fi

set ab_enable=@AB_OTA_UPDATER@
export ab_enable

if [ "$ab_enable" = "true" ]; then
	set boot_ramdisk_filename=combined-ramdisk-recovery.img
	set partition_misc='(hd0,gpt3)'
	set partition_persist='(hd0,gpt4)'
	set partition_grub_boot_a='(hd0,gpt7)'
	set partition_grub_boot_b='(hd0,gpt8)'
	export partition_grub_boot_a
	export partition_grub_boot_b
else
	set boot_ramdisk_filename=combined-ramdisk.img
	set partition_misc='(hd0,gpt3)'
	set partition_persist='(hd0,gpt9)'
fi
export boot_ramdisk_filename
export partition_misc
export partition_persist

# Default to empty (which is typically EFI partition)
set boot_partition=
export boot_partition

load_env -f ${partition_persist}/grubenv android_theme
export android_theme

function set_kernel_cmdline_dynamic {
	if [ "$android_theme" = "1" ]; then
		# White
		set androidboot_theme=0
	elif [ "$android_theme" = "2" ]; then
		# Dark
		set androidboot_theme=1
	fi
	set kernel_cmdline_dynamic="androidboot.theme=${androidboot_theme}"

	if [ "$ab_enable" = "true" ]; then
		if [ "${abootctrl_global_current_slot}" ]; then
			set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} androidboot.slot_suffix=_${abootctrl_global_current_slot}"
		fi
	fi

	export kernel_cmdline_dynamic
}

function ab_load_needed_env {
	for global_item in active_slot; do
		load_env -f ${partition_persist}/grubenv_abootctrl abootctrl_global_${global_item}
		if [ "$?" != "0" ]; then
			return 1
		fi
		export abootctrl_global_${global_item}
	done
	for slot in $ab_slots; do
		for slot_item in boot_count is_bootable; do
			load_env -f ${partition_persist}/grubenv_abootctrl abootctrl_slot_${slot}_${slot_item}
			if [ "$?" != "0" ]; then
				return 1
			fi
			export abootctrl_slot_${slot}_${slot_item}
		done
	done
}
function ab_load_unneeded_env {
	for global_item in current_slot snapshot_merge_status; do
		load_env -f ${partition_persist}/grubenv_abootctrl abootctrl_global_${global_item}
		export abootctrl_global_${global_item}
	done
	for slot in $ab_slots; do
		for slot_item in is_successful; do
			load_env -f ${partition_persist}/grubenv_abootctrl abootctrl_slot_${slot}_${slot_item}
			export abootctrl_slot_${slot}_${slot_item}
		done
	done
}
function ab_set_save_env {
	set ${1}=${2}
	export ${1}
	save_env -f ${partition_persist}/grubenv_abootctrl ${1}
}
function ab_check_active_slot_boot_count {
	var_name=abootctrl_slot_${abootctrl_global_active_slot}_boot_count
	eval var_value=\$$var_name
	if [ "$var_value" = "XXXXXXX" ]; then
		# Bad: Boot failed for 7 times
		return 1
	else
		# Good
		return 0
	fi
}
function ab_update_active_slot_boot_count {
	var_name=abootctrl_slot_${abootctrl_global_active_slot}_boot_count
	if [ "$1" = "increase" ]; then
		eval var_value=\$$var_name
		set_var_value=${var_value}X
	else
		set_var_value=
	fi
	ab_set_save_env $var_name $set_var_value
}
function ab_check_active_slot_is_bootable {
	var_name=abootctrl_slot_${abootctrl_global_active_slot}_is_bootable
	eval var_value=\$$var_name
	if [ "$var_value" = "false" ]; then
		# Bad: Not bootable
		return 1
	else
		# Good
		return 0
	fi
}
function ab_set_active_slot_is_bootable {
	var_name=abootctrl_slot_${abootctrl_global_active_slot}_is_bootable
	if [ "$1" = "false" ]; then
		set_var_value=false
	else
		set_var_value=true
	fi
	ab_set_save_env $var_name $set_var_value
}
function ab_set_active_slot_is_successful {
	var_name=abootctrl_slot_${abootctrl_global_active_slot}_is_successful
	if [ "$1" = "false" ]; then
		set_var_value=false
	else
		set_var_value=true
	fi
	ab_set_save_env $var_name $set_var_value
}
function ab_set_boot_partition_var {
	var_name=partition_grub_boot_$abootctrl_global_current_slot
	eval set boot_partition=\$$var_name
	export boot_partition
}
function ab_switch_active_slot {
	# Change active slot to another
	if [ "$abootctrl_global_active_slot" = "a" ]; then
		ab_set_save_env abootctrl_global_active_slot b
	elif [ "$abootctrl_global_active_slot" = "b" ]; then
		ab_set_save_env abootctrl_global_active_slot a
	else
		ab_set_save_env abootctrl_global_active_slot a
	fi

	# Mark the new active slot as bootable
	ab_update_active_slot_boot_count clear
	ab_set_active_slot_is_bootable true
}
function ab_init {
	set ab_slots="a b"
	export ab_slots
	if ! ab_load_needed_env; then
		set ab_init_failed=true
		export ab_init_failed
		# Fallback
		set abootctrl_global_current_slot=a
		export abootctrl_global_current_slot
		ab_set_boot_partition_var
		return 1
	fi
	ab_load_unneeded_env
}
function ab_pre_boot_hook {
	if [ "$ab_enable" != "true" ]; then
		return 0
	fi
	if [ "$ab_init_failed" = "true" ]; then
		return 0
	fi

	if [ ! -f "${boot_partition}/kernel" ]; then
		# The boot partition according to the active slot is inaccessible
		ab_set_active_slot_is_bootable false
		ab_switch_active_slot
	fi

	if ab_check_active_slot_is_bootable; then
		if ab_check_active_slot_boot_count; then
			# Best case: Active slot is bootable and boot count is small
			true # Do nothing
		else
			# Active slot's boot count exceeds but still marked as bootable
			ab_set_active_slot_is_bootable false
			ab_switch_active_slot
		fi
	else
		# Active slot is outright marked as not bootable
		ab_switch_active_slot
	fi

	# Let's boot the now active slot
	ab_set_active_slot_is_successful false
	ab_update_active_slot_boot_count increase
	ab_set_save_env abootctrl_global_current_slot $abootctrl_global_active_slot
	ab_set_boot_partition_var
	set_kernel_cmdline_dynamic
}
if [ "$ab_enable" = "true" ]; then
	ab_init
fi

set_kernel_cmdline_dynamic

# Note: Command `loadstring` is not available in upstream grub source code
loadstring $partition_misc android_misc 0 20
if [ "$android_misc" = "boot-recovery" ]; then
	# Boot to recovery
	set default=1
	set timeout=10
elif [ "$android_misc" = "bootonce-bootloader" ]; then
	# Do nothing
	true
else
	# Normal boot
	set default=0
	set timeout=10
fi

if [ "$android_theme" = "1" ]; then
	# White
	background_color 255,255,255
fi

if [ "$ab_init_failed" = "true" ]; then
	# Red
	background_color 255,0,0
	set timeout='-1'
fi

menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@" {
	ab_pre_boot_hook
	echo 'Loading kernel...'
	linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.force_normal_boot=1
	echo 'Loading ramdisk...'
	initrd ${boot_partition}/${boot_ramdisk_filename}
}

menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@ Recovery" {
	ab_pre_boot_hook
	echo 'Loading kernel...'
	linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.mode=recovery
	echo 'Loading recovery ramdisk...'
	initrd ${boot_partition}/combined-ramdisk-recovery.img
}

submenu 'Advanced options' {
	menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@ (Enable VirtWifi)" {
		ab_pre_boot_hook
		echo 'Loading kernel...'
		linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.force_normal_boot=1 androidboot.wifi_impl=virt_wifi
		echo 'Loading ramdisk...'
		initrd ${boot_partition}/${boot_ramdisk_filename}
	}

	menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@ (SELinux Permissive)" {
		ab_pre_boot_hook
		echo 'Loading kernel...'
		linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.force_normal_boot=1 androidboot.selinux=permissive
		echo 'Loading ramdisk...'
		initrd ${boot_partition}/${boot_ramdisk_filename}
	}

	menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@ on phone" {
		ab_pre_boot_hook
		echo 'Loading kernel...'
		linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.force_normal_boot=1 androidboot.selinux=permissive virtio_gpu.force_resolution=576x1024 androidboot.low_perf=1
		echo 'Loading ramdisk...'
		initrd ${boot_partition}/${boot_ramdisk_filename}
	}

	menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@ on phone (Disable boot animation)" {
		ab_pre_boot_hook
		echo 'Loading kernel...'
		linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.force_normal_boot=1 androidboot.selinux=permissive virtio_gpu.force_resolution=576x1024 androidboot.low_perf=1 androidboot.nobootanim=1
		echo 'Loading ramdisk...'
		initrd ${boot_partition}/${boot_ramdisk_filename}
	}

	menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@ (Swiftshader graphics)" {
		ab_pre_boot_hook
		echo 'Loading kernel...'
		linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.force_normal_boot=1 androidboot.graphics=swiftshader
		echo 'Loading ramdisk...'
		initrd ${boot_partition}/${boot_ramdisk_filename}
	}

	menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@ (Enable low performance optimizations, Disable boot animation)" {
		ab_pre_boot_hook
		echo 'Loading kernel...'
		linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.force_normal_boot=1 androidboot.low_perf=1 androidboot.nobootanim=1
		echo 'Loading ramdisk...'
		initrd ${boot_partition}/${boot_ramdisk_filename}
	}

	menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@ (Swiftshader graphics, Enable low performance optimizations, Disable boot animation)" {
		ab_pre_boot_hook
		echo 'Loading kernel...'
		linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.force_normal_boot=1 androidboot.graphics=swiftshader androidboot.low_perf=1 androidboot.nobootanim=1
		echo 'Loading ramdisk...'
		initrd ${boot_partition}/${boot_ramdisk_filename}
	}

	menuentry "Boot GSI from /dev/block/sda with @BOOTMGR_ANDROID_DISTRIBUTION_NAME@" {
		ab_pre_boot_hook
		echo 'Loading kernel...'
		linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.force_normal_boot=1 androidboot.fstab_suffix=virtio.gsi.sda
		echo 'Loading ramdisk...'
		initrd ${boot_partition}/${boot_ramdisk_filename}
	}

	menuentry "Boot GSI from /dev/block/vdc with @BOOTMGR_ANDROID_DISTRIBUTION_NAME@" {
		ab_pre_boot_hook
		echo 'Loading kernel...'
		linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.force_normal_boot=1 androidboot.fstab_suffix=virtio.gsi.vdc
		echo 'Loading ramdisk...'
		initrd ${boot_partition}/${boot_ramdisk_filename}
	}
}

submenu 'Advanced options for recovery mode' {
	menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@ Recovery on phone" {
		ab_pre_boot_hook
		echo 'Loading kernel...'
		linux ${boot_partition}/kernel @STRIPPED_BOARD_KERNEL_CMDLINE@ $kernel_cmdline_dynamic androidboot.mode=recovery androidboot.selinux=permissive virtio_gpu.force_resolution=576x1024
		echo 'Loading recovery ramdisk...'
		initrd ${boot_partition}/combined-ramdisk-recovery.img
	}
}
